### Script Generated by Control Surface Studio for Python 3 (resorted to default: no)
import Live
from _Framework.ControlSurface import ControlSurface
from _Framework.Layer import Layer
from _Framework.DeviceComponent import DeviceComponent
from _Framework.MixerComponent import MixerComponent
from _Framework.SliderElement import SliderElement
from _Framework.TransportComponent import TransportComponent
from _Framework.InputControlElement import *
from _Framework.ButtonElement import ButtonElement
from _Framework.ButtonMatrixElement import ButtonMatrixElement
from _Framework.SessionComponent import SessionComponent
from _Framework.EncoderElement import *
from Launchpad.ConfigurableButtonElement import ConfigurableButtonElement
import time
from itertools import chain
from _Framework.Util import find_if
import collections
try:
	from .user import *
except ImportError:
	pass
class CustomMixerComponent(MixerComponent):
	def tracks_to_use(self):
		return tuple(self.song().visible_tracks) + tuple(self.song().return_tracks)
class css_ableton4tb(ControlSurface):
	def __init__(self, c_instance):
		super(css_ableton4tb, self).__init__(c_instance)
		with self.component_guard():
			global _map_modes
			device = DeviceComponent(is_enabled=True, device_selection_follows_track_selection=False)
			self.set_device_component(device)
			_map_modes = Live.MidiMap.MapMode
			self.current_track_offset = 0
			self.current_scene_offset = 0
			global mixer
			num_tracks = 128
			num_returns = 24
			if hasattr(self, 'modifierList'):
				self.modifierList()
			if hasattr(self, 'customLists'):
				self.customLists()
			self._settings()
			self._inputs()
			self.turn_inputs_off()
			self.mixer = CustomMixerComponent(num_tracks, num_returns)
			global active_mode
			self.debug_on = False
			self.generate_relative_tracks_dict()
			self.mode_list()
			self.set_active_mode(self.modes[0])
			self.listening_to_tracks()
			self.song().add_tracks_listener(self.listening_to_tracks)
			self.song().add_scenes_listener(self._on_scenes_changed)
			self.all_track_device_listeners()
			self.song().view.add_selected_parameter_listener(self._on_selected_parameter_changed)
			self.create_clip_slot_map()
			try:
				self.user = user(self)
			except:
				pass
			self.call_script_reaction(None, None, 'script_was_initialised')
	def modifierList(self):
		global modifiers
		self.modifiers = {}
		self.modifiers["m1"] = {"value": 0}
		self.modifiers["m2"] = {"value": 0}
		self.modifiers["m3"] = {"value": 0}
		self.modifiers["m4"] = {"value": 0}
		self.modifiers["m5"] = {"value": 0}
		self.modifiers["m6"] = {"value": 0}
		self.modifiers["m7"] = {"value": 0}
		self.modifiers["m8"] = {"value": 0}
		self.modifiers["m9"] = {"value": 0}
		self.modifiers["m10"] = {"value": 0}
		self.modifiers["m11"] = {"value": 0}
		self.modifiers["m12"] = {"value": 0}
		self.modifiers["m13"] = {"value": 0}
		self.modifiers["m14"] = {"value": 0}
		self.modifiers["m15"] = {"value": 0}
		self.modifiers["m16"] = {"value": 0}
		self.modifiers["m17"] = {"value": 0}
		self.modifiers["m18"] = {"value": 0}
		self.modifiers["m19"] = {"value": 0}
		self.modifiers["m20"] = {"value": 0}
	def customLists(self):
		global lists
		self.lists = {}
		self.lists["list1"] = {"value": []}
		self.lists["list2"] = {"value": []}
		self.lists["list3"] = {"value": []}
		self.lists["list4"] = {"value": []}
		self.lists["list5"] = {"value": []}
		self.lists["list6"] = {"value": []}
		self.lists["list7"] = {"value": []}
		self.lists["list8"] = {"value": []}
		self.lists["list9"] = {"value": []}
		self.lists["list10"] = {"value": []}
	def _settings(self):
		self.global_feedback = "default"
		self.global_feedback_active = True
		self.global_LED_on = 127
		self.global_LED_off = 0
		self.controller_LED_on = 127
		self.controller_LED_off = 0
		self.led_on = self.controller_LED_on
		self.led_off = self.controller_LED_off
	def mode_list(self):
		global modes
		self.mode_conf = 3672
		self.modes = {}
		self.modes[0] = "1"
		self.modes[1] = "3"
		self.modes[2] = "4"
		self.modes[3] = "49"
	def _inputs(self):
		self.input_map = [
			"midi_cc_ch_0_val_0",
			"midi_cc_ch_1_val_0",
			"midi_cc_ch_2_val_0",
			"midi_cc_ch_3_val_0",
			"midi_cc_ch_4_val_0",
			"midi_cc_ch_5_val_0",
			"midi_cc_ch_6_val_0",
			"midi_cc_ch_7_val_0",
			"midi_cc_ch_0_val_16",
			"midi_cc_ch_0_val_17",
			"midi_cc_ch_0_val_18",
			"midi_cc_ch_0_val_19",
			"midi_cc_ch_0_val_20",
			"midi_cc_ch_0_val_21",
			"midi_cc_ch_0_val_22",
			"midi_cc_ch_0_val_23",
			"midi_note_ch_0_val_16",
			"midi_note_ch_0_val_8",
			"midi_note_ch_0_val_0",
			"midi_note_ch_0_val_24",
			"midi_note_ch_0_val_10",
			"midi_note_ch_0_val_18",
			"midi_note_ch_0_val_2",
			"midi_note_ch_0_val_26",
			"midi_note_ch_0_val_4",
			"midi_note_ch_0_val_12",
			"midi_note_ch_0_val_20",
			"midi_note_ch_0_val_28",
			"midi_note_ch_0_val_30",
			"midi_note_ch_0_val_6",
			"midi_note_ch_0_val_14",
			"midi_note_ch_0_val_22",
			"midi_note_ch_0_val_15",
			"midi_note_ch_0_val_7",
			"midi_note_ch_0_val_23",
			"midi_note_ch_0_val_31",
			"midi_note_ch_0_val_29",
			"midi_note_ch_0_val_5",
			"midi_note_ch_0_val_13",
			"midi_note_ch_0_val_21",
			"midi_note_ch_0_val_1",
			"midi_note_ch_0_val_9",
			"midi_note_ch_0_val_17",
			"midi_note_ch_0_val_25",
			"midi_note_ch_0_val_19",
			"midi_note_ch_0_val_11",
			"midi_note_ch_0_val_3",
			"midi_note_ch_0_val_27",
			"midi_note_ch_0_val_94",
			"midi_note_ch_0_val_93",
			"midi_note_ch_0_val_95",
			"midi_note_ch_0_val_91",
			"midi_note_ch_0_val_96",
			"midi_note_ch_0_val_97",
			"midi_note_ch_0_val_92",
			"midi_note_ch_0_val_46",
			"midi_note_ch_0_val_47",
			"midi_note_ch_0_val_98",
			"midi_note_ch_0_val_99"]
		self.midi_cc_ch_0_val_0 = EncoderElement(MIDI_CC_TYPE, 0, 0, _map_modes.absolute)
		self.midi_cc_ch_0_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_0.pre_val = -1
		self.midi_cc_ch_0_val_0.cur_val = -1
		self.midi_cc_ch_1_val_0 = EncoderElement(MIDI_CC_TYPE, 1, 0, _map_modes.absolute)
		self.midi_cc_ch_1_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_1_val_0.pre_val = -1
		self.midi_cc_ch_1_val_0.cur_val = -1
		self.midi_cc_ch_2_val_0 = EncoderElement(MIDI_CC_TYPE, 2, 0, _map_modes.absolute)
		self.midi_cc_ch_2_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_2_val_0.pre_val = -1
		self.midi_cc_ch_2_val_0.cur_val = -1
		self.midi_cc_ch_3_val_0 = EncoderElement(MIDI_CC_TYPE, 3, 0, _map_modes.absolute)
		self.midi_cc_ch_3_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_3_val_0.pre_val = -1
		self.midi_cc_ch_3_val_0.cur_val = -1
		self.midi_cc_ch_4_val_0 = EncoderElement(MIDI_CC_TYPE, 4, 0, _map_modes.absolute)
		self.midi_cc_ch_4_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_4_val_0.pre_val = -1
		self.midi_cc_ch_4_val_0.cur_val = -1
		self.midi_cc_ch_5_val_0 = EncoderElement(MIDI_CC_TYPE, 5, 0, _map_modes.absolute)
		self.midi_cc_ch_5_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_5_val_0.pre_val = -1
		self.midi_cc_ch_5_val_0.cur_val = -1
		self.midi_cc_ch_6_val_0 = EncoderElement(MIDI_CC_TYPE, 6, 0, _map_modes.absolute)
		self.midi_cc_ch_6_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_6_val_0.pre_val = -1
		self.midi_cc_ch_6_val_0.cur_val = -1
		self.midi_cc_ch_7_val_0 = EncoderElement(MIDI_CC_TYPE, 7, 0, _map_modes.absolute)
		self.midi_cc_ch_7_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_7_val_0.pre_val = -1
		self.midi_cc_ch_7_val_0.cur_val = -1
		self.midi_cc_ch_0_val_16 = EncoderElement(MIDI_CC_TYPE, 0, 16, _map_modes.absolute)
		self.midi_cc_ch_0_val_16.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_16.pre_val = -1
		self.midi_cc_ch_0_val_16.cur_val = -1
		self.midi_cc_ch_0_val_17 = EncoderElement(MIDI_CC_TYPE, 0, 17, _map_modes.absolute)
		self.midi_cc_ch_0_val_17.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_17.pre_val = -1
		self.midi_cc_ch_0_val_17.cur_val = -1
		self.midi_cc_ch_0_val_18 = EncoderElement(MIDI_CC_TYPE, 0, 18, _map_modes.absolute)
		self.midi_cc_ch_0_val_18.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_18.pre_val = -1
		self.midi_cc_ch_0_val_18.cur_val = -1
		self.midi_cc_ch_0_val_19 = EncoderElement(MIDI_CC_TYPE, 0, 19, _map_modes.absolute)
		self.midi_cc_ch_0_val_19.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_19.pre_val = -1
		self.midi_cc_ch_0_val_19.cur_val = -1
		self.midi_cc_ch_0_val_20 = EncoderElement(MIDI_CC_TYPE, 0, 20, _map_modes.absolute)
		self.midi_cc_ch_0_val_20.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_20.pre_val = -1
		self.midi_cc_ch_0_val_20.cur_val = -1
		self.midi_cc_ch_0_val_21 = EncoderElement(MIDI_CC_TYPE, 0, 21, _map_modes.absolute)
		self.midi_cc_ch_0_val_21.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_21.pre_val = -1
		self.midi_cc_ch_0_val_21.cur_val = -1
		self.midi_cc_ch_0_val_22 = EncoderElement(MIDI_CC_TYPE, 0, 22, _map_modes.absolute)
		self.midi_cc_ch_0_val_22.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_22.pre_val = -1
		self.midi_cc_ch_0_val_22.cur_val = -1
		self.midi_cc_ch_0_val_23 = EncoderElement(MIDI_CC_TYPE, 0, 23, _map_modes.absolute)
		self.midi_cc_ch_0_val_23.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_cc_ch_0_val_23.pre_val = -1
		self.midi_cc_ch_0_val_23.cur_val = -1
		self.midi_note_ch_0_val_16 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 16)
		self.midi_note_ch_0_val_16.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_16.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_16.pre_val = -1
		self.midi_note_ch_0_val_16.cur_val = -1
		self.midi_note_ch_0_val_8 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 8)
		self.midi_note_ch_0_val_8.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_8.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_8.pre_val = -1
		self.midi_note_ch_0_val_8.cur_val = -1
		self.midi_note_ch_0_val_0 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 0)
		self.midi_note_ch_0_val_0.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_0.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_0.pre_val = -1
		self.midi_note_ch_0_val_0.cur_val = -1
		self.midi_note_ch_0_val_24 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 24)
		self.midi_note_ch_0_val_24.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_24.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_24.pre_val = -1
		self.midi_note_ch_0_val_24.cur_val = -1
		self.midi_note_ch_0_val_10 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 10)
		self.midi_note_ch_0_val_10.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_10.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_10.pre_val = -1
		self.midi_note_ch_0_val_10.cur_val = -1
		self.midi_note_ch_0_val_18 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 18)
		self.midi_note_ch_0_val_18.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_18.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_18.pre_val = -1
		self.midi_note_ch_0_val_18.cur_val = -1
		self.midi_note_ch_0_val_2 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 2)
		self.midi_note_ch_0_val_2.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_2.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_2.pre_val = -1
		self.midi_note_ch_0_val_2.cur_val = -1
		self.midi_note_ch_0_val_26 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 26)
		self.midi_note_ch_0_val_26.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_26.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_26.pre_val = -1
		self.midi_note_ch_0_val_26.cur_val = -1
		self.midi_note_ch_0_val_4 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 4)
		self.midi_note_ch_0_val_4.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_4.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_4.pre_val = -1
		self.midi_note_ch_0_val_4.cur_val = -1
		self.midi_note_ch_0_val_12 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 12)
		self.midi_note_ch_0_val_12.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_12.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_12.pre_val = -1
		self.midi_note_ch_0_val_12.cur_val = -1
		self.midi_note_ch_0_val_20 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 20)
		self.midi_note_ch_0_val_20.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_20.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_20.pre_val = -1
		self.midi_note_ch_0_val_20.cur_val = -1
		self.midi_note_ch_0_val_28 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 28)
		self.midi_note_ch_0_val_28.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_28.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_28.pre_val = -1
		self.midi_note_ch_0_val_28.cur_val = -1
		self.midi_note_ch_0_val_30 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 30)
		self.midi_note_ch_0_val_30.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_30.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_30.pre_val = -1
		self.midi_note_ch_0_val_30.cur_val = -1
		self.midi_note_ch_0_val_6 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 6)
		self.midi_note_ch_0_val_6.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_6.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_6.pre_val = -1
		self.midi_note_ch_0_val_6.cur_val = -1
		self.midi_note_ch_0_val_14 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 14)
		self.midi_note_ch_0_val_14.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_14.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_14.pre_val = -1
		self.midi_note_ch_0_val_14.cur_val = -1
		self.midi_note_ch_0_val_22 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 22)
		self.midi_note_ch_0_val_22.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_22.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_22.pre_val = -1
		self.midi_note_ch_0_val_22.cur_val = -1
		self.midi_note_ch_0_val_15 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 15)
		self.midi_note_ch_0_val_15.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_15.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_15.pre_val = -1
		self.midi_note_ch_0_val_15.cur_val = -1
		self.midi_note_ch_0_val_7 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 7)
		self.midi_note_ch_0_val_7.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_7.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_7.pre_val = -1
		self.midi_note_ch_0_val_7.cur_val = -1
		self.midi_note_ch_0_val_23 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 23)
		self.midi_note_ch_0_val_23.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_23.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_23.pre_val = -1
		self.midi_note_ch_0_val_23.cur_val = -1
		self.midi_note_ch_0_val_31 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 31)
		self.midi_note_ch_0_val_31.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_31.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_31.pre_val = -1
		self.midi_note_ch_0_val_31.cur_val = -1
		self.midi_note_ch_0_val_29 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 29)
		self.midi_note_ch_0_val_29.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_29.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_29.pre_val = -1
		self.midi_note_ch_0_val_29.cur_val = -1
		self.midi_note_ch_0_val_5 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 5)
		self.midi_note_ch_0_val_5.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_5.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_5.pre_val = -1
		self.midi_note_ch_0_val_5.cur_val = -1
		self.midi_note_ch_0_val_13 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 13)
		self.midi_note_ch_0_val_13.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_13.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_13.pre_val = -1
		self.midi_note_ch_0_val_13.cur_val = -1
		self.midi_note_ch_0_val_21 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 21)
		self.midi_note_ch_0_val_21.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_21.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_21.pre_val = -1
		self.midi_note_ch_0_val_21.cur_val = -1
		self.midi_note_ch_0_val_1 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 1)
		self.midi_note_ch_0_val_1.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_1.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_1.pre_val = -1
		self.midi_note_ch_0_val_1.cur_val = -1
		self.midi_note_ch_0_val_9 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 9)
		self.midi_note_ch_0_val_9.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_9.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_9.pre_val = -1
		self.midi_note_ch_0_val_9.cur_val = -1
		self.midi_note_ch_0_val_17 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 17)
		self.midi_note_ch_0_val_17.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_17.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_17.pre_val = -1
		self.midi_note_ch_0_val_17.cur_val = -1
		self.midi_note_ch_0_val_25 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 25)
		self.midi_note_ch_0_val_25.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_25.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_25.pre_val = -1
		self.midi_note_ch_0_val_25.cur_val = -1
		self.midi_note_ch_0_val_19 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 19)
		self.midi_note_ch_0_val_19.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_19.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_19.pre_val = -1
		self.midi_note_ch_0_val_19.cur_val = -1
		self.midi_note_ch_0_val_11 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 11)
		self.midi_note_ch_0_val_11.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_11.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_11.pre_val = -1
		self.midi_note_ch_0_val_11.cur_val = -1
		self.midi_note_ch_0_val_3 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 3)
		self.midi_note_ch_0_val_3.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_3.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_3.pre_val = -1
		self.midi_note_ch_0_val_3.cur_val = -1
		self.midi_note_ch_0_val_27 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 27)
		self.midi_note_ch_0_val_27.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_27.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_27.pre_val = -1
		self.midi_note_ch_0_val_27.cur_val = -1
		self.midi_note_ch_0_val_94 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 94)
		self.midi_note_ch_0_val_94.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_94.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_94.pre_val = -1
		self.midi_note_ch_0_val_94.cur_val = -1
		self.midi_note_ch_0_val_93 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 93)
		self.midi_note_ch_0_val_93.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_93.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_93.pre_val = -1
		self.midi_note_ch_0_val_93.cur_val = -1
		self.midi_note_ch_0_val_95 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 95)
		self.midi_note_ch_0_val_95.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_95.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_95.pre_val = -1
		self.midi_note_ch_0_val_95.cur_val = -1
		self.midi_note_ch_0_val_91 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 91)
		self.midi_note_ch_0_val_91.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_91.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_91.pre_val = -1
		self.midi_note_ch_0_val_91.cur_val = -1
		self.midi_note_ch_0_val_96 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 96)
		self.midi_note_ch_0_val_96.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_96.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_96.pre_val = -1
		self.midi_note_ch_0_val_96.cur_val = -1
		self.midi_note_ch_0_val_97 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 97)
		self.midi_note_ch_0_val_97.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_97.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_97.pre_val = -1
		self.midi_note_ch_0_val_97.cur_val = -1
		self.midi_note_ch_0_val_92 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 92)
		self.midi_note_ch_0_val_92.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_92.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_92.pre_val = -1
		self.midi_note_ch_0_val_92.cur_val = -1
		self.midi_note_ch_0_val_46 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 46)
		self.midi_note_ch_0_val_46.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_46.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_46.pre_val = -1
		self.midi_note_ch_0_val_46.cur_val = -1
		self.midi_note_ch_0_val_47 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 47)
		self.midi_note_ch_0_val_47.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_47.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_47.pre_val = -1
		self.midi_note_ch_0_val_47.cur_val = -1
		self.midi_note_ch_0_val_98 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 98)
		self.midi_note_ch_0_val_98.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_98.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_98.pre_val = -1
		self.midi_note_ch_0_val_98.cur_val = -1
		self.midi_note_ch_0_val_99 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 0, 99)
		self.midi_note_ch_0_val_99.set_on_off_values(self.led_on, self.led_off)
		self.midi_note_ch_0_val_99.add_value_listener(self.placehold_listener,identify_sender= False)
		self.midi_note_ch_0_val_99.pre_val = -1
		self.midi_note_ch_0_val_99.cur_val = -1
	def _mode1(self):
		self.show_message("Volume is active")
		num_tracks = 8
		num_scenes = 8
		track_offset = self.current_track_offset
		scene_offset = self.current_scene_offset
		combination_mode = "off"
		feedbackArr = {}
		feedbackArr["ClipRecording"] = None
		feedbackArr["ClipStarted"] = None
		feedbackArr["ClipStopped"] = None
		feedbackArr["ClipTriggeredPlay"] = None
		feedbackArr["ClipTriggeredRecord"] = None
		feedbackArr["NoScene"] = None
		feedbackArr["RecordButton"] = None
		feedbackArr["Scene"] = None
		feedbackArr["SceneTriggered"] = None
		feedbackArr["StopAllOff"] = None
		feedbackArr["StopAllOn"] = None
		feedbackArr["StopClip"] = None
		feedbackArr["StopClipTriggered"] = None
		feedbackArr["StopTrackPlaying"] = None
		feedbackArr["StopTrackStopped"] = None
		clips = []
		stop_all = []
		stop_tracks = []
		scene_launch = [self.midi_note_ch_0_val_24, self.midi_note_ch_0_val_25, self.midi_note_ch_0_val_26, self.midi_note_ch_0_val_27, self.midi_note_ch_0_val_28, self.midi_note_ch_0_val_29, self.midi_note_ch_0_val_30, self.midi_note_ch_0_val_31]
		self.session_box(num_tracks, num_scenes, track_offset, scene_offset, clips, stop_all, stop_tracks, scene_launch, feedbackArr, combination_mode)
		self.generate_relative_tracks_dict()
		self.midi_note_ch_0_val_14.add_value_listener(self.midi_note_ch_0_val_14_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_15.add_value_listener(self.midi_note_ch_0_val_15_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_13.add_value_listener(self.midi_note_ch_0_val_13_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_8.add_value_listener(self.midi_note_ch_0_val_8_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_10.add_value_listener(self.midi_note_ch_0_val_10_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_11.add_value_listener(self.midi_note_ch_0_val_11_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_9.add_value_listener(self.midi_note_ch_0_val_9_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_12.add_value_listener(self.midi_note_ch_0_val_12_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_95.add_value_listener(self.midi_note_ch_0_val_95_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_97.add_value_listener(self.midi_note_ch_0_val_97_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_96.add_value_listener(self.midi_note_ch_0_val_96_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_0.add_value_listener(self.midi_cc_ch_0_val_0_mode1_listener,identify_sender= False)
		self.midi_cc_ch_1_val_0.add_value_listener(self.midi_cc_ch_1_val_0_mode1_listener,identify_sender= False)
		self.midi_cc_ch_2_val_0.add_value_listener(self.midi_cc_ch_2_val_0_mode1_listener,identify_sender= False)
		self.midi_cc_ch_3_val_0.add_value_listener(self.midi_cc_ch_3_val_0_mode1_listener,identify_sender= False)
		self.midi_cc_ch_4_val_0.add_value_listener(self.midi_cc_ch_4_val_0_mode1_listener,identify_sender= False)
		self.midi_cc_ch_5_val_0.add_value_listener(self.midi_cc_ch_5_val_0_mode1_listener,identify_sender= False)
		self.midi_cc_ch_6_val_0.add_value_listener(self.midi_cc_ch_6_val_0_mode1_listener,identify_sender= False)
		self.midi_cc_ch_7_val_0.add_value_listener(self.midi_cc_ch_7_val_0_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_4.add_value_listener(self.midi_note_ch_0_val_4_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_1.add_value_listener(self.midi_note_ch_0_val_1_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_0.add_value_listener(self.midi_note_ch_0_val_0_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_5.add_value_listener(self.midi_note_ch_0_val_5_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_2.add_value_listener(self.midi_note_ch_0_val_2_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_6.add_value_listener(self.midi_note_ch_0_val_6_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_3.add_value_listener(self.midi_note_ch_0_val_3_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_7.add_value_listener(self.midi_note_ch_0_val_7_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_92.add_value_listener(self.midi_note_ch_0_val_92_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_46.add_value_listener(self.midi_note_ch_0_val_46_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_47.add_value_listener(self.midi_note_ch_0_val_47_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_16.add_value_listener(self.midi_cc_ch_0_val_16_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_17.add_value_listener(self.midi_cc_ch_0_val_17_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_18.add_value_listener(self.midi_cc_ch_0_val_18_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_19.add_value_listener(self.midi_cc_ch_0_val_19_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_20.add_value_listener(self.midi_cc_ch_0_val_20_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_21.add_value_listener(self.midi_cc_ch_0_val_21_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_22.add_value_listener(self.midi_cc_ch_0_val_22_mode1_listener,identify_sender= False)
		self.midi_cc_ch_0_val_23.add_value_listener(self.midi_cc_ch_0_val_23_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_16.add_value_listener(self.midi_note_ch_0_val_16_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_17.add_value_listener(self.midi_note_ch_0_val_17_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_18.add_value_listener(self.midi_note_ch_0_val_18_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_19.add_value_listener(self.midi_note_ch_0_val_19_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_20.add_value_listener(self.midi_note_ch_0_val_20_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_21.add_value_listener(self.midi_note_ch_0_val_21_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_22.add_value_listener(self.midi_note_ch_0_val_22_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_23.add_value_listener(self.midi_note_ch_0_val_23_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_94.add_value_listener(self.midi_note_ch_0_val_94_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_93.add_value_listener(self.midi_note_ch_0_val_93_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_91.add_value_listener(self.midi_note_ch_0_val_91_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_98.add_value_listener(self.midi_note_ch_0_val_98_mode1_listener,identify_sender= False)
		self.midi_note_ch_0_val_99.add_value_listener(self.midi_note_ch_0_val_99_mode1_listener,identify_sender= False)
		self._mode1_configs()
		self._mode1_led_listeners()
	def _mode3(self):
		self.show_message("Aux 1 is active")
		num_tracks = 8
		num_scenes = 8
		track_offset = self.current_track_offset
		scene_offset = self.current_scene_offset
		combination_mode = "off"
		feedbackArr = {}
		feedbackArr["ClipRecording"] = None
		feedbackArr["ClipStarted"] = None
		feedbackArr["ClipStopped"] = None
		feedbackArr["ClipTriggeredPlay"] = None
		feedbackArr["ClipTriggeredRecord"] = None
		feedbackArr["NoScene"] = None
		feedbackArr["RecordButton"] = None
		feedbackArr["Scene"] = None
		feedbackArr["SceneTriggered"] = None
		feedbackArr["StopAllOff"] = None
		feedbackArr["StopAllOn"] = None
		feedbackArr["StopClip"] = None
		feedbackArr["StopClipTriggered"] = None
		feedbackArr["StopTrackPlaying"] = None
		feedbackArr["StopTrackStopped"] = None
		clips = []
		stop_all = []
		stop_tracks = []
		scene_launch = [self.midi_note_ch_0_val_24, self.midi_note_ch_0_val_25, self.midi_note_ch_0_val_26, self.midi_note_ch_0_val_27, self.midi_note_ch_0_val_28, self.midi_note_ch_0_val_29, self.midi_note_ch_0_val_30, self.midi_note_ch_0_val_31]
		self.session_box(num_tracks, num_scenes, track_offset, scene_offset, clips, stop_all, stop_tracks, scene_launch, feedbackArr, combination_mode)
		self.generate_relative_tracks_dict()
		self.midi_note_ch_0_val_95.add_value_listener(self.midi_note_ch_0_val_95_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_97.add_value_listener(self.midi_note_ch_0_val_97_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_96.add_value_listener(self.midi_note_ch_0_val_96_mode3_listener,identify_sender= False)
		self.midi_cc_ch_0_val_0.add_value_listener(self.midi_cc_ch_0_val_0_mode3_listener,identify_sender= False)
		self.midi_cc_ch_1_val_0.add_value_listener(self.midi_cc_ch_1_val_0_mode3_listener,identify_sender= False)
		self.midi_cc_ch_2_val_0.add_value_listener(self.midi_cc_ch_2_val_0_mode3_listener,identify_sender= False)
		self.midi_cc_ch_3_val_0.add_value_listener(self.midi_cc_ch_3_val_0_mode3_listener,identify_sender= False)
		self.midi_cc_ch_4_val_0.add_value_listener(self.midi_cc_ch_4_val_0_mode3_listener,identify_sender= False)
		self.midi_cc_ch_5_val_0.add_value_listener(self.midi_cc_ch_5_val_0_mode3_listener,identify_sender= False)
		self.midi_cc_ch_6_val_0.add_value_listener(self.midi_cc_ch_6_val_0_mode3_listener,identify_sender= False)
		self.midi_cc_ch_7_val_0.add_value_listener(self.midi_cc_ch_7_val_0_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_4.add_value_listener(self.midi_note_ch_0_val_4_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_1.add_value_listener(self.midi_note_ch_0_val_1_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_0.add_value_listener(self.midi_note_ch_0_val_0_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_5.add_value_listener(self.midi_note_ch_0_val_5_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_2.add_value_listener(self.midi_note_ch_0_val_2_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_6.add_value_listener(self.midi_note_ch_0_val_6_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_3.add_value_listener(self.midi_note_ch_0_val_3_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_7.add_value_listener(self.midi_note_ch_0_val_7_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_92.add_value_listener(self.midi_note_ch_0_val_92_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_46.add_value_listener(self.midi_note_ch_0_val_46_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_47.add_value_listener(self.midi_note_ch_0_val_47_mode3_listener,identify_sender= False)
		self.midi_cc_ch_0_val_23.add_value_listener(self.midi_cc_ch_0_val_23_mode3_listener,identify_sender= False)
		self.midi_cc_ch_0_val_22.add_value_listener(self.midi_cc_ch_0_val_22_mode3_listener,identify_sender= False)
		self.midi_cc_ch_0_val_21.add_value_listener(self.midi_cc_ch_0_val_21_mode3_listener,identify_sender= False)
		self.midi_cc_ch_0_val_20.add_value_listener(self.midi_cc_ch_0_val_20_mode3_listener,identify_sender= False)
		self.midi_cc_ch_0_val_19.add_value_listener(self.midi_cc_ch_0_val_19_mode3_listener,identify_sender= False)
		self.midi_cc_ch_0_val_18.add_value_listener(self.midi_cc_ch_0_val_18_mode3_listener,identify_sender= False)
		self.midi_cc_ch_0_val_17.add_value_listener(self.midi_cc_ch_0_val_17_mode3_listener,identify_sender= False)
		self.midi_cc_ch_0_val_16.add_value_listener(self.midi_cc_ch_0_val_16_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_16.add_value_listener(self.midi_note_ch_0_val_16_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_8.add_value_listener(self.midi_note_ch_0_val_8_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_17.add_value_listener(self.midi_note_ch_0_val_17_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_9.add_value_listener(self.midi_note_ch_0_val_9_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_18.add_value_listener(self.midi_note_ch_0_val_18_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_10.add_value_listener(self.midi_note_ch_0_val_10_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_19.add_value_listener(self.midi_note_ch_0_val_19_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_11.add_value_listener(self.midi_note_ch_0_val_11_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_20.add_value_listener(self.midi_note_ch_0_val_20_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_12.add_value_listener(self.midi_note_ch_0_val_12_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_21.add_value_listener(self.midi_note_ch_0_val_21_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_13.add_value_listener(self.midi_note_ch_0_val_13_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_22.add_value_listener(self.midi_note_ch_0_val_22_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_14.add_value_listener(self.midi_note_ch_0_val_14_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_23.add_value_listener(self.midi_note_ch_0_val_23_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_15.add_value_listener(self.midi_note_ch_0_val_15_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_94.add_value_listener(self.midi_note_ch_0_val_94_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_93.add_value_listener(self.midi_note_ch_0_val_93_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_91.add_value_listener(self.midi_note_ch_0_val_91_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_98.add_value_listener(self.midi_note_ch_0_val_98_mode3_listener,identify_sender= False)
		self.midi_note_ch_0_val_99.add_value_listener(self.midi_note_ch_0_val_99_mode3_listener,identify_sender= False)
		self._mode3_configs()
		self._mode3_led_listeners()
	def _mode4(self):
		self.show_message("Aux 2 is active")
		num_tracks = 8
		num_scenes = 8
		track_offset = self.current_track_offset
		scene_offset = self.current_scene_offset
		combination_mode = "off"
		feedbackArr = {}
		feedbackArr["ClipRecording"] = None
		feedbackArr["ClipStarted"] = None
		feedbackArr["ClipStopped"] = None
		feedbackArr["ClipTriggeredPlay"] = None
		feedbackArr["ClipTriggeredRecord"] = None
		feedbackArr["NoScene"] = None
		feedbackArr["RecordButton"] = None
		feedbackArr["Scene"] = None
		feedbackArr["SceneTriggered"] = None
		feedbackArr["StopAllOff"] = None
		feedbackArr["StopAllOn"] = None
		feedbackArr["StopClip"] = None
		feedbackArr["StopClipTriggered"] = None
		feedbackArr["StopTrackPlaying"] = None
		feedbackArr["StopTrackStopped"] = None
		clips = []
		stop_all = []
		stop_tracks = []
		scene_launch = [self.midi_note_ch_0_val_24, self.midi_note_ch_0_val_25, self.midi_note_ch_0_val_26, self.midi_note_ch_0_val_27, self.midi_note_ch_0_val_28, self.midi_note_ch_0_val_29, self.midi_note_ch_0_val_30, self.midi_note_ch_0_val_31]
		self.session_box(num_tracks, num_scenes, track_offset, scene_offset, clips, stop_all, stop_tracks, scene_launch, feedbackArr, combination_mode)
		self.generate_relative_tracks_dict()
		self.midi_note_ch_0_val_95.add_value_listener(self.midi_note_ch_0_val_95_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_97.add_value_listener(self.midi_note_ch_0_val_97_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_96.add_value_listener(self.midi_note_ch_0_val_96_mode4_listener,identify_sender= False)
		self.midi_cc_ch_0_val_0.add_value_listener(self.midi_cc_ch_0_val_0_mode4_listener,identify_sender= False)
		self.midi_cc_ch_1_val_0.add_value_listener(self.midi_cc_ch_1_val_0_mode4_listener,identify_sender= False)
		self.midi_cc_ch_2_val_0.add_value_listener(self.midi_cc_ch_2_val_0_mode4_listener,identify_sender= False)
		self.midi_cc_ch_3_val_0.add_value_listener(self.midi_cc_ch_3_val_0_mode4_listener,identify_sender= False)
		self.midi_cc_ch_4_val_0.add_value_listener(self.midi_cc_ch_4_val_0_mode4_listener,identify_sender= False)
		self.midi_cc_ch_5_val_0.add_value_listener(self.midi_cc_ch_5_val_0_mode4_listener,identify_sender= False)
		self.midi_cc_ch_6_val_0.add_value_listener(self.midi_cc_ch_6_val_0_mode4_listener,identify_sender= False)
		self.midi_cc_ch_7_val_0.add_value_listener(self.midi_cc_ch_7_val_0_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_4.add_value_listener(self.midi_note_ch_0_val_4_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_1.add_value_listener(self.midi_note_ch_0_val_1_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_0.add_value_listener(self.midi_note_ch_0_val_0_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_5.add_value_listener(self.midi_note_ch_0_val_5_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_2.add_value_listener(self.midi_note_ch_0_val_2_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_6.add_value_listener(self.midi_note_ch_0_val_6_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_3.add_value_listener(self.midi_note_ch_0_val_3_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_7.add_value_listener(self.midi_note_ch_0_val_7_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_92.add_value_listener(self.midi_note_ch_0_val_92_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_46.add_value_listener(self.midi_note_ch_0_val_46_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_47.add_value_listener(self.midi_note_ch_0_val_47_mode4_listener,identify_sender= False)
		self.midi_cc_ch_0_val_23.add_value_listener(self.midi_cc_ch_0_val_23_mode4_listener,identify_sender= False)
		self.midi_cc_ch_0_val_22.add_value_listener(self.midi_cc_ch_0_val_22_mode4_listener,identify_sender= False)
		self.midi_cc_ch_0_val_21.add_value_listener(self.midi_cc_ch_0_val_21_mode4_listener,identify_sender= False)
		self.midi_cc_ch_0_val_20.add_value_listener(self.midi_cc_ch_0_val_20_mode4_listener,identify_sender= False)
		self.midi_cc_ch_0_val_19.add_value_listener(self.midi_cc_ch_0_val_19_mode4_listener,identify_sender= False)
		self.midi_cc_ch_0_val_18.add_value_listener(self.midi_cc_ch_0_val_18_mode4_listener,identify_sender= False)
		self.midi_cc_ch_0_val_17.add_value_listener(self.midi_cc_ch_0_val_17_mode4_listener,identify_sender= False)
		self.midi_cc_ch_0_val_16.add_value_listener(self.midi_cc_ch_0_val_16_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_16.add_value_listener(self.midi_note_ch_0_val_16_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_8.add_value_listener(self.midi_note_ch_0_val_8_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_17.add_value_listener(self.midi_note_ch_0_val_17_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_9.add_value_listener(self.midi_note_ch_0_val_9_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_18.add_value_listener(self.midi_note_ch_0_val_18_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_10.add_value_listener(self.midi_note_ch_0_val_10_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_19.add_value_listener(self.midi_note_ch_0_val_19_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_11.add_value_listener(self.midi_note_ch_0_val_11_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_20.add_value_listener(self.midi_note_ch_0_val_20_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_12.add_value_listener(self.midi_note_ch_0_val_12_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_21.add_value_listener(self.midi_note_ch_0_val_21_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_13.add_value_listener(self.midi_note_ch_0_val_13_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_22.add_value_listener(self.midi_note_ch_0_val_22_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_14.add_value_listener(self.midi_note_ch_0_val_14_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_23.add_value_listener(self.midi_note_ch_0_val_23_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_15.add_value_listener(self.midi_note_ch_0_val_15_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_94.add_value_listener(self.midi_note_ch_0_val_94_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_93.add_value_listener(self.midi_note_ch_0_val_93_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_91.add_value_listener(self.midi_note_ch_0_val_91_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_98.add_value_listener(self.midi_note_ch_0_val_98_mode4_listener,identify_sender= False)
		self.midi_note_ch_0_val_99.add_value_listener(self.midi_note_ch_0_val_99_mode4_listener,identify_sender= False)
		self._mode4_configs()
		self._mode4_led_listeners()
	def _mode49(self):
		self.show_message("Pan is active")
		num_tracks = 8
		num_scenes = 8
		track_offset = self.current_track_offset
		scene_offset = self.current_scene_offset
		combination_mode = "off"
		feedbackArr = {}
		feedbackArr["ClipRecording"] = None
		feedbackArr["ClipStarted"] = None
		feedbackArr["ClipStopped"] = None
		feedbackArr["ClipTriggeredPlay"] = None
		feedbackArr["ClipTriggeredRecord"] = None
		feedbackArr["NoScene"] = None
		feedbackArr["RecordButton"] = None
		feedbackArr["Scene"] = None
		feedbackArr["SceneTriggered"] = None
		feedbackArr["StopAllOff"] = None
		feedbackArr["StopAllOn"] = None
		feedbackArr["StopClip"] = None
		feedbackArr["StopClipTriggered"] = None
		feedbackArr["StopTrackPlaying"] = None
		feedbackArr["StopTrackStopped"] = None
		clips = []
		stop_all = []
		stop_tracks = []
		scene_launch = [self.midi_note_ch_0_val_24, self.midi_note_ch_0_val_25, self.midi_note_ch_0_val_26, self.midi_note_ch_0_val_27, self.midi_note_ch_0_val_28, self.midi_note_ch_0_val_29, self.midi_note_ch_0_val_30, self.midi_note_ch_0_val_31]
		self.session_box(num_tracks, num_scenes, track_offset, scene_offset, clips, stop_all, stop_tracks, scene_launch, feedbackArr, combination_mode)
		self.generate_relative_tracks_dict()
		self.midi_note_ch_0_val_95.add_value_listener(self.midi_note_ch_0_val_95_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_97.add_value_listener(self.midi_note_ch_0_val_97_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_96.add_value_listener(self.midi_note_ch_0_val_96_mode49_listener,identify_sender= False)
		self.midi_cc_ch_0_val_0.add_value_listener(self.midi_cc_ch_0_val_0_mode49_listener,identify_sender= False)
		self.midi_cc_ch_1_val_0.add_value_listener(self.midi_cc_ch_1_val_0_mode49_listener,identify_sender= False)
		self.midi_cc_ch_2_val_0.add_value_listener(self.midi_cc_ch_2_val_0_mode49_listener,identify_sender= False)
		self.midi_cc_ch_3_val_0.add_value_listener(self.midi_cc_ch_3_val_0_mode49_listener,identify_sender= False)
		self.midi_cc_ch_4_val_0.add_value_listener(self.midi_cc_ch_4_val_0_mode49_listener,identify_sender= False)
		self.midi_cc_ch_5_val_0.add_value_listener(self.midi_cc_ch_5_val_0_mode49_listener,identify_sender= False)
		self.midi_cc_ch_6_val_0.add_value_listener(self.midi_cc_ch_6_val_0_mode49_listener,identify_sender= False)
		self.midi_cc_ch_7_val_0.add_value_listener(self.midi_cc_ch_7_val_0_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_4.add_value_listener(self.midi_note_ch_0_val_4_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_1.add_value_listener(self.midi_note_ch_0_val_1_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_0.add_value_listener(self.midi_note_ch_0_val_0_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_5.add_value_listener(self.midi_note_ch_0_val_5_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_2.add_value_listener(self.midi_note_ch_0_val_2_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_6.add_value_listener(self.midi_note_ch_0_val_6_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_3.add_value_listener(self.midi_note_ch_0_val_3_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_7.add_value_listener(self.midi_note_ch_0_val_7_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_92.add_value_listener(self.midi_note_ch_0_val_92_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_46.add_value_listener(self.midi_note_ch_0_val_46_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_47.add_value_listener(self.midi_note_ch_0_val_47_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_16.add_value_listener(self.midi_note_ch_0_val_16_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_8.add_value_listener(self.midi_note_ch_0_val_8_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_17.add_value_listener(self.midi_note_ch_0_val_17_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_9.add_value_listener(self.midi_note_ch_0_val_9_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_18.add_value_listener(self.midi_note_ch_0_val_18_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_10.add_value_listener(self.midi_note_ch_0_val_10_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_19.add_value_listener(self.midi_note_ch_0_val_19_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_11.add_value_listener(self.midi_note_ch_0_val_11_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_20.add_value_listener(self.midi_note_ch_0_val_20_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_12.add_value_listener(self.midi_note_ch_0_val_12_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_21.add_value_listener(self.midi_note_ch_0_val_21_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_13.add_value_listener(self.midi_note_ch_0_val_13_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_22.add_value_listener(self.midi_note_ch_0_val_22_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_14.add_value_listener(self.midi_note_ch_0_val_14_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_23.add_value_listener(self.midi_note_ch_0_val_23_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_15.add_value_listener(self.midi_note_ch_0_val_15_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_94.add_value_listener(self.midi_note_ch_0_val_94_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_93.add_value_listener(self.midi_note_ch_0_val_93_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_91.add_value_listener(self.midi_note_ch_0_val_91_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_98.add_value_listener(self.midi_note_ch_0_val_98_mode49_listener,identify_sender= False)
		self.midi_note_ch_0_val_99.add_value_listener(self.midi_note_ch_0_val_99_mode49_listener,identify_sender= False)
		self.midi_cc_ch_0_val_16.add_value_listener(self.midi_cc_ch_0_val_16_mode49_listener,identify_sender= False)
		self.midi_cc_ch_0_val_17.add_value_listener(self.midi_cc_ch_0_val_17_mode49_listener,identify_sender= False)
		self.midi_cc_ch_0_val_18.add_value_listener(self.midi_cc_ch_0_val_18_mode49_listener,identify_sender= False)
		self.midi_cc_ch_0_val_19.add_value_listener(self.midi_cc_ch_0_val_19_mode49_listener,identify_sender= False)
		self.midi_cc_ch_0_val_20.add_value_listener(self.midi_cc_ch_0_val_20_mode49_listener,identify_sender= False)
		self.midi_cc_ch_0_val_21.add_value_listener(self.midi_cc_ch_0_val_21_mode49_listener,identify_sender= False)
		self.midi_cc_ch_0_val_22.add_value_listener(self.midi_cc_ch_0_val_22_mode49_listener,identify_sender= False)
		self.midi_cc_ch_0_val_23.add_value_listener(self.midi_cc_ch_0_val_23_mode49_listener,identify_sender= False)
		self._mode49_configs()
		self._mode49_led_listeners()
	def _remove_mode1(self):
		self.show_message("Mode 1 is removed")
		self.turn_inputs_off()
		combination_mode = "off"
		self.remove_session_box(combination_mode)
		self.midi_note_ch_0_val_14.remove_value_listener(self.midi_note_ch_0_val_14_mode1_listener)
		self.midi_note_ch_0_val_15.remove_value_listener(self.midi_note_ch_0_val_15_mode1_listener)
		self.midi_note_ch_0_val_13.remove_value_listener(self.midi_note_ch_0_val_13_mode1_listener)
		self.midi_note_ch_0_val_8.remove_value_listener(self.midi_note_ch_0_val_8_mode1_listener)
		self.midi_note_ch_0_val_10.remove_value_listener(self.midi_note_ch_0_val_10_mode1_listener)
		self.midi_note_ch_0_val_11.remove_value_listener(self.midi_note_ch_0_val_11_mode1_listener)
		self.midi_note_ch_0_val_9.remove_value_listener(self.midi_note_ch_0_val_9_mode1_listener)
		self.midi_note_ch_0_val_12.remove_value_listener(self.midi_note_ch_0_val_12_mode1_listener)
		self.midi_note_ch_0_val_95.remove_value_listener(self.midi_note_ch_0_val_95_mode1_listener)
		self.midi_note_ch_0_val_97.remove_value_listener(self.midi_note_ch_0_val_97_mode1_listener)
		self.midi_note_ch_0_val_96.remove_value_listener(self.midi_note_ch_0_val_96_mode1_listener)
		self.midi_cc_ch_0_val_0.remove_value_listener(self.midi_cc_ch_0_val_0_mode1_listener)
		self.midi_cc_ch_1_val_0.remove_value_listener(self.midi_cc_ch_1_val_0_mode1_listener)
		self.midi_cc_ch_2_val_0.remove_value_listener(self.midi_cc_ch_2_val_0_mode1_listener)
		self.midi_cc_ch_3_val_0.remove_value_listener(self.midi_cc_ch_3_val_0_mode1_listener)
		self.midi_cc_ch_4_val_0.remove_value_listener(self.midi_cc_ch_4_val_0_mode1_listener)
		self.midi_cc_ch_5_val_0.remove_value_listener(self.midi_cc_ch_5_val_0_mode1_listener)
		self.midi_cc_ch_6_val_0.remove_value_listener(self.midi_cc_ch_6_val_0_mode1_listener)
		self.midi_cc_ch_7_val_0.remove_value_listener(self.midi_cc_ch_7_val_0_mode1_listener)
		self.midi_note_ch_0_val_4.remove_value_listener(self.midi_note_ch_0_val_4_mode1_listener)
		self.midi_note_ch_0_val_1.remove_value_listener(self.midi_note_ch_0_val_1_mode1_listener)
		self.midi_note_ch_0_val_0.remove_value_listener(self.midi_note_ch_0_val_0_mode1_listener)
		self.midi_note_ch_0_val_5.remove_value_listener(self.midi_note_ch_0_val_5_mode1_listener)
		self.midi_note_ch_0_val_2.remove_value_listener(self.midi_note_ch_0_val_2_mode1_listener)
		self.midi_note_ch_0_val_6.remove_value_listener(self.midi_note_ch_0_val_6_mode1_listener)
		self.midi_note_ch_0_val_3.remove_value_listener(self.midi_note_ch_0_val_3_mode1_listener)
		self.midi_note_ch_0_val_7.remove_value_listener(self.midi_note_ch_0_val_7_mode1_listener)
		self.midi_note_ch_0_val_92.remove_value_listener(self.midi_note_ch_0_val_92_mode1_listener)
		self.midi_note_ch_0_val_46.remove_value_listener(self.midi_note_ch_0_val_46_mode1_listener)
		self.midi_note_ch_0_val_47.remove_value_listener(self.midi_note_ch_0_val_47_mode1_listener)
		self.midi_cc_ch_0_val_16.remove_value_listener(self.midi_cc_ch_0_val_16_mode1_listener)
		self.midi_cc_ch_0_val_17.remove_value_listener(self.midi_cc_ch_0_val_17_mode1_listener)
		self.midi_cc_ch_0_val_18.remove_value_listener(self.midi_cc_ch_0_val_18_mode1_listener)
		self.midi_cc_ch_0_val_19.remove_value_listener(self.midi_cc_ch_0_val_19_mode1_listener)
		self.midi_cc_ch_0_val_20.remove_value_listener(self.midi_cc_ch_0_val_20_mode1_listener)
		self.midi_cc_ch_0_val_21.remove_value_listener(self.midi_cc_ch_0_val_21_mode1_listener)
		self.midi_cc_ch_0_val_22.remove_value_listener(self.midi_cc_ch_0_val_22_mode1_listener)
		self.midi_cc_ch_0_val_23.remove_value_listener(self.midi_cc_ch_0_val_23_mode1_listener)
		self.midi_note_ch_0_val_16.remove_value_listener(self.midi_note_ch_0_val_16_mode1_listener)
		self.midi_note_ch_0_val_17.remove_value_listener(self.midi_note_ch_0_val_17_mode1_listener)
		self.midi_note_ch_0_val_18.remove_value_listener(self.midi_note_ch_0_val_18_mode1_listener)
		self.midi_note_ch_0_val_19.remove_value_listener(self.midi_note_ch_0_val_19_mode1_listener)
		self.midi_note_ch_0_val_20.remove_value_listener(self.midi_note_ch_0_val_20_mode1_listener)
		self.midi_note_ch_0_val_21.remove_value_listener(self.midi_note_ch_0_val_21_mode1_listener)
		self.midi_note_ch_0_val_22.remove_value_listener(self.midi_note_ch_0_val_22_mode1_listener)
		self.midi_note_ch_0_val_23.remove_value_listener(self.midi_note_ch_0_val_23_mode1_listener)
		self.midi_note_ch_0_val_94.remove_value_listener(self.midi_note_ch_0_val_94_mode1_listener)
		self.midi_note_ch_0_val_93.remove_value_listener(self.midi_note_ch_0_val_93_mode1_listener)
		self.midi_note_ch_0_val_91.remove_value_listener(self.midi_note_ch_0_val_91_mode1_listener)
		self.midi_note_ch_0_val_98.remove_value_listener(self.midi_note_ch_0_val_98_mode1_listener)
		self.midi_note_ch_0_val_99.remove_value_listener(self.midi_note_ch_0_val_99_mode1_listener)
		self._remove_mode1_led_listeners()
	def _remove_mode3(self):
		self.show_message("Mode 3 is removed")
		self.turn_inputs_off()
		combination_mode = "off"
		self.remove_session_box(combination_mode)
		self.midi_note_ch_0_val_95.remove_value_listener(self.midi_note_ch_0_val_95_mode3_listener)
		self.midi_note_ch_0_val_97.remove_value_listener(self.midi_note_ch_0_val_97_mode3_listener)
		self.midi_note_ch_0_val_96.remove_value_listener(self.midi_note_ch_0_val_96_mode3_listener)
		self.midi_cc_ch_0_val_0.remove_value_listener(self.midi_cc_ch_0_val_0_mode3_listener)
		self.midi_cc_ch_1_val_0.remove_value_listener(self.midi_cc_ch_1_val_0_mode3_listener)
		self.midi_cc_ch_2_val_0.remove_value_listener(self.midi_cc_ch_2_val_0_mode3_listener)
		self.midi_cc_ch_3_val_0.remove_value_listener(self.midi_cc_ch_3_val_0_mode3_listener)
		self.midi_cc_ch_4_val_0.remove_value_listener(self.midi_cc_ch_4_val_0_mode3_listener)
		self.midi_cc_ch_5_val_0.remove_value_listener(self.midi_cc_ch_5_val_0_mode3_listener)
		self.midi_cc_ch_6_val_0.remove_value_listener(self.midi_cc_ch_6_val_0_mode3_listener)
		self.midi_cc_ch_7_val_0.remove_value_listener(self.midi_cc_ch_7_val_0_mode3_listener)
		self.midi_note_ch_0_val_4.remove_value_listener(self.midi_note_ch_0_val_4_mode3_listener)
		self.midi_note_ch_0_val_1.remove_value_listener(self.midi_note_ch_0_val_1_mode3_listener)
		self.midi_note_ch_0_val_0.remove_value_listener(self.midi_note_ch_0_val_0_mode3_listener)
		self.midi_note_ch_0_val_5.remove_value_listener(self.midi_note_ch_0_val_5_mode3_listener)
		self.midi_note_ch_0_val_2.remove_value_listener(self.midi_note_ch_0_val_2_mode3_listener)
		self.midi_note_ch_0_val_6.remove_value_listener(self.midi_note_ch_0_val_6_mode3_listener)
		self.midi_note_ch_0_val_3.remove_value_listener(self.midi_note_ch_0_val_3_mode3_listener)
		self.midi_note_ch_0_val_7.remove_value_listener(self.midi_note_ch_0_val_7_mode3_listener)
		self.midi_note_ch_0_val_92.remove_value_listener(self.midi_note_ch_0_val_92_mode3_listener)
		self.midi_note_ch_0_val_46.remove_value_listener(self.midi_note_ch_0_val_46_mode3_listener)
		self.midi_note_ch_0_val_47.remove_value_listener(self.midi_note_ch_0_val_47_mode3_listener)
		self.midi_cc_ch_0_val_23.remove_value_listener(self.midi_cc_ch_0_val_23_mode3_listener)
		self.midi_cc_ch_0_val_22.remove_value_listener(self.midi_cc_ch_0_val_22_mode3_listener)
		self.midi_cc_ch_0_val_21.remove_value_listener(self.midi_cc_ch_0_val_21_mode3_listener)
		self.midi_cc_ch_0_val_20.remove_value_listener(self.midi_cc_ch_0_val_20_mode3_listener)
		self.midi_cc_ch_0_val_19.remove_value_listener(self.midi_cc_ch_0_val_19_mode3_listener)
		self.midi_cc_ch_0_val_18.remove_value_listener(self.midi_cc_ch_0_val_18_mode3_listener)
		self.midi_cc_ch_0_val_17.remove_value_listener(self.midi_cc_ch_0_val_17_mode3_listener)
		self.midi_cc_ch_0_val_16.remove_value_listener(self.midi_cc_ch_0_val_16_mode3_listener)
		self.midi_note_ch_0_val_16.remove_value_listener(self.midi_note_ch_0_val_16_mode3_listener)
		self.midi_note_ch_0_val_8.remove_value_listener(self.midi_note_ch_0_val_8_mode3_listener)
		self.midi_note_ch_0_val_17.remove_value_listener(self.midi_note_ch_0_val_17_mode3_listener)
		self.midi_note_ch_0_val_9.remove_value_listener(self.midi_note_ch_0_val_9_mode3_listener)
		self.midi_note_ch_0_val_18.remove_value_listener(self.midi_note_ch_0_val_18_mode3_listener)
		self.midi_note_ch_0_val_10.remove_value_listener(self.midi_note_ch_0_val_10_mode3_listener)
		self.midi_note_ch_0_val_19.remove_value_listener(self.midi_note_ch_0_val_19_mode3_listener)
		self.midi_note_ch_0_val_11.remove_value_listener(self.midi_note_ch_0_val_11_mode3_listener)
		self.midi_note_ch_0_val_20.remove_value_listener(self.midi_note_ch_0_val_20_mode3_listener)
		self.midi_note_ch_0_val_12.remove_value_listener(self.midi_note_ch_0_val_12_mode3_listener)
		self.midi_note_ch_0_val_21.remove_value_listener(self.midi_note_ch_0_val_21_mode3_listener)
		self.midi_note_ch_0_val_13.remove_value_listener(self.midi_note_ch_0_val_13_mode3_listener)
		self.midi_note_ch_0_val_22.remove_value_listener(self.midi_note_ch_0_val_22_mode3_listener)
		self.midi_note_ch_0_val_14.remove_value_listener(self.midi_note_ch_0_val_14_mode3_listener)
		self.midi_note_ch_0_val_23.remove_value_listener(self.midi_note_ch_0_val_23_mode3_listener)
		self.midi_note_ch_0_val_15.remove_value_listener(self.midi_note_ch_0_val_15_mode3_listener)
		self.midi_note_ch_0_val_94.remove_value_listener(self.midi_note_ch_0_val_94_mode3_listener)
		self.midi_note_ch_0_val_93.remove_value_listener(self.midi_note_ch_0_val_93_mode3_listener)
		self.midi_note_ch_0_val_91.remove_value_listener(self.midi_note_ch_0_val_91_mode3_listener)
		self.midi_note_ch_0_val_98.remove_value_listener(self.midi_note_ch_0_val_98_mode3_listener)
		self.midi_note_ch_0_val_99.remove_value_listener(self.midi_note_ch_0_val_99_mode3_listener)
		self._remove_mode3_led_listeners()
	def _remove_mode4(self):
		self.show_message("Mode 4 is removed")
		self.turn_inputs_off()
		combination_mode = "off"
		self.remove_session_box(combination_mode)
		self.midi_note_ch_0_val_95.remove_value_listener(self.midi_note_ch_0_val_95_mode4_listener)
		self.midi_note_ch_0_val_97.remove_value_listener(self.midi_note_ch_0_val_97_mode4_listener)
		self.midi_note_ch_0_val_96.remove_value_listener(self.midi_note_ch_0_val_96_mode4_listener)
		self.midi_cc_ch_0_val_0.remove_value_listener(self.midi_cc_ch_0_val_0_mode4_listener)
		self.midi_cc_ch_1_val_0.remove_value_listener(self.midi_cc_ch_1_val_0_mode4_listener)
		self.midi_cc_ch_2_val_0.remove_value_listener(self.midi_cc_ch_2_val_0_mode4_listener)
		self.midi_cc_ch_3_val_0.remove_value_listener(self.midi_cc_ch_3_val_0_mode4_listener)
		self.midi_cc_ch_4_val_0.remove_value_listener(self.midi_cc_ch_4_val_0_mode4_listener)
		self.midi_cc_ch_5_val_0.remove_value_listener(self.midi_cc_ch_5_val_0_mode4_listener)
		self.midi_cc_ch_6_val_0.remove_value_listener(self.midi_cc_ch_6_val_0_mode4_listener)
		self.midi_cc_ch_7_val_0.remove_value_listener(self.midi_cc_ch_7_val_0_mode4_listener)
		self.midi_note_ch_0_val_4.remove_value_listener(self.midi_note_ch_0_val_4_mode4_listener)
		self.midi_note_ch_0_val_1.remove_value_listener(self.midi_note_ch_0_val_1_mode4_listener)
		self.midi_note_ch_0_val_0.remove_value_listener(self.midi_note_ch_0_val_0_mode4_listener)
		self.midi_note_ch_0_val_5.remove_value_listener(self.midi_note_ch_0_val_5_mode4_listener)
		self.midi_note_ch_0_val_2.remove_value_listener(self.midi_note_ch_0_val_2_mode4_listener)
		self.midi_note_ch_0_val_6.remove_value_listener(self.midi_note_ch_0_val_6_mode4_listener)
		self.midi_note_ch_0_val_3.remove_value_listener(self.midi_note_ch_0_val_3_mode4_listener)
		self.midi_note_ch_0_val_7.remove_value_listener(self.midi_note_ch_0_val_7_mode4_listener)
		self.midi_note_ch_0_val_92.remove_value_listener(self.midi_note_ch_0_val_92_mode4_listener)
		self.midi_note_ch_0_val_46.remove_value_listener(self.midi_note_ch_0_val_46_mode4_listener)
		self.midi_note_ch_0_val_47.remove_value_listener(self.midi_note_ch_0_val_47_mode4_listener)
		self.midi_cc_ch_0_val_23.remove_value_listener(self.midi_cc_ch_0_val_23_mode4_listener)
		self.midi_cc_ch_0_val_22.remove_value_listener(self.midi_cc_ch_0_val_22_mode4_listener)
		self.midi_cc_ch_0_val_21.remove_value_listener(self.midi_cc_ch_0_val_21_mode4_listener)
		self.midi_cc_ch_0_val_20.remove_value_listener(self.midi_cc_ch_0_val_20_mode4_listener)
		self.midi_cc_ch_0_val_19.remove_value_listener(self.midi_cc_ch_0_val_19_mode4_listener)
		self.midi_cc_ch_0_val_18.remove_value_listener(self.midi_cc_ch_0_val_18_mode4_listener)
		self.midi_cc_ch_0_val_17.remove_value_listener(self.midi_cc_ch_0_val_17_mode4_listener)
		self.midi_cc_ch_0_val_16.remove_value_listener(self.midi_cc_ch_0_val_16_mode4_listener)
		self.midi_note_ch_0_val_16.remove_value_listener(self.midi_note_ch_0_val_16_mode4_listener)
		self.midi_note_ch_0_val_8.remove_value_listener(self.midi_note_ch_0_val_8_mode4_listener)
		self.midi_note_ch_0_val_17.remove_value_listener(self.midi_note_ch_0_val_17_mode4_listener)
		self.midi_note_ch_0_val_9.remove_value_listener(self.midi_note_ch_0_val_9_mode4_listener)
		self.midi_note_ch_0_val_18.remove_value_listener(self.midi_note_ch_0_val_18_mode4_listener)
		self.midi_note_ch_0_val_10.remove_value_listener(self.midi_note_ch_0_val_10_mode4_listener)
		self.midi_note_ch_0_val_19.remove_value_listener(self.midi_note_ch_0_val_19_mode4_listener)
		self.midi_note_ch_0_val_11.remove_value_listener(self.midi_note_ch_0_val_11_mode4_listener)
		self.midi_note_ch_0_val_20.remove_value_listener(self.midi_note_ch_0_val_20_mode4_listener)
		self.midi_note_ch_0_val_12.remove_value_listener(self.midi_note_ch_0_val_12_mode4_listener)
		self.midi_note_ch_0_val_21.remove_value_listener(self.midi_note_ch_0_val_21_mode4_listener)
		self.midi_note_ch_0_val_13.remove_value_listener(self.midi_note_ch_0_val_13_mode4_listener)
		self.midi_note_ch_0_val_22.remove_value_listener(self.midi_note_ch_0_val_22_mode4_listener)
		self.midi_note_ch_0_val_14.remove_value_listener(self.midi_note_ch_0_val_14_mode4_listener)
		self.midi_note_ch_0_val_23.remove_value_listener(self.midi_note_ch_0_val_23_mode4_listener)
		self.midi_note_ch_0_val_15.remove_value_listener(self.midi_note_ch_0_val_15_mode4_listener)
		self.midi_note_ch_0_val_94.remove_value_listener(self.midi_note_ch_0_val_94_mode4_listener)
		self.midi_note_ch_0_val_93.remove_value_listener(self.midi_note_ch_0_val_93_mode4_listener)
		self.midi_note_ch_0_val_91.remove_value_listener(self.midi_note_ch_0_val_91_mode4_listener)
		self.midi_note_ch_0_val_98.remove_value_listener(self.midi_note_ch_0_val_98_mode4_listener)
		self.midi_note_ch_0_val_99.remove_value_listener(self.midi_note_ch_0_val_99_mode4_listener)
		self._remove_mode4_led_listeners()
	def _remove_mode49(self):
		self.show_message("Mode 49 is removed")
		self.turn_inputs_off()
		combination_mode = "off"
		self.remove_session_box(combination_mode)
		self.midi_note_ch_0_val_95.remove_value_listener(self.midi_note_ch_0_val_95_mode49_listener)
		self.midi_note_ch_0_val_97.remove_value_listener(self.midi_note_ch_0_val_97_mode49_listener)
		self.midi_note_ch_0_val_96.remove_value_listener(self.midi_note_ch_0_val_96_mode49_listener)
		self.midi_cc_ch_0_val_0.remove_value_listener(self.midi_cc_ch_0_val_0_mode49_listener)
		self.midi_cc_ch_1_val_0.remove_value_listener(self.midi_cc_ch_1_val_0_mode49_listener)
		self.midi_cc_ch_2_val_0.remove_value_listener(self.midi_cc_ch_2_val_0_mode49_listener)
		self.midi_cc_ch_3_val_0.remove_value_listener(self.midi_cc_ch_3_val_0_mode49_listener)
		self.midi_cc_ch_4_val_0.remove_value_listener(self.midi_cc_ch_4_val_0_mode49_listener)
		self.midi_cc_ch_5_val_0.remove_value_listener(self.midi_cc_ch_5_val_0_mode49_listener)
		self.midi_cc_ch_6_val_0.remove_value_listener(self.midi_cc_ch_6_val_0_mode49_listener)
		self.midi_cc_ch_7_val_0.remove_value_listener(self.midi_cc_ch_7_val_0_mode49_listener)
		self.midi_note_ch_0_val_4.remove_value_listener(self.midi_note_ch_0_val_4_mode49_listener)
		self.midi_note_ch_0_val_1.remove_value_listener(self.midi_note_ch_0_val_1_mode49_listener)
		self.midi_note_ch_0_val_0.remove_value_listener(self.midi_note_ch_0_val_0_mode49_listener)
		self.midi_note_ch_0_val_5.remove_value_listener(self.midi_note_ch_0_val_5_mode49_listener)
		self.midi_note_ch_0_val_2.remove_value_listener(self.midi_note_ch_0_val_2_mode49_listener)
		self.midi_note_ch_0_val_6.remove_value_listener(self.midi_note_ch_0_val_6_mode49_listener)
		self.midi_note_ch_0_val_3.remove_value_listener(self.midi_note_ch_0_val_3_mode49_listener)
		self.midi_note_ch_0_val_7.remove_value_listener(self.midi_note_ch_0_val_7_mode49_listener)
		self.midi_note_ch_0_val_92.remove_value_listener(self.midi_note_ch_0_val_92_mode49_listener)
		self.midi_note_ch_0_val_46.remove_value_listener(self.midi_note_ch_0_val_46_mode49_listener)
		self.midi_note_ch_0_val_47.remove_value_listener(self.midi_note_ch_0_val_47_mode49_listener)
		self.midi_note_ch_0_val_16.remove_value_listener(self.midi_note_ch_0_val_16_mode49_listener)
		self.midi_note_ch_0_val_8.remove_value_listener(self.midi_note_ch_0_val_8_mode49_listener)
		self.midi_note_ch_0_val_17.remove_value_listener(self.midi_note_ch_0_val_17_mode49_listener)
		self.midi_note_ch_0_val_9.remove_value_listener(self.midi_note_ch_0_val_9_mode49_listener)
		self.midi_note_ch_0_val_18.remove_value_listener(self.midi_note_ch_0_val_18_mode49_listener)
		self.midi_note_ch_0_val_10.remove_value_listener(self.midi_note_ch_0_val_10_mode49_listener)
		self.midi_note_ch_0_val_19.remove_value_listener(self.midi_note_ch_0_val_19_mode49_listener)
		self.midi_note_ch_0_val_11.remove_value_listener(self.midi_note_ch_0_val_11_mode49_listener)
		self.midi_note_ch_0_val_20.remove_value_listener(self.midi_note_ch_0_val_20_mode49_listener)
		self.midi_note_ch_0_val_12.remove_value_listener(self.midi_note_ch_0_val_12_mode49_listener)
		self.midi_note_ch_0_val_21.remove_value_listener(self.midi_note_ch_0_val_21_mode49_listener)
		self.midi_note_ch_0_val_13.remove_value_listener(self.midi_note_ch_0_val_13_mode49_listener)
		self.midi_note_ch_0_val_22.remove_value_listener(self.midi_note_ch_0_val_22_mode49_listener)
		self.midi_note_ch_0_val_14.remove_value_listener(self.midi_note_ch_0_val_14_mode49_listener)
		self.midi_note_ch_0_val_23.remove_value_listener(self.midi_note_ch_0_val_23_mode49_listener)
		self.midi_note_ch_0_val_15.remove_value_listener(self.midi_note_ch_0_val_15_mode49_listener)
		self.midi_note_ch_0_val_94.remove_value_listener(self.midi_note_ch_0_val_94_mode49_listener)
		self.midi_note_ch_0_val_93.remove_value_listener(self.midi_note_ch_0_val_93_mode49_listener)
		self.midi_note_ch_0_val_91.remove_value_listener(self.midi_note_ch_0_val_91_mode49_listener)
		self.midi_note_ch_0_val_98.remove_value_listener(self.midi_note_ch_0_val_98_mode49_listener)
		self.midi_note_ch_0_val_99.remove_value_listener(self.midi_note_ch_0_val_99_mode49_listener)
		self.midi_cc_ch_0_val_16.remove_value_listener(self.midi_cc_ch_0_val_16_mode49_listener)
		self.midi_cc_ch_0_val_17.remove_value_listener(self.midi_cc_ch_0_val_17_mode49_listener)
		self.midi_cc_ch_0_val_18.remove_value_listener(self.midi_cc_ch_0_val_18_mode49_listener)
		self.midi_cc_ch_0_val_19.remove_value_listener(self.midi_cc_ch_0_val_19_mode49_listener)
		self.midi_cc_ch_0_val_20.remove_value_listener(self.midi_cc_ch_0_val_20_mode49_listener)
		self.midi_cc_ch_0_val_21.remove_value_listener(self.midi_cc_ch_0_val_21_mode49_listener)
		self.midi_cc_ch_0_val_22.remove_value_listener(self.midi_cc_ch_0_val_22_mode49_listener)
		self.midi_cc_ch_0_val_23.remove_value_listener(self.midi_cc_ch_0_val_23_mode49_listener)
		self._remove_mode49_led_listeners()
	def midi_note_ch_0_val_14_mode1_listener(self, value):
		self.midi_note_ch_0_val_14.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().view.highlighted_clip_slot.clip.loop_start = self.song().view.highlighted_clip_slot.clip.loop_start - 2.0
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'double' (from 'Button 32 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_14, "pre_val"):
			self.midi_note_ch_0_val_14.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_14, "prev_press_time"):
			self.midi_note_ch_0_val_14.prev_press_time = time.time()
		self.midi_note_ch_0_val_14.pre_val = value
		self.midi_note_ch_0_val_14.prev_press_time = time.time()
	def midi_note_ch_0_val_15_mode1_listener(self, value):
		self.midi_note_ch_0_val_15.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_15, "pre_val"):
			self.midi_note_ch_0_val_15.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_15, "prev_press_time"):
			self.midi_note_ch_0_val_15.prev_press_time = time.time()
		self.pick_brain(self.new_session_record_mapping_id_353)
		self.midi_note_ch_0_val_15.pre_val = value
		self.midi_note_ch_0_val_15.prev_press_time = time.time()
	def midi_note_ch_0_val_13_mode1_listener(self, value):
		self.midi_note_ch_0_val_13.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_13, "pre_val"):
			self.midi_note_ch_0_val_13.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_13, "prev_press_time"):
			self.midi_note_ch_0_val_13.prev_press_time = time.time()
		self.pick_brain(self.change_drum1_id_351)
		self.pick_brain(self.change_drum1_copy_352_id_352)
		self.midi_note_ch_0_val_13.pre_val = value
		self.midi_note_ch_0_val_13.prev_press_time = time.time()
	def midi_note_ch_0_val_8_mode1_listener(self, value):
		self.midi_note_ch_0_val_8.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().view.highlighted_clip_slot.clip.loop_start = self.song().view.highlighted_clip_slot.clip.loop_start - 0.5
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'move' (from 'Button 19 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().view.highlighted_clip_slot.clip.loop_end = self.song().view.highlighted_clip_slot.clip.loop_end - 0.5
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 2' in reaction 'move' (from 'Button 19 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_8, "pre_val"):
			self.midi_note_ch_0_val_8.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_8, "prev_press_time"):
			self.midi_note_ch_0_val_8.prev_press_time = time.time()
		self.midi_note_ch_0_val_8.pre_val = value
		self.midi_note_ch_0_val_8.prev_press_time = time.time()
	def midi_note_ch_0_val_10_mode1_listener(self, value):
		self.midi_note_ch_0_val_10.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_10, "pre_val"):
			self.midi_note_ch_0_val_10.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_10, "prev_press_time"):
			self.midi_note_ch_0_val_10.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_id_348)
		self.midi_note_ch_0_val_10.pre_val = value
		self.midi_note_ch_0_val_10.prev_press_time = time.time()
	def midi_note_ch_0_val_11_mode1_listener(self, value):
		self.midi_note_ch_0_val_11.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_11, "pre_val"):
			self.midi_note_ch_0_val_11.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_11, "prev_press_time"):
			self.midi_note_ch_0_val_11.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_349_id_349)
		self.midi_note_ch_0_val_11.pre_val = value
		self.midi_note_ch_0_val_11.prev_press_time = time.time()
	def midi_note_ch_0_val_9_mode1_listener(self, value):
		self.midi_note_ch_0_val_9.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().view.highlighted_clip_slot.delete_clip()
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'del clip' (from 'Button 43 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_9, "pre_val"):
			self.midi_note_ch_0_val_9.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_9, "prev_press_time"):
			self.midi_note_ch_0_val_9.prev_press_time = time.time()
		self.midi_note_ch_0_val_9.pre_val = value
		self.midi_note_ch_0_val_9.prev_press_time = time.time()
	def midi_note_ch_0_val_12_mode1_listener(self, value):
		self.midi_note_ch_0_val_12.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_12, "pre_val"):
			self.midi_note_ch_0_val_12.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_12, "prev_press_time"):
			self.midi_note_ch_0_val_12.prev_press_time = time.time()
		self.pick_brain(self.new_redo_mapping_id_346)
		self.midi_note_ch_0_val_12.pre_val = value
		self.midi_note_ch_0_val_12.prev_press_time = time.time()
	def midi_note_ch_0_val_95_mode1_listener(self, value):
		self.midi_note_ch_0_val_95.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().capture_midi(0)
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'rec' (from 'Button 52 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_95, "pre_val"):
			self.midi_note_ch_0_val_95.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_95, "prev_press_time"):
			self.midi_note_ch_0_val_95.prev_press_time = time.time()
		self.midi_note_ch_0_val_95.pre_val = value
		self.midi_note_ch_0_val_95.prev_press_time = time.time()
	def midi_note_ch_0_val_95_mode3_listener(self, value):
		self.midi_note_ch_0_val_95.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().capture_midi(0)
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'rec copy 340' (from 'Button 52 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_95, "pre_val"):
			self.midi_note_ch_0_val_95.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_95, "prev_press_time"):
			self.midi_note_ch_0_val_95.prev_press_time = time.time()
		self.midi_note_ch_0_val_95.pre_val = value
		self.midi_note_ch_0_val_95.prev_press_time = time.time()
	def midi_note_ch_0_val_95_mode4_listener(self, value):
		self.midi_note_ch_0_val_95.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().capture_midi(0)
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'rec copy 339' (from 'Button 52 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_95, "pre_val"):
			self.midi_note_ch_0_val_95.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_95, "prev_press_time"):
			self.midi_note_ch_0_val_95.prev_press_time = time.time()
		self.midi_note_ch_0_val_95.pre_val = value
		self.midi_note_ch_0_val_95.prev_press_time = time.time()
	def midi_note_ch_0_val_95_mode49_listener(self, value):
		self.midi_note_ch_0_val_95.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().capture_midi(0)
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'rec copy 339 copy 341' (from 'Button 52 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_95, "pre_val"):
			self.midi_note_ch_0_val_95.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_95, "prev_press_time"):
			self.midi_note_ch_0_val_95.prev_press_time = time.time()
		self.midi_note_ch_0_val_95.pre_val = value
		self.midi_note_ch_0_val_95.prev_press_time = time.time()
	def midi_note_ch_0_val_97_mode1_listener(self, value):
		self.midi_note_ch_0_val_97.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().tempo = self.song().tempo + 0.25
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'bpm+' (from 'Button 55 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_97, "pre_val"):
			self.midi_note_ch_0_val_97.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_97, "prev_press_time"):
			self.midi_note_ch_0_val_97.prev_press_time = time.time()
		self.midi_note_ch_0_val_97.pre_val = value
		self.midi_note_ch_0_val_97.prev_press_time = time.time()
	def midi_note_ch_0_val_96_mode1_listener(self, value):
		self.midi_note_ch_0_val_96.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().tempo = self.song().tempo - 0.25
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'bpm-' (from 'Button 54 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_96, "pre_val"):
			self.midi_note_ch_0_val_96.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_96, "prev_press_time"):
			self.midi_note_ch_0_val_96.prev_press_time = time.time()
		self.midi_note_ch_0_val_96.pre_val = value
		self.midi_note_ch_0_val_96.prev_press_time = time.time()
	def midi_note_ch_0_val_97_mode4_listener(self, value):
		self.midi_note_ch_0_val_97.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().tempo = self.song().tempo + 0.25
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'New Reaction_v2 mapping  copy 336' (from 'Button 55 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_97, "pre_val"):
			self.midi_note_ch_0_val_97.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_97, "prev_press_time"):
			self.midi_note_ch_0_val_97.prev_press_time = time.time()
		self.midi_note_ch_0_val_97.pre_val = value
		self.midi_note_ch_0_val_97.prev_press_time = time.time()
	def midi_note_ch_0_val_96_mode4_listener(self, value):
		self.midi_note_ch_0_val_96.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().tempo = self.song().tempo - 0.25
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'New Reaction_v2 mapping  copy 336 copy 343' (from 'Button 54 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_96, "pre_val"):
			self.midi_note_ch_0_val_96.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_96, "prev_press_time"):
			self.midi_note_ch_0_val_96.prev_press_time = time.time()
		self.midi_note_ch_0_val_96.pre_val = value
		self.midi_note_ch_0_val_96.prev_press_time = time.time()
	def midi_note_ch_0_val_97_mode3_listener(self, value):
		self.midi_note_ch_0_val_97.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().tempo = self.song().tempo + 0.25
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'New Reaction_v2 mapping  copy 335' (from 'Button 55 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_97, "pre_val"):
			self.midi_note_ch_0_val_97.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_97, "prev_press_time"):
			self.midi_note_ch_0_val_97.prev_press_time = time.time()
		self.midi_note_ch_0_val_97.pre_val = value
		self.midi_note_ch_0_val_97.prev_press_time = time.time()
	def midi_note_ch_0_val_96_mode3_listener(self, value):
		self.midi_note_ch_0_val_96.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().tempo = self.song().tempo - 0.25
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'New Reaction_v2 mapping  copy 335 copy 344' (from 'Button 54 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_96, "pre_val"):
			self.midi_note_ch_0_val_96.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_96, "prev_press_time"):
			self.midi_note_ch_0_val_96.prev_press_time = time.time()
		self.midi_note_ch_0_val_96.pre_val = value
		self.midi_note_ch_0_val_96.prev_press_time = time.time()
	def midi_note_ch_0_val_97_mode49_listener(self, value):
		self.midi_note_ch_0_val_97.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().tempo = self.song().tempo + 0.25
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'New Reaction_v2 mapping  copy 335 copy 337' (from 'Button 55 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_97, "pre_val"):
			self.midi_note_ch_0_val_97.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_97, "prev_press_time"):
			self.midi_note_ch_0_val_97.prev_press_time = time.time()
		self.midi_note_ch_0_val_97.pre_val = value
		self.midi_note_ch_0_val_97.prev_press_time = time.time()
	def midi_note_ch_0_val_96_mode49_listener(self, value):
		self.midi_note_ch_0_val_96.cur_val = value 
		try:
			reaction_listener_number = 1
			loop_is_active = False
			loop_number = 0
			loop_result_count = 0
			self.song().tempo = self.song().tempo - 0.25
		except Exception as e:
			self.log_message("csslog:(ableton4TB) There's a problem with 'Action Block 1' in reaction 'New Reaction_v2 mapping  copy 335 copy 337 copy 345' (from 'Button 54 was pressed' listener) >> ")
			self.log_message("csslog: >> " + str(e) )
		if not hasattr(self.midi_note_ch_0_val_96, "pre_val"):
			self.midi_note_ch_0_val_96.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_96, "prev_press_time"):
			self.midi_note_ch_0_val_96.prev_press_time = time.time()
		self.midi_note_ch_0_val_96.pre_val = value
		self.midi_note_ch_0_val_96.prev_press_time = time.time()
	def midi_cc_ch_0_val_0_mode1_listener(self, value):
		self.midi_cc_ch_0_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_0, "pre_val"):
			self.midi_cc_ch_0_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_0, "prev_press_time"):
			self.midi_cc_ch_0_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_id_296)
		self.midi_cc_ch_0_val_0.pre_val = value
		self.midi_cc_ch_0_val_0.prev_press_time = time.time()
	def midi_cc_ch_0_val_0_mode3_listener(self, value):
		self.midi_cc_ch_0_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_0, "pre_val"):
			self.midi_cc_ch_0_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_0, "prev_press_time"):
			self.midi_cc_ch_0_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_320_id_320)
		self.midi_cc_ch_0_val_0.pre_val = value
		self.midi_cc_ch_0_val_0.prev_press_time = time.time()
	def midi_cc_ch_0_val_0_mode4_listener(self, value):
		self.midi_cc_ch_0_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_0, "pre_val"):
			self.midi_cc_ch_0_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_0, "prev_press_time"):
			self.midi_cc_ch_0_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_312_id_312)
		self.midi_cc_ch_0_val_0.pre_val = value
		self.midi_cc_ch_0_val_0.prev_press_time = time.time()
	def midi_cc_ch_0_val_0_mode49_listener(self, value):
		self.midi_cc_ch_0_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_0, "pre_val"):
			self.midi_cc_ch_0_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_0, "prev_press_time"):
			self.midi_cc_ch_0_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_304_id_304)
		self.midi_cc_ch_0_val_0.pre_val = value
		self.midi_cc_ch_0_val_0.prev_press_time = time.time()
	def midi_cc_ch_1_val_0_mode1_listener(self, value):
		self.midi_cc_ch_1_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_1_val_0, "pre_val"):
			self.midi_cc_ch_1_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_1_val_0, "prev_press_time"):
			self.midi_cc_ch_1_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_300_id_300)
		self.midi_cc_ch_1_val_0.pre_val = value
		self.midi_cc_ch_1_val_0.prev_press_time = time.time()
	def midi_cc_ch_1_val_0_mode3_listener(self, value):
		self.midi_cc_ch_1_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_1_val_0, "pre_val"):
			self.midi_cc_ch_1_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_1_val_0, "prev_press_time"):
			self.midi_cc_ch_1_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_300_copy_321_id_321)
		self.midi_cc_ch_1_val_0.pre_val = value
		self.midi_cc_ch_1_val_0.prev_press_time = time.time()
	def midi_cc_ch_1_val_0_mode4_listener(self, value):
		self.midi_cc_ch_1_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_1_val_0, "pre_val"):
			self.midi_cc_ch_1_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_1_val_0, "prev_press_time"):
			self.midi_cc_ch_1_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_300_copy_313_id_313)
		self.midi_cc_ch_1_val_0.pre_val = value
		self.midi_cc_ch_1_val_0.prev_press_time = time.time()
	def midi_cc_ch_1_val_0_mode49_listener(self, value):
		self.midi_cc_ch_1_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_1_val_0, "pre_val"):
			self.midi_cc_ch_1_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_1_val_0, "prev_press_time"):
			self.midi_cc_ch_1_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_300_copy_305_id_305)
		self.midi_cc_ch_1_val_0.pre_val = value
		self.midi_cc_ch_1_val_0.prev_press_time = time.time()
	def midi_cc_ch_2_val_0_mode1_listener(self, value):
		self.midi_cc_ch_2_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_2_val_0, "pre_val"):
			self.midi_cc_ch_2_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_2_val_0, "prev_press_time"):
			self.midi_cc_ch_2_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_298_id_298)
		self.midi_cc_ch_2_val_0.pre_val = value
		self.midi_cc_ch_2_val_0.prev_press_time = time.time()
	def midi_cc_ch_2_val_0_mode3_listener(self, value):
		self.midi_cc_ch_2_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_2_val_0, "pre_val"):
			self.midi_cc_ch_2_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_2_val_0, "prev_press_time"):
			self.midi_cc_ch_2_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_298_copy_322_id_322)
		self.midi_cc_ch_2_val_0.pre_val = value
		self.midi_cc_ch_2_val_0.prev_press_time = time.time()
	def midi_cc_ch_2_val_0_mode4_listener(self, value):
		self.midi_cc_ch_2_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_2_val_0, "pre_val"):
			self.midi_cc_ch_2_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_2_val_0, "prev_press_time"):
			self.midi_cc_ch_2_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_298_copy_314_id_314)
		self.midi_cc_ch_2_val_0.pre_val = value
		self.midi_cc_ch_2_val_0.prev_press_time = time.time()
	def midi_cc_ch_2_val_0_mode49_listener(self, value):
		self.midi_cc_ch_2_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_2_val_0, "pre_val"):
			self.midi_cc_ch_2_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_2_val_0, "prev_press_time"):
			self.midi_cc_ch_2_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_298_copy_306_id_306)
		self.midi_cc_ch_2_val_0.pre_val = value
		self.midi_cc_ch_2_val_0.prev_press_time = time.time()
	def midi_cc_ch_3_val_0_mode1_listener(self, value):
		self.midi_cc_ch_3_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_3_val_0, "pre_val"):
			self.midi_cc_ch_3_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_3_val_0, "prev_press_time"):
			self.midi_cc_ch_3_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_298_copy_302_id_302)
		self.midi_cc_ch_3_val_0.pre_val = value
		self.midi_cc_ch_3_val_0.prev_press_time = time.time()
	def midi_cc_ch_3_val_0_mode3_listener(self, value):
		self.midi_cc_ch_3_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_3_val_0, "pre_val"):
			self.midi_cc_ch_3_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_3_val_0, "prev_press_time"):
			self.midi_cc_ch_3_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323)
		self.midi_cc_ch_3_val_0.pre_val = value
		self.midi_cc_ch_3_val_0.prev_press_time = time.time()
	def midi_cc_ch_3_val_0_mode4_listener(self, value):
		self.midi_cc_ch_3_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_3_val_0, "pre_val"):
			self.midi_cc_ch_3_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_3_val_0, "prev_press_time"):
			self.midi_cc_ch_3_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315)
		self.midi_cc_ch_3_val_0.pre_val = value
		self.midi_cc_ch_3_val_0.prev_press_time = time.time()
	def midi_cc_ch_3_val_0_mode49_listener(self, value):
		self.midi_cc_ch_3_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_3_val_0, "pre_val"):
			self.midi_cc_ch_3_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_3_val_0, "prev_press_time"):
			self.midi_cc_ch_3_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307)
		self.midi_cc_ch_3_val_0.pre_val = value
		self.midi_cc_ch_3_val_0.prev_press_time = time.time()
	def midi_cc_ch_4_val_0_mode1_listener(self, value):
		self.midi_cc_ch_4_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_4_val_0, "pre_val"):
			self.midi_cc_ch_4_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_4_val_0, "prev_press_time"):
			self.midi_cc_ch_4_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_id_297)
		self.midi_cc_ch_4_val_0.pre_val = value
		self.midi_cc_ch_4_val_0.prev_press_time = time.time()
	def midi_cc_ch_4_val_0_mode3_listener(self, value):
		self.midi_cc_ch_4_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_4_val_0, "pre_val"):
			self.midi_cc_ch_4_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_4_val_0, "prev_press_time"):
			self.midi_cc_ch_4_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_324_id_324)
		self.midi_cc_ch_4_val_0.pre_val = value
		self.midi_cc_ch_4_val_0.prev_press_time = time.time()
	def midi_cc_ch_4_val_0_mode4_listener(self, value):
		self.midi_cc_ch_4_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_4_val_0, "pre_val"):
			self.midi_cc_ch_4_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_4_val_0, "prev_press_time"):
			self.midi_cc_ch_4_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_316_id_316)
		self.midi_cc_ch_4_val_0.pre_val = value
		self.midi_cc_ch_4_val_0.prev_press_time = time.time()
	def midi_cc_ch_4_val_0_mode49_listener(self, value):
		self.midi_cc_ch_4_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_4_val_0, "pre_val"):
			self.midi_cc_ch_4_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_4_val_0, "prev_press_time"):
			self.midi_cc_ch_4_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_308_id_308)
		self.midi_cc_ch_4_val_0.pre_val = value
		self.midi_cc_ch_4_val_0.prev_press_time = time.time()
	def midi_cc_ch_5_val_0_mode1_listener(self, value):
		self.midi_cc_ch_5_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_5_val_0, "pre_val"):
			self.midi_cc_ch_5_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_5_val_0, "prev_press_time"):
			self.midi_cc_ch_5_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_301_id_301)
		self.midi_cc_ch_5_val_0.pre_val = value
		self.midi_cc_ch_5_val_0.prev_press_time = time.time()
	def midi_cc_ch_5_val_0_mode3_listener(self, value):
		self.midi_cc_ch_5_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_5_val_0, "pre_val"):
			self.midi_cc_ch_5_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_5_val_0, "prev_press_time"):
			self.midi_cc_ch_5_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325)
		self.midi_cc_ch_5_val_0.pre_val = value
		self.midi_cc_ch_5_val_0.prev_press_time = time.time()
	def midi_cc_ch_5_val_0_mode4_listener(self, value):
		self.midi_cc_ch_5_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_5_val_0, "pre_val"):
			self.midi_cc_ch_5_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_5_val_0, "prev_press_time"):
			self.midi_cc_ch_5_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317)
		self.midi_cc_ch_5_val_0.pre_val = value
		self.midi_cc_ch_5_val_0.prev_press_time = time.time()
	def midi_cc_ch_5_val_0_mode49_listener(self, value):
		self.midi_cc_ch_5_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_5_val_0, "pre_val"):
			self.midi_cc_ch_5_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_5_val_0, "prev_press_time"):
			self.midi_cc_ch_5_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309)
		self.midi_cc_ch_5_val_0.pre_val = value
		self.midi_cc_ch_5_val_0.prev_press_time = time.time()
	def midi_cc_ch_6_val_0_mode1_listener(self, value):
		self.midi_cc_ch_6_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_6_val_0, "pre_val"):
			self.midi_cc_ch_6_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_6_val_0, "prev_press_time"):
			self.midi_cc_ch_6_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_299_id_299)
		self.midi_cc_ch_6_val_0.pre_val = value
		self.midi_cc_ch_6_val_0.prev_press_time = time.time()
	def midi_cc_ch_6_val_0_mode3_listener(self, value):
		self.midi_cc_ch_6_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_6_val_0, "pre_val"):
			self.midi_cc_ch_6_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_6_val_0, "prev_press_time"):
			self.midi_cc_ch_6_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326)
		self.midi_cc_ch_6_val_0.pre_val = value
		self.midi_cc_ch_6_val_0.prev_press_time = time.time()
	def midi_cc_ch_6_val_0_mode4_listener(self, value):
		self.midi_cc_ch_6_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_6_val_0, "pre_val"):
			self.midi_cc_ch_6_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_6_val_0, "prev_press_time"):
			self.midi_cc_ch_6_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318)
		self.midi_cc_ch_6_val_0.pre_val = value
		self.midi_cc_ch_6_val_0.prev_press_time = time.time()
	def midi_cc_ch_6_val_0_mode49_listener(self, value):
		self.midi_cc_ch_6_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_6_val_0, "pre_val"):
			self.midi_cc_ch_6_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_6_val_0, "prev_press_time"):
			self.midi_cc_ch_6_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310)
		self.midi_cc_ch_6_val_0.pre_val = value
		self.midi_cc_ch_6_val_0.prev_press_time = time.time()
	def midi_cc_ch_7_val_0_mode1_listener(self, value):
		self.midi_cc_ch_7_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_7_val_0, "pre_val"):
			self.midi_cc_ch_7_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_7_val_0, "prev_press_time"):
			self.midi_cc_ch_7_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303)
		self.midi_cc_ch_7_val_0.pre_val = value
		self.midi_cc_ch_7_val_0.prev_press_time = time.time()
	def midi_cc_ch_7_val_0_mode3_listener(self, value):
		self.midi_cc_ch_7_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_7_val_0, "pre_val"):
			self.midi_cc_ch_7_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_7_val_0, "prev_press_time"):
			self.midi_cc_ch_7_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327)
		self.midi_cc_ch_7_val_0.pre_val = value
		self.midi_cc_ch_7_val_0.prev_press_time = time.time()
	def midi_cc_ch_7_val_0_mode4_listener(self, value):
		self.midi_cc_ch_7_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_7_val_0, "pre_val"):
			self.midi_cc_ch_7_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_7_val_0, "prev_press_time"):
			self.midi_cc_ch_7_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319)
		self.midi_cc_ch_7_val_0.pre_val = value
		self.midi_cc_ch_7_val_0.prev_press_time = time.time()
	def midi_cc_ch_7_val_0_mode49_listener(self, value):
		self.midi_cc_ch_7_val_0.cur_val = value 
		if not hasattr(self.midi_cc_ch_7_val_0, "pre_val"):
			self.midi_cc_ch_7_val_0.pre_val = None
		if not hasattr(self.midi_cc_ch_7_val_0, "prev_press_time"):
			self.midi_cc_ch_7_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311)
		self.midi_cc_ch_7_val_0.pre_val = value
		self.midi_cc_ch_7_val_0.prev_press_time = time.time()
	def midi_note_ch_0_val_4_mode1_listener(self, value):
		self.midi_note_ch_0_val_4.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_4, "pre_val"):
			self.midi_note_ch_0_val_4.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_4, "prev_press_time"):
			self.midi_note_ch_0_val_4.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_355_id_355)
		self.midi_note_ch_0_val_4.pre_val = value
		self.midi_note_ch_0_val_4.prev_press_time = time.time()
	def midi_note_ch_0_val_4_mode3_listener(self, value):
		self.midi_note_ch_0_val_4.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_4, "pre_val"):
			self.midi_note_ch_0_val_4.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_4, "prev_press_time"):
			self.midi_note_ch_0_val_4.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_295_copy_356_id_356)
		self.midi_note_ch_0_val_4.pre_val = value
		self.midi_note_ch_0_val_4.prev_press_time = time.time()
	def midi_note_ch_0_val_4_mode4_listener(self, value):
		self.midi_note_ch_0_val_4.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_4, "pre_val"):
			self.midi_note_ch_0_val_4.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_4, "prev_press_time"):
			self.midi_note_ch_0_val_4.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_287_copy_357_id_357)
		self.midi_note_ch_0_val_4.pre_val = value
		self.midi_note_ch_0_val_4.prev_press_time = time.time()
	def midi_note_ch_0_val_4_mode49_listener(self, value):
		self.midi_note_ch_0_val_4.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_4, "pre_val"):
			self.midi_note_ch_0_val_4.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_4, "prev_press_time"):
			self.midi_note_ch_0_val_4.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_279_copy_358_id_358)
		self.midi_note_ch_0_val_4.pre_val = value
		self.midi_note_ch_0_val_4.prev_press_time = time.time()
	def midi_note_ch_0_val_1_mode1_listener(self, value):
		self.midi_note_ch_0_val_1.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_1, "pre_val"):
			self.midi_note_ch_0_val_1.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_1, "prev_press_time"):
			self.midi_note_ch_0_val_1.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_271_copy_359_id_359)
		self.midi_note_ch_0_val_1.pre_val = value
		self.midi_note_ch_0_val_1.prev_press_time = time.time()
	def midi_note_ch_0_val_1_mode3_listener(self, value):
		self.midi_note_ch_0_val_1.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_1, "pre_val"):
			self.midi_note_ch_0_val_1.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_1, "prev_press_time"):
			self.midi_note_ch_0_val_1.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_271_copy_294_copy_360_id_360)
		self.midi_note_ch_0_val_1.pre_val = value
		self.midi_note_ch_0_val_1.prev_press_time = time.time()
	def midi_note_ch_0_val_1_mode4_listener(self, value):
		self.midi_note_ch_0_val_1.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_1, "pre_val"):
			self.midi_note_ch_0_val_1.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_1, "prev_press_time"):
			self.midi_note_ch_0_val_1.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_271_copy_286_copy_361_id_361)
		self.midi_note_ch_0_val_1.pre_val = value
		self.midi_note_ch_0_val_1.prev_press_time = time.time()
	def midi_note_ch_0_val_1_mode49_listener(self, value):
		self.midi_note_ch_0_val_1.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_1, "pre_val"):
			self.midi_note_ch_0_val_1.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_1, "prev_press_time"):
			self.midi_note_ch_0_val_1.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_271_copy_278_copy_362_id_362)
		self.midi_note_ch_0_val_1.pre_val = value
		self.midi_note_ch_0_val_1.prev_press_time = time.time()
	def midi_note_ch_0_val_0_mode1_listener(self, value):
		self.midi_note_ch_0_val_0.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_0, "pre_val"):
			self.midi_note_ch_0_val_0.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_0, "prev_press_time"):
			self.midi_note_ch_0_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_363_id_363)
		self.midi_note_ch_0_val_0.pre_val = value
		self.midi_note_ch_0_val_0.prev_press_time = time.time()
	def midi_note_ch_0_val_0_mode3_listener(self, value):
		self.midi_note_ch_0_val_0.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_0, "pre_val"):
			self.midi_note_ch_0_val_0.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_0, "prev_press_time"):
			self.midi_note_ch_0_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_293_copy_364_id_364)
		self.midi_note_ch_0_val_0.pre_val = value
		self.midi_note_ch_0_val_0.prev_press_time = time.time()
	def midi_note_ch_0_val_0_mode4_listener(self, value):
		self.midi_note_ch_0_val_0.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_0, "pre_val"):
			self.midi_note_ch_0_val_0.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_0, "prev_press_time"):
			self.midi_note_ch_0_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_285_copy_365_id_365)
		self.midi_note_ch_0_val_0.pre_val = value
		self.midi_note_ch_0_val_0.prev_press_time = time.time()
	def midi_note_ch_0_val_0_mode49_listener(self, value):
		self.midi_note_ch_0_val_0.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_0, "pre_val"):
			self.midi_note_ch_0_val_0.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_0, "prev_press_time"):
			self.midi_note_ch_0_val_0.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_277_copy_366_id_366)
		self.midi_note_ch_0_val_0.pre_val = value
		self.midi_note_ch_0_val_0.prev_press_time = time.time()
	def midi_note_ch_0_val_5_mode1_listener(self, value):
		self.midi_note_ch_0_val_5.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_5, "pre_val"):
			self.midi_note_ch_0_val_5.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_5, "prev_press_time"):
			self.midi_note_ch_0_val_5.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_270_copy_367_id_367)
		self.midi_note_ch_0_val_5.pre_val = value
		self.midi_note_ch_0_val_5.prev_press_time = time.time()
	def midi_note_ch_0_val_5_mode3_listener(self, value):
		self.midi_note_ch_0_val_5.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_5, "pre_val"):
			self.midi_note_ch_0_val_5.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_5, "prev_press_time"):
			self.midi_note_ch_0_val_5.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_270_copy_292_copy_368_id_368)
		self.midi_note_ch_0_val_5.pre_val = value
		self.midi_note_ch_0_val_5.prev_press_time = time.time()
	def midi_note_ch_0_val_5_mode4_listener(self, value):
		self.midi_note_ch_0_val_5.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_5, "pre_val"):
			self.midi_note_ch_0_val_5.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_5, "prev_press_time"):
			self.midi_note_ch_0_val_5.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_270_copy_284_copy_369_id_369)
		self.midi_note_ch_0_val_5.pre_val = value
		self.midi_note_ch_0_val_5.prev_press_time = time.time()
	def midi_note_ch_0_val_5_mode49_listener(self, value):
		self.midi_note_ch_0_val_5.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_5, "pre_val"):
			self.midi_note_ch_0_val_5.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_5, "prev_press_time"):
			self.midi_note_ch_0_val_5.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_270_copy_276_copy_370_id_370)
		self.midi_note_ch_0_val_5.pre_val = value
		self.midi_note_ch_0_val_5.prev_press_time = time.time()
	def midi_note_ch_0_val_2_mode1_listener(self, value):
		self.midi_note_ch_0_val_2.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_2, "pre_val"):
			self.midi_note_ch_0_val_2.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_2, "prev_press_time"):
			self.midi_note_ch_0_val_2.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_267_copy_371_id_371)
		self.midi_note_ch_0_val_2.pre_val = value
		self.midi_note_ch_0_val_2.prev_press_time = time.time()
	def midi_note_ch_0_val_2_mode3_listener(self, value):
		self.midi_note_ch_0_val_2.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_2, "pre_val"):
			self.midi_note_ch_0_val_2.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_2, "prev_press_time"):
			self.midi_note_ch_0_val_2.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_267_copy_291_copy_372_id_372)
		self.midi_note_ch_0_val_2.pre_val = value
		self.midi_note_ch_0_val_2.prev_press_time = time.time()
	def midi_note_ch_0_val_2_mode4_listener(self, value):
		self.midi_note_ch_0_val_2.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_2, "pre_val"):
			self.midi_note_ch_0_val_2.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_2, "prev_press_time"):
			self.midi_note_ch_0_val_2.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_267_copy_283_copy_373_id_373)
		self.midi_note_ch_0_val_2.pre_val = value
		self.midi_note_ch_0_val_2.prev_press_time = time.time()
	def midi_note_ch_0_val_2_mode49_listener(self, value):
		self.midi_note_ch_0_val_2.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_2, "pre_val"):
			self.midi_note_ch_0_val_2.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_2, "prev_press_time"):
			self.midi_note_ch_0_val_2.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_267_copy_275_copy_374_id_374)
		self.midi_note_ch_0_val_2.pre_val = value
		self.midi_note_ch_0_val_2.prev_press_time = time.time()
	def midi_note_ch_0_val_6_mode1_listener(self, value):
		self.midi_note_ch_0_val_6.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_6, "pre_val"):
			self.midi_note_ch_0_val_6.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_6, "prev_press_time"):
			self.midi_note_ch_0_val_6.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_267_copy_269_copy_375_id_375)
		self.midi_note_ch_0_val_6.pre_val = value
		self.midi_note_ch_0_val_6.prev_press_time = time.time()
	def midi_note_ch_0_val_6_mode3_listener(self, value):
		self.midi_note_ch_0_val_6.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_6, "pre_val"):
			self.midi_note_ch_0_val_6.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_6, "prev_press_time"):
			self.midi_note_ch_0_val_6.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376)
		self.midi_note_ch_0_val_6.pre_val = value
		self.midi_note_ch_0_val_6.prev_press_time = time.time()
	def midi_note_ch_0_val_6_mode4_listener(self, value):
		self.midi_note_ch_0_val_6.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_6, "pre_val"):
			self.midi_note_ch_0_val_6.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_6, "prev_press_time"):
			self.midi_note_ch_0_val_6.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377)
		self.midi_note_ch_0_val_6.pre_val = value
		self.midi_note_ch_0_val_6.prev_press_time = time.time()
	def midi_note_ch_0_val_6_mode49_listener(self, value):
		self.midi_note_ch_0_val_6.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_6, "pre_val"):
			self.midi_note_ch_0_val_6.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_6, "prev_press_time"):
			self.midi_note_ch_0_val_6.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378)
		self.midi_note_ch_0_val_6.pre_val = value
		self.midi_note_ch_0_val_6.prev_press_time = time.time()
	def midi_note_ch_0_val_3_mode1_listener(self, value):
		self.midi_note_ch_0_val_3.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_3, "pre_val"):
			self.midi_note_ch_0_val_3.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_3, "prev_press_time"):
			self.midi_note_ch_0_val_3.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_266_copy_379_id_379)
		self.midi_note_ch_0_val_3.pre_val = value
		self.midi_note_ch_0_val_3.prev_press_time = time.time()
	def midi_note_ch_0_val_3_mode3_listener(self, value):
		self.midi_note_ch_0_val_3.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_3, "pre_val"):
			self.midi_note_ch_0_val_3.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_3, "prev_press_time"):
			self.midi_note_ch_0_val_3.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_266_copy_289_copy_380_id_380)
		self.midi_note_ch_0_val_3.pre_val = value
		self.midi_note_ch_0_val_3.prev_press_time = time.time()
	def midi_note_ch_0_val_3_mode4_listener(self, value):
		self.midi_note_ch_0_val_3.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_3, "pre_val"):
			self.midi_note_ch_0_val_3.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_3, "prev_press_time"):
			self.midi_note_ch_0_val_3.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_266_copy_281_copy_381_id_381)
		self.midi_note_ch_0_val_3.pre_val = value
		self.midi_note_ch_0_val_3.prev_press_time = time.time()
	def midi_note_ch_0_val_3_mode49_listener(self, value):
		self.midi_note_ch_0_val_3.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_3, "pre_val"):
			self.midi_note_ch_0_val_3.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_3, "prev_press_time"):
			self.midi_note_ch_0_val_3.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_266_copy_273_copy_382_id_382)
		self.midi_note_ch_0_val_3.pre_val = value
		self.midi_note_ch_0_val_3.prev_press_time = time.time()
	def midi_note_ch_0_val_7_mode1_listener(self, value):
		self.midi_note_ch_0_val_7.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_7, "pre_val"):
			self.midi_note_ch_0_val_7.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_7, "prev_press_time"):
			self.midi_note_ch_0_val_7.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_266_copy_268_copy_383_id_383)
		self.midi_note_ch_0_val_7.pre_val = value
		self.midi_note_ch_0_val_7.prev_press_time = time.time()
	def midi_note_ch_0_val_7_mode3_listener(self, value):
		self.midi_note_ch_0_val_7.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_7, "pre_val"):
			self.midi_note_ch_0_val_7.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_7, "prev_press_time"):
			self.midi_note_ch_0_val_7.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384)
		self.midi_note_ch_0_val_7.pre_val = value
		self.midi_note_ch_0_val_7.prev_press_time = time.time()
	def midi_note_ch_0_val_7_mode4_listener(self, value):
		self.midi_note_ch_0_val_7.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_7, "pre_val"):
			self.midi_note_ch_0_val_7.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_7, "prev_press_time"):
			self.midi_note_ch_0_val_7.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385)
		self.midi_note_ch_0_val_7.pre_val = value
		self.midi_note_ch_0_val_7.prev_press_time = time.time()
	def midi_note_ch_0_val_7_mode49_listener(self, value):
		self.midi_note_ch_0_val_7.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_7, "pre_val"):
			self.midi_note_ch_0_val_7.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_7, "prev_press_time"):
			self.midi_note_ch_0_val_7.prev_press_time = time.time()
		self.pick_brain(self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386)
		self.midi_note_ch_0_val_7.pre_val = value
		self.midi_note_ch_0_val_7.prev_press_time = time.time()
	def midi_note_ch_0_val_92_mode1_listener(self, value):
		self.midi_note_ch_0_val_92.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_92, "pre_val"):
			self.midi_note_ch_0_val_92.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_92, "prev_press_time"):
			self.midi_note_ch_0_val_92.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_id_252)
		self.midi_note_ch_0_val_92.pre_val = value
		self.midi_note_ch_0_val_92.prev_press_time = time.time()
	def midi_note_ch_0_val_46_mode1_listener(self, value):
		self.midi_note_ch_0_val_46.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_46, "pre_val"):
			self.midi_note_ch_0_val_46.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_46, "prev_press_time"):
			self.midi_note_ch_0_val_46.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_263_id_263)
		self.midi_note_ch_0_val_46.pre_val = value
		self.midi_note_ch_0_val_46.prev_press_time = time.time()
	def midi_note_ch_0_val_47_mode1_listener(self, value):
		self.midi_note_ch_0_val_47.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_47, "pre_val"):
			self.midi_note_ch_0_val_47.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_47, "prev_press_time"):
			self.midi_note_ch_0_val_47.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_259_id_259)
		self.midi_note_ch_0_val_47.pre_val = value
		self.midi_note_ch_0_val_47.prev_press_time = time.time()
	def midi_note_ch_0_val_92_mode3_listener(self, value):
		self.midi_note_ch_0_val_92.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_92, "pre_val"):
			self.midi_note_ch_0_val_92.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_92, "prev_press_time"):
			self.midi_note_ch_0_val_92.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_254_id_254)
		self.midi_note_ch_0_val_92.pre_val = value
		self.midi_note_ch_0_val_92.prev_press_time = time.time()
	def midi_note_ch_0_val_46_mode3_listener(self, value):
		self.midi_note_ch_0_val_46.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_46, "pre_val"):
			self.midi_note_ch_0_val_46.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_46, "prev_press_time"):
			self.midi_note_ch_0_val_46.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_254_copy_262_id_262)
		self.midi_note_ch_0_val_46.pre_val = value
		self.midi_note_ch_0_val_46.prev_press_time = time.time()
	def midi_note_ch_0_val_47_mode3_listener(self, value):
		self.midi_note_ch_0_val_47.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_47, "pre_val"):
			self.midi_note_ch_0_val_47.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_47, "prev_press_time"):
			self.midi_note_ch_0_val_47.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_254_copy_258_id_258)
		self.midi_note_ch_0_val_47.pre_val = value
		self.midi_note_ch_0_val_47.prev_press_time = time.time()
	def midi_note_ch_0_val_92_mode4_listener(self, value):
		self.midi_note_ch_0_val_92.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_92, "pre_val"):
			self.midi_note_ch_0_val_92.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_92, "prev_press_time"):
			self.midi_note_ch_0_val_92.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_253_id_253)
		self.midi_note_ch_0_val_92.pre_val = value
		self.midi_note_ch_0_val_92.prev_press_time = time.time()
	def midi_note_ch_0_val_46_mode4_listener(self, value):
		self.midi_note_ch_0_val_46.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_46, "pre_val"):
			self.midi_note_ch_0_val_46.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_46, "prev_press_time"):
			self.midi_note_ch_0_val_46.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_253_copy_261_id_261)
		self.midi_note_ch_0_val_46.pre_val = value
		self.midi_note_ch_0_val_46.prev_press_time = time.time()
	def midi_note_ch_0_val_47_mode4_listener(self, value):
		self.midi_note_ch_0_val_47.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_47, "pre_val"):
			self.midi_note_ch_0_val_47.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_47, "prev_press_time"):
			self.midi_note_ch_0_val_47.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_253_copy_257_id_257)
		self.midi_note_ch_0_val_47.pre_val = value
		self.midi_note_ch_0_val_47.prev_press_time = time.time()
	def midi_note_ch_0_val_92_mode49_listener(self, value):
		self.midi_note_ch_0_val_92.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_92, "pre_val"):
			self.midi_note_ch_0_val_92.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_92, "prev_press_time"):
			self.midi_note_ch_0_val_92.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_253_copy_255_id_255)
		self.midi_note_ch_0_val_92.pre_val = value
		self.midi_note_ch_0_val_92.prev_press_time = time.time()
	def midi_note_ch_0_val_46_mode49_listener(self, value):
		self.midi_note_ch_0_val_46.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_46, "pre_val"):
			self.midi_note_ch_0_val_46.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_46, "prev_press_time"):
			self.midi_note_ch_0_val_46.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256)
		self.midi_note_ch_0_val_46.pre_val = value
		self.midi_note_ch_0_val_46.prev_press_time = time.time()
	def midi_note_ch_0_val_47_mode49_listener(self, value):
		self.midi_note_ch_0_val_47.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_47, "pre_val"):
			self.midi_note_ch_0_val_47.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_47, "prev_press_time"):
			self.midi_note_ch_0_val_47.prev_press_time = time.time()
		self.pick_brain(self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260)
		self.midi_note_ch_0_val_47.pre_val = value
		self.midi_note_ch_0_val_47.prev_press_time = time.time()
	def midi_cc_ch_0_val_23_mode3_listener(self, value):
		self.midi_cc_ch_0_val_23.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_23, "pre_val"):
			self.midi_cc_ch_0_val_23.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_23, "prev_press_time"):
			self.midi_cc_ch_0_val_23.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_id_173)
		self.midi_cc_ch_0_val_23.pre_val = value
		self.midi_cc_ch_0_val_23.prev_press_time = time.time()
	def midi_cc_ch_0_val_23_mode4_listener(self, value):
		self.midi_cc_ch_0_val_23.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_23, "pre_val"):
			self.midi_cc_ch_0_val_23.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_23, "prev_press_time"):
			self.midi_cc_ch_0_val_23.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_copy_182_id_182)
		self.midi_cc_ch_0_val_23.pre_val = value
		self.midi_cc_ch_0_val_23.prev_press_time = time.time()
	def midi_cc_ch_0_val_22_mode3_listener(self, value):
		self.midi_cc_ch_0_val_22.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_22, "pre_val"):
			self.midi_cc_ch_0_val_22.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_22, "prev_press_time"):
			self.midi_cc_ch_0_val_22.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_id_172)
		self.midi_cc_ch_0_val_22.pre_val = value
		self.midi_cc_ch_0_val_22.prev_press_time = time.time()
	def midi_cc_ch_0_val_22_mode4_listener(self, value):
		self.midi_cc_ch_0_val_22.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_22, "pre_val"):
			self.midi_cc_ch_0_val_22.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_22, "prev_press_time"):
			self.midi_cc_ch_0_val_22.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_copy_183_id_183)
		self.midi_cc_ch_0_val_22.pre_val = value
		self.midi_cc_ch_0_val_22.prev_press_time = time.time()
	def midi_cc_ch_0_val_21_mode3_listener(self, value):
		self.midi_cc_ch_0_val_21.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_21, "pre_val"):
			self.midi_cc_ch_0_val_21.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_21, "prev_press_time"):
			self.midi_cc_ch_0_val_21.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_6_id_171)
		self.midi_cc_ch_0_val_21.pre_val = value
		self.midi_cc_ch_0_val_21.prev_press_time = time.time()
	def midi_cc_ch_0_val_21_mode4_listener(self, value):
		self.midi_cc_ch_0_val_21.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_21, "pre_val"):
			self.midi_cc_ch_0_val_21.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_21, "prev_press_time"):
			self.midi_cc_ch_0_val_21.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_6_copy_184_id_184)
		self.midi_cc_ch_0_val_21.pre_val = value
		self.midi_cc_ch_0_val_21.prev_press_time = time.time()
	def midi_cc_ch_0_val_20_mode3_listener(self, value):
		self.midi_cc_ch_0_val_20.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_20, "pre_val"):
			self.midi_cc_ch_0_val_20.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_20, "prev_press_time"):
			self.midi_cc_ch_0_val_20.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_5_id_170)
		self.midi_cc_ch_0_val_20.pre_val = value
		self.midi_cc_ch_0_val_20.prev_press_time = time.time()
	def midi_cc_ch_0_val_20_mode4_listener(self, value):
		self.midi_cc_ch_0_val_20.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_20, "pre_val"):
			self.midi_cc_ch_0_val_20.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_20, "prev_press_time"):
			self.midi_cc_ch_0_val_20.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_5_copy_185_id_185)
		self.midi_cc_ch_0_val_20.pre_val = value
		self.midi_cc_ch_0_val_20.prev_press_time = time.time()
	def midi_cc_ch_0_val_19_mode3_listener(self, value):
		self.midi_cc_ch_0_val_19.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_19, "pre_val"):
			self.midi_cc_ch_0_val_19.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_19, "prev_press_time"):
			self.midi_cc_ch_0_val_19.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_4_id_169)
		self.midi_cc_ch_0_val_19.pre_val = value
		self.midi_cc_ch_0_val_19.prev_press_time = time.time()
	def midi_cc_ch_0_val_19_mode4_listener(self, value):
		self.midi_cc_ch_0_val_19.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_19, "pre_val"):
			self.midi_cc_ch_0_val_19.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_19, "prev_press_time"):
			self.midi_cc_ch_0_val_19.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_4_copy_186_id_186)
		self.midi_cc_ch_0_val_19.pre_val = value
		self.midi_cc_ch_0_val_19.prev_press_time = time.time()
	def midi_cc_ch_0_val_18_mode3_listener(self, value):
		self.midi_cc_ch_0_val_18.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_18, "pre_val"):
			self.midi_cc_ch_0_val_18.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_18, "prev_press_time"):
			self.midi_cc_ch_0_val_18.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_3_id_168)
		self.midi_cc_ch_0_val_18.pre_val = value
		self.midi_cc_ch_0_val_18.prev_press_time = time.time()
	def midi_cc_ch_0_val_18_mode4_listener(self, value):
		self.midi_cc_ch_0_val_18.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_18, "pre_val"):
			self.midi_cc_ch_0_val_18.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_18, "prev_press_time"):
			self.midi_cc_ch_0_val_18.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_3_copy_187_id_187)
		self.midi_cc_ch_0_val_18.pre_val = value
		self.midi_cc_ch_0_val_18.prev_press_time = time.time()
	def midi_cc_ch_0_val_17_mode3_listener(self, value):
		self.midi_cc_ch_0_val_17.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_17, "pre_val"):
			self.midi_cc_ch_0_val_17.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_17, "prev_press_time"):
			self.midi_cc_ch_0_val_17.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_id_167)
		self.midi_cc_ch_0_val_17.pre_val = value
		self.midi_cc_ch_0_val_17.prev_press_time = time.time()
	def midi_cc_ch_0_val_17_mode4_listener(self, value):
		self.midi_cc_ch_0_val_17.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_17, "pre_val"):
			self.midi_cc_ch_0_val_17.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_17, "prev_press_time"):
			self.midi_cc_ch_0_val_17.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_copy_188_id_188)
		self.midi_cc_ch_0_val_17.pre_val = value
		self.midi_cc_ch_0_val_17.prev_press_time = time.time()
	def midi_cc_ch_0_val_16_mode3_listener(self, value):
		self.midi_cc_ch_0_val_16.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_16, "pre_val"):
			self.midi_cc_ch_0_val_16.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_16, "prev_press_time"):
			self.midi_cc_ch_0_val_16.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_id_166)
		self.midi_cc_ch_0_val_16.pre_val = value
		self.midi_cc_ch_0_val_16.prev_press_time = time.time()
	def midi_cc_ch_0_val_16_mode4_listener(self, value):
		self.midi_cc_ch_0_val_16.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_16, "pre_val"):
			self.midi_cc_ch_0_val_16.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_16, "prev_press_time"):
			self.midi_cc_ch_0_val_16.prev_press_time = time.time()
		self.pick_brain(self.new_send_mapping_copy_189_id_189)
		self.midi_cc_ch_0_val_16.pre_val = value
		self.midi_cc_ch_0_val_16.prev_press_time = time.time()
	def midi_cc_ch_0_val_16_mode1_listener(self, value):
		self.midi_cc_ch_0_val_16.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_16, "pre_val"):
			self.midi_cc_ch_0_val_16.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_16, "prev_press_time"):
			self.midi_cc_ch_0_val_16.prev_press_time = time.time()
		self.pick_brain(self.volume_1_id_7)
		self.midi_cc_ch_0_val_16.pre_val = value
		self.midi_cc_ch_0_val_16.prev_press_time = time.time()
	def midi_cc_ch_0_val_17_mode1_listener(self, value):
		self.midi_cc_ch_0_val_17.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_17, "pre_val"):
			self.midi_cc_ch_0_val_17.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_17, "prev_press_time"):
			self.midi_cc_ch_0_val_17.prev_press_time = time.time()
		self.pick_brain(self.volume_1_id_9)
		self.midi_cc_ch_0_val_17.pre_val = value
		self.midi_cc_ch_0_val_17.prev_press_time = time.time()
	def midi_cc_ch_0_val_18_mode1_listener(self, value):
		self.midi_cc_ch_0_val_18.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_18, "pre_val"):
			self.midi_cc_ch_0_val_18.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_18, "prev_press_time"):
			self.midi_cc_ch_0_val_18.prev_press_time = time.time()
		self.pick_brain(self.volume_1_id_11)
		self.midi_cc_ch_0_val_18.pre_val = value
		self.midi_cc_ch_0_val_18.prev_press_time = time.time()
	def midi_cc_ch_0_val_19_mode1_listener(self, value):
		self.midi_cc_ch_0_val_19.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_19, "pre_val"):
			self.midi_cc_ch_0_val_19.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_19, "prev_press_time"):
			self.midi_cc_ch_0_val_19.prev_press_time = time.time()
		self.pick_brain(self.volume_1_id_13)
		self.midi_cc_ch_0_val_19.pre_val = value
		self.midi_cc_ch_0_val_19.prev_press_time = time.time()
	def midi_cc_ch_0_val_20_mode1_listener(self, value):
		self.midi_cc_ch_0_val_20.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_20, "pre_val"):
			self.midi_cc_ch_0_val_20.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_20, "prev_press_time"):
			self.midi_cc_ch_0_val_20.prev_press_time = time.time()
		self.pick_brain(self.volume_1_id_15)
		self.midi_cc_ch_0_val_20.pre_val = value
		self.midi_cc_ch_0_val_20.prev_press_time = time.time()
	def midi_cc_ch_0_val_21_mode1_listener(self, value):
		self.midi_cc_ch_0_val_21.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_21, "pre_val"):
			self.midi_cc_ch_0_val_21.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_21, "prev_press_time"):
			self.midi_cc_ch_0_val_21.prev_press_time = time.time()
		self.pick_brain(self.volume_1_id_17)
		self.midi_cc_ch_0_val_21.pre_val = value
		self.midi_cc_ch_0_val_21.prev_press_time = time.time()
	def midi_cc_ch_0_val_22_mode1_listener(self, value):
		self.midi_cc_ch_0_val_22.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_22, "pre_val"):
			self.midi_cc_ch_0_val_22.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_22, "prev_press_time"):
			self.midi_cc_ch_0_val_22.prev_press_time = time.time()
		self.pick_brain(self.volume_1_id_19)
		self.midi_cc_ch_0_val_22.pre_val = value
		self.midi_cc_ch_0_val_22.prev_press_time = time.time()
	def midi_cc_ch_0_val_23_mode1_listener(self, value):
		self.midi_cc_ch_0_val_23.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_23, "pre_val"):
			self.midi_cc_ch_0_val_23.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_23, "prev_press_time"):
			self.midi_cc_ch_0_val_23.prev_press_time = time.time()
		self.pick_brain(self.volume_1_id_21)
		self.midi_cc_ch_0_val_23.pre_val = value
		self.midi_cc_ch_0_val_23.prev_press_time = time.time()
	def midi_note_ch_0_val_16_mode1_listener(self, value):
		self.midi_note_ch_0_val_16.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_16, "pre_val"):
			self.midi_note_ch_0_val_16.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_16, "prev_press_time"):
			self.midi_note_ch_0_val_16.prev_press_time = time.time()
		self.pick_brain(self.mute_1_id_22)
		self.midi_note_ch_0_val_16.pre_val = value
		self.midi_note_ch_0_val_16.prev_press_time = time.time()
	def midi_note_ch_0_val_16_mode49_listener(self, value):
		self.midi_note_ch_0_val_16.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_16, "pre_val"):
			self.midi_note_ch_0_val_16.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_16, "prev_press_time"):
			self.midi_note_ch_0_val_16.prev_press_time = time.time()
		self.pick_brain(self.mute_1_copy_222_id_222)
		self.midi_note_ch_0_val_16.pre_val = value
		self.midi_note_ch_0_val_16.prev_press_time = time.time()
	def midi_note_ch_0_val_8_mode49_listener(self, value):
		self.midi_note_ch_0_val_8.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_8, "pre_val"):
			self.midi_note_ch_0_val_8.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_8, "prev_press_time"):
			self.midi_note_ch_0_val_8.prev_press_time = time.time()
		self.pick_brain(self.solo_1_copy_223_id_223)
		self.midi_note_ch_0_val_8.pre_val = value
		self.midi_note_ch_0_val_8.prev_press_time = time.time()
	def midi_note_ch_0_val_17_mode1_listener(self, value):
		self.midi_note_ch_0_val_17.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_17, "pre_val"):
			self.midi_note_ch_0_val_17.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_17, "prev_press_time"):
			self.midi_note_ch_0_val_17.prev_press_time = time.time()
		self.pick_brain(self.mute_2_id_24)
		self.midi_note_ch_0_val_17.pre_val = value
		self.midi_note_ch_0_val_17.prev_press_time = time.time()
	def midi_note_ch_0_val_17_mode49_listener(self, value):
		self.midi_note_ch_0_val_17.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_17, "pre_val"):
			self.midi_note_ch_0_val_17.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_17, "prev_press_time"):
			self.midi_note_ch_0_val_17.prev_press_time = time.time()
		self.pick_brain(self.mute_2_copy_224_id_224)
		self.midi_note_ch_0_val_17.pre_val = value
		self.midi_note_ch_0_val_17.prev_press_time = time.time()
	def midi_note_ch_0_val_9_mode49_listener(self, value):
		self.midi_note_ch_0_val_9.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_9, "pre_val"):
			self.midi_note_ch_0_val_9.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_9, "prev_press_time"):
			self.midi_note_ch_0_val_9.prev_press_time = time.time()
		self.pick_brain(self.solo_2_copy_225_id_225)
		self.midi_note_ch_0_val_9.pre_val = value
		self.midi_note_ch_0_val_9.prev_press_time = time.time()
	def midi_note_ch_0_val_18_mode1_listener(self, value):
		self.midi_note_ch_0_val_18.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_18, "pre_val"):
			self.midi_note_ch_0_val_18.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_18, "prev_press_time"):
			self.midi_note_ch_0_val_18.prev_press_time = time.time()
		self.pick_brain(self.mute_3_id_26)
		self.midi_note_ch_0_val_18.pre_val = value
		self.midi_note_ch_0_val_18.prev_press_time = time.time()
	def midi_note_ch_0_val_18_mode49_listener(self, value):
		self.midi_note_ch_0_val_18.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_18, "pre_val"):
			self.midi_note_ch_0_val_18.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_18, "prev_press_time"):
			self.midi_note_ch_0_val_18.prev_press_time = time.time()
		self.pick_brain(self.mute_3_copy_226_id_226)
		self.midi_note_ch_0_val_18.pre_val = value
		self.midi_note_ch_0_val_18.prev_press_time = time.time()
	def midi_note_ch_0_val_10_mode49_listener(self, value):
		self.midi_note_ch_0_val_10.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_10, "pre_val"):
			self.midi_note_ch_0_val_10.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_10, "prev_press_time"):
			self.midi_note_ch_0_val_10.prev_press_time = time.time()
		self.pick_brain(self.solo_3_copy_227_id_227)
		self.midi_note_ch_0_val_10.pre_val = value
		self.midi_note_ch_0_val_10.prev_press_time = time.time()
	def midi_note_ch_0_val_19_mode1_listener(self, value):
		self.midi_note_ch_0_val_19.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_19, "pre_val"):
			self.midi_note_ch_0_val_19.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_19, "prev_press_time"):
			self.midi_note_ch_0_val_19.prev_press_time = time.time()
		self.pick_brain(self.mute_4_id_28)
		self.midi_note_ch_0_val_19.pre_val = value
		self.midi_note_ch_0_val_19.prev_press_time = time.time()
	def midi_note_ch_0_val_19_mode49_listener(self, value):
		self.midi_note_ch_0_val_19.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_19, "pre_val"):
			self.midi_note_ch_0_val_19.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_19, "prev_press_time"):
			self.midi_note_ch_0_val_19.prev_press_time = time.time()
		self.pick_brain(self.mute_4_copy_228_id_228)
		self.midi_note_ch_0_val_19.pre_val = value
		self.midi_note_ch_0_val_19.prev_press_time = time.time()
	def midi_note_ch_0_val_11_mode49_listener(self, value):
		self.midi_note_ch_0_val_11.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_11, "pre_val"):
			self.midi_note_ch_0_val_11.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_11, "prev_press_time"):
			self.midi_note_ch_0_val_11.prev_press_time = time.time()
		self.pick_brain(self.solo_4_copy_229_id_229)
		self.midi_note_ch_0_val_11.pre_val = value
		self.midi_note_ch_0_val_11.prev_press_time = time.time()
	def midi_note_ch_0_val_20_mode1_listener(self, value):
		self.midi_note_ch_0_val_20.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_20, "pre_val"):
			self.midi_note_ch_0_val_20.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_20, "prev_press_time"):
			self.midi_note_ch_0_val_20.prev_press_time = time.time()
		self.pick_brain(self.mute_5_id_30)
		self.midi_note_ch_0_val_20.pre_val = value
		self.midi_note_ch_0_val_20.prev_press_time = time.time()
	def midi_note_ch_0_val_20_mode49_listener(self, value):
		self.midi_note_ch_0_val_20.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_20, "pre_val"):
			self.midi_note_ch_0_val_20.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_20, "prev_press_time"):
			self.midi_note_ch_0_val_20.prev_press_time = time.time()
		self.pick_brain(self.mute_5_copy_230_id_230)
		self.midi_note_ch_0_val_20.pre_val = value
		self.midi_note_ch_0_val_20.prev_press_time = time.time()
	def midi_note_ch_0_val_12_mode49_listener(self, value):
		self.midi_note_ch_0_val_12.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_12, "pre_val"):
			self.midi_note_ch_0_val_12.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_12, "prev_press_time"):
			self.midi_note_ch_0_val_12.prev_press_time = time.time()
		self.pick_brain(self.solo_5_copy_231_id_231)
		self.midi_note_ch_0_val_12.pre_val = value
		self.midi_note_ch_0_val_12.prev_press_time = time.time()
	def midi_note_ch_0_val_21_mode1_listener(self, value):
		self.midi_note_ch_0_val_21.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_21, "pre_val"):
			self.midi_note_ch_0_val_21.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_21, "prev_press_time"):
			self.midi_note_ch_0_val_21.prev_press_time = time.time()
		self.pick_brain(self.mute_6_id_32)
		self.midi_note_ch_0_val_21.pre_val = value
		self.midi_note_ch_0_val_21.prev_press_time = time.time()
	def midi_note_ch_0_val_21_mode49_listener(self, value):
		self.midi_note_ch_0_val_21.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_21, "pre_val"):
			self.midi_note_ch_0_val_21.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_21, "prev_press_time"):
			self.midi_note_ch_0_val_21.prev_press_time = time.time()
		self.pick_brain(self.mute_6_copy_232_id_232)
		self.midi_note_ch_0_val_21.pre_val = value
		self.midi_note_ch_0_val_21.prev_press_time = time.time()
	def midi_note_ch_0_val_13_mode49_listener(self, value):
		self.midi_note_ch_0_val_13.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_13, "pre_val"):
			self.midi_note_ch_0_val_13.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_13, "prev_press_time"):
			self.midi_note_ch_0_val_13.prev_press_time = time.time()
		self.pick_brain(self.solo_6_copy_233_id_233)
		self.midi_note_ch_0_val_13.pre_val = value
		self.midi_note_ch_0_val_13.prev_press_time = time.time()
	def midi_note_ch_0_val_22_mode1_listener(self, value):
		self.midi_note_ch_0_val_22.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_22, "pre_val"):
			self.midi_note_ch_0_val_22.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_22, "prev_press_time"):
			self.midi_note_ch_0_val_22.prev_press_time = time.time()
		self.pick_brain(self.mute_7_id_34)
		self.midi_note_ch_0_val_22.pre_val = value
		self.midi_note_ch_0_val_22.prev_press_time = time.time()
	def midi_note_ch_0_val_22_mode49_listener(self, value):
		self.midi_note_ch_0_val_22.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_22, "pre_val"):
			self.midi_note_ch_0_val_22.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_22, "prev_press_time"):
			self.midi_note_ch_0_val_22.prev_press_time = time.time()
		self.pick_brain(self.mute_7_copy_234_id_234)
		self.midi_note_ch_0_val_22.pre_val = value
		self.midi_note_ch_0_val_22.prev_press_time = time.time()
	def midi_note_ch_0_val_14_mode49_listener(self, value):
		self.midi_note_ch_0_val_14.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_14, "pre_val"):
			self.midi_note_ch_0_val_14.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_14, "prev_press_time"):
			self.midi_note_ch_0_val_14.prev_press_time = time.time()
		self.pick_brain(self.solo_7_copy_235_id_235)
		self.midi_note_ch_0_val_14.pre_val = value
		self.midi_note_ch_0_val_14.prev_press_time = time.time()
	def midi_note_ch_0_val_23_mode1_listener(self, value):
		self.midi_note_ch_0_val_23.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_23, "pre_val"):
			self.midi_note_ch_0_val_23.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_23, "prev_press_time"):
			self.midi_note_ch_0_val_23.prev_press_time = time.time()
		self.pick_brain(self.mute_8_id_36)
		self.midi_note_ch_0_val_23.pre_val = value
		self.midi_note_ch_0_val_23.prev_press_time = time.time()
	def midi_note_ch_0_val_23_mode49_listener(self, value):
		self.midi_note_ch_0_val_23.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_23, "pre_val"):
			self.midi_note_ch_0_val_23.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_23, "prev_press_time"):
			self.midi_note_ch_0_val_23.prev_press_time = time.time()
		self.pick_brain(self.mute_8_copy_236_id_236)
		self.midi_note_ch_0_val_23.pre_val = value
		self.midi_note_ch_0_val_23.prev_press_time = time.time()
	def midi_note_ch_0_val_15_mode49_listener(self, value):
		self.midi_note_ch_0_val_15.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_15, "pre_val"):
			self.midi_note_ch_0_val_15.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_15, "prev_press_time"):
			self.midi_note_ch_0_val_15.prev_press_time = time.time()
		self.pick_brain(self.solo_8_copy_237_id_237)
		self.midi_note_ch_0_val_15.pre_val = value
		self.midi_note_ch_0_val_15.prev_press_time = time.time()
	def midi_note_ch_0_val_94_mode1_listener(self, value):
		self.midi_note_ch_0_val_94.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_94, "pre_val"):
			self.midi_note_ch_0_val_94.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_94, "prev_press_time"):
			self.midi_note_ch_0_val_94.prev_press_time = time.time()
		self.pick_brain(self.play_1_id_39)
		self.midi_note_ch_0_val_94.pre_val = value
		self.midi_note_ch_0_val_94.prev_press_time = time.time()
	def midi_note_ch_0_val_94_mode49_listener(self, value):
		self.midi_note_ch_0_val_94.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_94, "pre_val"):
			self.midi_note_ch_0_val_94.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_94, "prev_press_time"):
			self.midi_note_ch_0_val_94.prev_press_time = time.time()
		self.pick_brain(self.play_1_copy_239_id_239)
		self.midi_note_ch_0_val_94.pre_val = value
		self.midi_note_ch_0_val_94.prev_press_time = time.time()
	def midi_note_ch_0_val_93_mode1_listener(self, value):
		self.midi_note_ch_0_val_93.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_93, "pre_val"):
			self.midi_note_ch_0_val_93.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_93, "prev_press_time"):
			self.midi_note_ch_0_val_93.prev_press_time = time.time()
		self.pick_brain(self.stop_1_id_40)
		self.midi_note_ch_0_val_93.pre_val = value
		self.midi_note_ch_0_val_93.prev_press_time = time.time()
	def midi_note_ch_0_val_93_mode49_listener(self, value):
		self.midi_note_ch_0_val_93.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_93, "pre_val"):
			self.midi_note_ch_0_val_93.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_93, "prev_press_time"):
			self.midi_note_ch_0_val_93.prev_press_time = time.time()
		self.pick_brain(self.stop_1_copy_240_id_240)
		self.midi_note_ch_0_val_93.pre_val = value
		self.midi_note_ch_0_val_93.prev_press_time = time.time()
	def midi_note_ch_0_val_91_mode1_listener(self, value):
		self.midi_note_ch_0_val_91.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_91, "pre_val"):
			self.midi_note_ch_0_val_91.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_91, "prev_press_time"):
			self.midi_note_ch_0_val_91.prev_press_time = time.time()
		self.pick_brain(self.undo_1_id_42)
		self.midi_note_ch_0_val_91.pre_val = value
		self.midi_note_ch_0_val_91.prev_press_time = time.time()
	def midi_note_ch_0_val_91_mode49_listener(self, value):
		self.midi_note_ch_0_val_91.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_91, "pre_val"):
			self.midi_note_ch_0_val_91.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_91, "prev_press_time"):
			self.midi_note_ch_0_val_91.prev_press_time = time.time()
		self.pick_brain(self.undo_1_copy_242_id_242)
		self.midi_note_ch_0_val_91.pre_val = value
		self.midi_note_ch_0_val_91.prev_press_time = time.time()
	def midi_note_ch_0_val_98_mode1_listener(self, value):
		self.midi_note_ch_0_val_98.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_98, "pre_val"):
			self.midi_note_ch_0_val_98.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_98, "prev_press_time"):
			self.midi_note_ch_0_val_98.prev_press_time = time.time()
		self.pick_brain(self.pan_id_47)
		self.midi_note_ch_0_val_98.pre_val = value
		self.midi_note_ch_0_val_98.prev_press_time = time.time()
	def midi_note_ch_0_val_98_mode49_listener(self, value):
		self.midi_note_ch_0_val_98.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_98, "pre_val"):
			self.midi_note_ch_0_val_98.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_98, "prev_press_time"):
			self.midi_note_ch_0_val_98.prev_press_time = time.time()
		self.pick_brain(self.pan_copy_247_id_247)
		self.midi_note_ch_0_val_98.pre_val = value
		self.midi_note_ch_0_val_98.prev_press_time = time.time()
	def midi_note_ch_0_val_99_mode1_listener(self, value):
		self.midi_note_ch_0_val_99.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_99, "pre_val"):
			self.midi_note_ch_0_val_99.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_99, "prev_press_time"):
			self.midi_note_ch_0_val_99.prev_press_time = time.time()
		self.pick_brain(self.aux_id_48)
		self.midi_note_ch_0_val_99.pre_val = value
		self.midi_note_ch_0_val_99.prev_press_time = time.time()
	def midi_note_ch_0_val_99_mode49_listener(self, value):
		self.midi_note_ch_0_val_99.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_99, "pre_val"):
			self.midi_note_ch_0_val_99.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_99, "prev_press_time"):
			self.midi_note_ch_0_val_99.prev_press_time = time.time()
		self.pick_brain(self.aux_copy_248_id_248)
		self.midi_note_ch_0_val_99.pre_val = value
		self.midi_note_ch_0_val_99.prev_press_time = time.time()
	def midi_note_ch_0_val_16_mode3_listener(self, value):
		self.midi_note_ch_0_val_16.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_16, "pre_val"):
			self.midi_note_ch_0_val_16.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_16, "prev_press_time"):
			self.midi_note_ch_0_val_16.prev_press_time = time.time()
		self.pick_brain(self.mute_1_id_51)
		self.midi_note_ch_0_val_16.pre_val = value
		self.midi_note_ch_0_val_16.prev_press_time = time.time()
	def midi_note_ch_0_val_8_mode3_listener(self, value):
		self.midi_note_ch_0_val_8.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_8, "pre_val"):
			self.midi_note_ch_0_val_8.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_8, "prev_press_time"):
			self.midi_note_ch_0_val_8.prev_press_time = time.time()
		self.pick_brain(self.solo_1_id_52)
		self.midi_note_ch_0_val_8.pre_val = value
		self.midi_note_ch_0_val_8.prev_press_time = time.time()
	def midi_note_ch_0_val_17_mode3_listener(self, value):
		self.midi_note_ch_0_val_17.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_17, "pre_val"):
			self.midi_note_ch_0_val_17.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_17, "prev_press_time"):
			self.midi_note_ch_0_val_17.prev_press_time = time.time()
		self.pick_brain(self.mute_2_id_54)
		self.midi_note_ch_0_val_17.pre_val = value
		self.midi_note_ch_0_val_17.prev_press_time = time.time()
	def midi_note_ch_0_val_9_mode3_listener(self, value):
		self.midi_note_ch_0_val_9.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_9, "pre_val"):
			self.midi_note_ch_0_val_9.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_9, "prev_press_time"):
			self.midi_note_ch_0_val_9.prev_press_time = time.time()
		self.pick_brain(self.solo_2_id_55)
		self.midi_note_ch_0_val_9.pre_val = value
		self.midi_note_ch_0_val_9.prev_press_time = time.time()
	def midi_note_ch_0_val_18_mode3_listener(self, value):
		self.midi_note_ch_0_val_18.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_18, "pre_val"):
			self.midi_note_ch_0_val_18.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_18, "prev_press_time"):
			self.midi_note_ch_0_val_18.prev_press_time = time.time()
		self.pick_brain(self.mute_3_id_57)
		self.midi_note_ch_0_val_18.pre_val = value
		self.midi_note_ch_0_val_18.prev_press_time = time.time()
	def midi_note_ch_0_val_10_mode3_listener(self, value):
		self.midi_note_ch_0_val_10.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_10, "pre_val"):
			self.midi_note_ch_0_val_10.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_10, "prev_press_time"):
			self.midi_note_ch_0_val_10.prev_press_time = time.time()
		self.pick_brain(self.solo_3_id_58)
		self.midi_note_ch_0_val_10.pre_val = value
		self.midi_note_ch_0_val_10.prev_press_time = time.time()
	def midi_note_ch_0_val_19_mode3_listener(self, value):
		self.midi_note_ch_0_val_19.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_19, "pre_val"):
			self.midi_note_ch_0_val_19.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_19, "prev_press_time"):
			self.midi_note_ch_0_val_19.prev_press_time = time.time()
		self.pick_brain(self.mute_4_id_60)
		self.midi_note_ch_0_val_19.pre_val = value
		self.midi_note_ch_0_val_19.prev_press_time = time.time()
	def midi_note_ch_0_val_11_mode3_listener(self, value):
		self.midi_note_ch_0_val_11.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_11, "pre_val"):
			self.midi_note_ch_0_val_11.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_11, "prev_press_time"):
			self.midi_note_ch_0_val_11.prev_press_time = time.time()
		self.pick_brain(self.solo_4_id_61)
		self.midi_note_ch_0_val_11.pre_val = value
		self.midi_note_ch_0_val_11.prev_press_time = time.time()
	def midi_note_ch_0_val_20_mode3_listener(self, value):
		self.midi_note_ch_0_val_20.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_20, "pre_val"):
			self.midi_note_ch_0_val_20.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_20, "prev_press_time"):
			self.midi_note_ch_0_val_20.prev_press_time = time.time()
		self.pick_brain(self.mute_5_id_63)
		self.midi_note_ch_0_val_20.pre_val = value
		self.midi_note_ch_0_val_20.prev_press_time = time.time()
	def midi_note_ch_0_val_12_mode3_listener(self, value):
		self.midi_note_ch_0_val_12.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_12, "pre_val"):
			self.midi_note_ch_0_val_12.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_12, "prev_press_time"):
			self.midi_note_ch_0_val_12.prev_press_time = time.time()
		self.pick_brain(self.solo_5_id_64)
		self.midi_note_ch_0_val_12.pre_val = value
		self.midi_note_ch_0_val_12.prev_press_time = time.time()
	def midi_note_ch_0_val_21_mode3_listener(self, value):
		self.midi_note_ch_0_val_21.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_21, "pre_val"):
			self.midi_note_ch_0_val_21.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_21, "prev_press_time"):
			self.midi_note_ch_0_val_21.prev_press_time = time.time()
		self.pick_brain(self.mute_6_id_66)
		self.midi_note_ch_0_val_21.pre_val = value
		self.midi_note_ch_0_val_21.prev_press_time = time.time()
	def midi_note_ch_0_val_13_mode3_listener(self, value):
		self.midi_note_ch_0_val_13.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_13, "pre_val"):
			self.midi_note_ch_0_val_13.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_13, "prev_press_time"):
			self.midi_note_ch_0_val_13.prev_press_time = time.time()
		self.pick_brain(self.solo_6_id_67)
		self.midi_note_ch_0_val_13.pre_val = value
		self.midi_note_ch_0_val_13.prev_press_time = time.time()
	def midi_note_ch_0_val_22_mode3_listener(self, value):
		self.midi_note_ch_0_val_22.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_22, "pre_val"):
			self.midi_note_ch_0_val_22.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_22, "prev_press_time"):
			self.midi_note_ch_0_val_22.prev_press_time = time.time()
		self.pick_brain(self.mute_7_id_69)
		self.midi_note_ch_0_val_22.pre_val = value
		self.midi_note_ch_0_val_22.prev_press_time = time.time()
	def midi_note_ch_0_val_14_mode3_listener(self, value):
		self.midi_note_ch_0_val_14.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_14, "pre_val"):
			self.midi_note_ch_0_val_14.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_14, "prev_press_time"):
			self.midi_note_ch_0_val_14.prev_press_time = time.time()
		self.pick_brain(self.solo_7_id_70)
		self.midi_note_ch_0_val_14.pre_val = value
		self.midi_note_ch_0_val_14.prev_press_time = time.time()
	def midi_note_ch_0_val_23_mode3_listener(self, value):
		self.midi_note_ch_0_val_23.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_23, "pre_val"):
			self.midi_note_ch_0_val_23.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_23, "prev_press_time"):
			self.midi_note_ch_0_val_23.prev_press_time = time.time()
		self.pick_brain(self.mute_8_id_72)
		self.midi_note_ch_0_val_23.pre_val = value
		self.midi_note_ch_0_val_23.prev_press_time = time.time()
	def midi_note_ch_0_val_15_mode3_listener(self, value):
		self.midi_note_ch_0_val_15.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_15, "pre_val"):
			self.midi_note_ch_0_val_15.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_15, "prev_press_time"):
			self.midi_note_ch_0_val_15.prev_press_time = time.time()
		self.pick_brain(self.solo_8_id_73)
		self.midi_note_ch_0_val_15.pre_val = value
		self.midi_note_ch_0_val_15.prev_press_time = time.time()
	def midi_note_ch_0_val_94_mode3_listener(self, value):
		self.midi_note_ch_0_val_94.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_94, "pre_val"):
			self.midi_note_ch_0_val_94.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_94, "prev_press_time"):
			self.midi_note_ch_0_val_94.prev_press_time = time.time()
		self.pick_brain(self.play_1_id_83)
		self.midi_note_ch_0_val_94.pre_val = value
		self.midi_note_ch_0_val_94.prev_press_time = time.time()
	def midi_note_ch_0_val_93_mode3_listener(self, value):
		self.midi_note_ch_0_val_93.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_93, "pre_val"):
			self.midi_note_ch_0_val_93.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_93, "prev_press_time"):
			self.midi_note_ch_0_val_93.prev_press_time = time.time()
		self.pick_brain(self.stop_1_id_84)
		self.midi_note_ch_0_val_93.pre_val = value
		self.midi_note_ch_0_val_93.prev_press_time = time.time()
	def midi_note_ch_0_val_91_mode3_listener(self, value):
		self.midi_note_ch_0_val_91.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_91, "pre_val"):
			self.midi_note_ch_0_val_91.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_91, "prev_press_time"):
			self.midi_note_ch_0_val_91.prev_press_time = time.time()
		self.pick_brain(self.undo_1_id_86)
		self.midi_note_ch_0_val_91.pre_val = value
		self.midi_note_ch_0_val_91.prev_press_time = time.time()
	def midi_note_ch_0_val_98_mode3_listener(self, value):
		self.midi_note_ch_0_val_98.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_98, "pre_val"):
			self.midi_note_ch_0_val_98.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_98, "prev_press_time"):
			self.midi_note_ch_0_val_98.prev_press_time = time.time()
		self.pick_brain(self.pan_id_91)
		self.midi_note_ch_0_val_98.pre_val = value
		self.midi_note_ch_0_val_98.prev_press_time = time.time()
	def midi_note_ch_0_val_99_mode3_listener(self, value):
		self.midi_note_ch_0_val_99.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_99, "pre_val"):
			self.midi_note_ch_0_val_99.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_99, "prev_press_time"):
			self.midi_note_ch_0_val_99.prev_press_time = time.time()
		self.pick_brain(self.aux_id_92)
		self.midi_note_ch_0_val_99.pre_val = value
		self.midi_note_ch_0_val_99.prev_press_time = time.time()
	def midi_note_ch_0_val_16_mode4_listener(self, value):
		self.midi_note_ch_0_val_16.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_16, "pre_val"):
			self.midi_note_ch_0_val_16.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_16, "prev_press_time"):
			self.midi_note_ch_0_val_16.prev_press_time = time.time()
		self.pick_brain(self.mute_1_id_95)
		self.midi_note_ch_0_val_16.pre_val = value
		self.midi_note_ch_0_val_16.prev_press_time = time.time()
	def midi_note_ch_0_val_8_mode4_listener(self, value):
		self.midi_note_ch_0_val_8.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_8, "pre_val"):
			self.midi_note_ch_0_val_8.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_8, "prev_press_time"):
			self.midi_note_ch_0_val_8.prev_press_time = time.time()
		self.pick_brain(self.solo_1_id_96)
		self.midi_note_ch_0_val_8.pre_val = value
		self.midi_note_ch_0_val_8.prev_press_time = time.time()
	def midi_note_ch_0_val_17_mode4_listener(self, value):
		self.midi_note_ch_0_val_17.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_17, "pre_val"):
			self.midi_note_ch_0_val_17.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_17, "prev_press_time"):
			self.midi_note_ch_0_val_17.prev_press_time = time.time()
		self.pick_brain(self.mute_2_id_98)
		self.midi_note_ch_0_val_17.pre_val = value
		self.midi_note_ch_0_val_17.prev_press_time = time.time()
	def midi_note_ch_0_val_9_mode4_listener(self, value):
		self.midi_note_ch_0_val_9.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_9, "pre_val"):
			self.midi_note_ch_0_val_9.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_9, "prev_press_time"):
			self.midi_note_ch_0_val_9.prev_press_time = time.time()
		self.pick_brain(self.solo_2_id_99)
		self.midi_note_ch_0_val_9.pre_val = value
		self.midi_note_ch_0_val_9.prev_press_time = time.time()
	def midi_note_ch_0_val_18_mode4_listener(self, value):
		self.midi_note_ch_0_val_18.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_18, "pre_val"):
			self.midi_note_ch_0_val_18.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_18, "prev_press_time"):
			self.midi_note_ch_0_val_18.prev_press_time = time.time()
		self.pick_brain(self.mute_3_id_101)
		self.midi_note_ch_0_val_18.pre_val = value
		self.midi_note_ch_0_val_18.prev_press_time = time.time()
	def midi_note_ch_0_val_10_mode4_listener(self, value):
		self.midi_note_ch_0_val_10.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_10, "pre_val"):
			self.midi_note_ch_0_val_10.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_10, "prev_press_time"):
			self.midi_note_ch_0_val_10.prev_press_time = time.time()
		self.pick_brain(self.solo_3_id_102)
		self.midi_note_ch_0_val_10.pre_val = value
		self.midi_note_ch_0_val_10.prev_press_time = time.time()
	def midi_note_ch_0_val_19_mode4_listener(self, value):
		self.midi_note_ch_0_val_19.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_19, "pre_val"):
			self.midi_note_ch_0_val_19.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_19, "prev_press_time"):
			self.midi_note_ch_0_val_19.prev_press_time = time.time()
		self.pick_brain(self.mute_4_id_104)
		self.midi_note_ch_0_val_19.pre_val = value
		self.midi_note_ch_0_val_19.prev_press_time = time.time()
	def midi_note_ch_0_val_11_mode4_listener(self, value):
		self.midi_note_ch_0_val_11.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_11, "pre_val"):
			self.midi_note_ch_0_val_11.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_11, "prev_press_time"):
			self.midi_note_ch_0_val_11.prev_press_time = time.time()
		self.pick_brain(self.solo_4_id_105)
		self.midi_note_ch_0_val_11.pre_val = value
		self.midi_note_ch_0_val_11.prev_press_time = time.time()
	def midi_note_ch_0_val_20_mode4_listener(self, value):
		self.midi_note_ch_0_val_20.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_20, "pre_val"):
			self.midi_note_ch_0_val_20.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_20, "prev_press_time"):
			self.midi_note_ch_0_val_20.prev_press_time = time.time()
		self.pick_brain(self.mute_5_id_107)
		self.midi_note_ch_0_val_20.pre_val = value
		self.midi_note_ch_0_val_20.prev_press_time = time.time()
	def midi_note_ch_0_val_12_mode4_listener(self, value):
		self.midi_note_ch_0_val_12.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_12, "pre_val"):
			self.midi_note_ch_0_val_12.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_12, "prev_press_time"):
			self.midi_note_ch_0_val_12.prev_press_time = time.time()
		self.pick_brain(self.solo_5_id_108)
		self.midi_note_ch_0_val_12.pre_val = value
		self.midi_note_ch_0_val_12.prev_press_time = time.time()
	def midi_note_ch_0_val_21_mode4_listener(self, value):
		self.midi_note_ch_0_val_21.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_21, "pre_val"):
			self.midi_note_ch_0_val_21.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_21, "prev_press_time"):
			self.midi_note_ch_0_val_21.prev_press_time = time.time()
		self.pick_brain(self.mute_6_id_110)
		self.midi_note_ch_0_val_21.pre_val = value
		self.midi_note_ch_0_val_21.prev_press_time = time.time()
	def midi_note_ch_0_val_13_mode4_listener(self, value):
		self.midi_note_ch_0_val_13.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_13, "pre_val"):
			self.midi_note_ch_0_val_13.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_13, "prev_press_time"):
			self.midi_note_ch_0_val_13.prev_press_time = time.time()
		self.pick_brain(self.solo_6_id_111)
		self.midi_note_ch_0_val_13.pre_val = value
		self.midi_note_ch_0_val_13.prev_press_time = time.time()
	def midi_note_ch_0_val_22_mode4_listener(self, value):
		self.midi_note_ch_0_val_22.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_22, "pre_val"):
			self.midi_note_ch_0_val_22.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_22, "prev_press_time"):
			self.midi_note_ch_0_val_22.prev_press_time = time.time()
		self.pick_brain(self.mute_7_id_113)
		self.midi_note_ch_0_val_22.pre_val = value
		self.midi_note_ch_0_val_22.prev_press_time = time.time()
	def midi_note_ch_0_val_14_mode4_listener(self, value):
		self.midi_note_ch_0_val_14.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_14, "pre_val"):
			self.midi_note_ch_0_val_14.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_14, "prev_press_time"):
			self.midi_note_ch_0_val_14.prev_press_time = time.time()
		self.pick_brain(self.solo_7_id_114)
		self.midi_note_ch_0_val_14.pre_val = value
		self.midi_note_ch_0_val_14.prev_press_time = time.time()
	def midi_note_ch_0_val_23_mode4_listener(self, value):
		self.midi_note_ch_0_val_23.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_23, "pre_val"):
			self.midi_note_ch_0_val_23.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_23, "prev_press_time"):
			self.midi_note_ch_0_val_23.prev_press_time = time.time()
		self.pick_brain(self.mute_8_id_116)
		self.midi_note_ch_0_val_23.pre_val = value
		self.midi_note_ch_0_val_23.prev_press_time = time.time()
	def midi_note_ch_0_val_15_mode4_listener(self, value):
		self.midi_note_ch_0_val_15.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_15, "pre_val"):
			self.midi_note_ch_0_val_15.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_15, "prev_press_time"):
			self.midi_note_ch_0_val_15.prev_press_time = time.time()
		self.pick_brain(self.solo_8_id_117)
		self.midi_note_ch_0_val_15.pre_val = value
		self.midi_note_ch_0_val_15.prev_press_time = time.time()
	def midi_note_ch_0_val_94_mode4_listener(self, value):
		self.midi_note_ch_0_val_94.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_94, "pre_val"):
			self.midi_note_ch_0_val_94.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_94, "prev_press_time"):
			self.midi_note_ch_0_val_94.prev_press_time = time.time()
		self.pick_brain(self.play_1_id_127)
		self.midi_note_ch_0_val_94.pre_val = value
		self.midi_note_ch_0_val_94.prev_press_time = time.time()
	def midi_note_ch_0_val_93_mode4_listener(self, value):
		self.midi_note_ch_0_val_93.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_93, "pre_val"):
			self.midi_note_ch_0_val_93.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_93, "prev_press_time"):
			self.midi_note_ch_0_val_93.prev_press_time = time.time()
		self.pick_brain(self.stop_1_id_128)
		self.midi_note_ch_0_val_93.pre_val = value
		self.midi_note_ch_0_val_93.prev_press_time = time.time()
	def midi_note_ch_0_val_91_mode4_listener(self, value):
		self.midi_note_ch_0_val_91.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_91, "pre_val"):
			self.midi_note_ch_0_val_91.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_91, "prev_press_time"):
			self.midi_note_ch_0_val_91.prev_press_time = time.time()
		self.pick_brain(self.undo_1_id_130)
		self.midi_note_ch_0_val_91.pre_val = value
		self.midi_note_ch_0_val_91.prev_press_time = time.time()
	def midi_note_ch_0_val_98_mode4_listener(self, value):
		self.midi_note_ch_0_val_98.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_98, "pre_val"):
			self.midi_note_ch_0_val_98.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_98, "prev_press_time"):
			self.midi_note_ch_0_val_98.prev_press_time = time.time()
		self.pick_brain(self.pan_id_135)
		self.midi_note_ch_0_val_98.pre_val = value
		self.midi_note_ch_0_val_98.prev_press_time = time.time()
	def midi_note_ch_0_val_99_mode4_listener(self, value):
		self.midi_note_ch_0_val_99.cur_val = value 
		if not hasattr(self.midi_note_ch_0_val_99, "pre_val"):
			self.midi_note_ch_0_val_99.pre_val = None
		if not hasattr(self.midi_note_ch_0_val_99, "prev_press_time"):
			self.midi_note_ch_0_val_99.prev_press_time = time.time()
		self.pick_brain(self.aux_id_136)
		self.midi_note_ch_0_val_99.pre_val = value
		self.midi_note_ch_0_val_99.prev_press_time = time.time()
	def midi_cc_ch_0_val_16_mode49_listener(self, value):
		self.midi_cc_ch_0_val_16.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_16, "pre_val"):
			self.midi_cc_ch_0_val_16.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_16, "prev_press_time"):
			self.midi_cc_ch_0_val_16.prev_press_time = time.time()
		self.pick_brain(self.pan_1_id_137)
		self.midi_cc_ch_0_val_16.pre_val = value
		self.midi_cc_ch_0_val_16.prev_press_time = time.time()
	def midi_cc_ch_0_val_17_mode49_listener(self, value):
		self.midi_cc_ch_0_val_17.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_17, "pre_val"):
			self.midi_cc_ch_0_val_17.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_17, "prev_press_time"):
			self.midi_cc_ch_0_val_17.prev_press_time = time.time()
		self.pick_brain(self.pan_1_copy_251_id_251)
		self.midi_cc_ch_0_val_17.pre_val = value
		self.midi_cc_ch_0_val_17.prev_press_time = time.time()
	def midi_cc_ch_0_val_18_mode49_listener(self, value):
		self.midi_cc_ch_0_val_18.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_18, "pre_val"):
			self.midi_cc_ch_0_val_18.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_18, "prev_press_time"):
			self.midi_cc_ch_0_val_18.prev_press_time = time.time()
		self.pick_brain(self.pan_3_id_139)
		self.midi_cc_ch_0_val_18.pre_val = value
		self.midi_cc_ch_0_val_18.prev_press_time = time.time()
	def midi_cc_ch_0_val_19_mode49_listener(self, value):
		self.midi_cc_ch_0_val_19.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_19, "pre_val"):
			self.midi_cc_ch_0_val_19.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_19, "prev_press_time"):
			self.midi_cc_ch_0_val_19.prev_press_time = time.time()
		self.pick_brain(self.pan_4_id_140)
		self.midi_cc_ch_0_val_19.pre_val = value
		self.midi_cc_ch_0_val_19.prev_press_time = time.time()
	def midi_cc_ch_0_val_20_mode49_listener(self, value):
		self.midi_cc_ch_0_val_20.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_20, "pre_val"):
			self.midi_cc_ch_0_val_20.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_20, "prev_press_time"):
			self.midi_cc_ch_0_val_20.prev_press_time = time.time()
		self.pick_brain(self.pan_5_id_141)
		self.midi_cc_ch_0_val_20.pre_val = value
		self.midi_cc_ch_0_val_20.prev_press_time = time.time()
	def midi_cc_ch_0_val_21_mode49_listener(self, value):
		self.midi_cc_ch_0_val_21.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_21, "pre_val"):
			self.midi_cc_ch_0_val_21.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_21, "prev_press_time"):
			self.midi_cc_ch_0_val_21.prev_press_time = time.time()
		self.pick_brain(self.pan_6_id_142)
		self.midi_cc_ch_0_val_21.pre_val = value
		self.midi_cc_ch_0_val_21.prev_press_time = time.time()
	def midi_cc_ch_0_val_22_mode49_listener(self, value):
		self.midi_cc_ch_0_val_22.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_22, "pre_val"):
			self.midi_cc_ch_0_val_22.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_22, "prev_press_time"):
			self.midi_cc_ch_0_val_22.prev_press_time = time.time()
		self.pick_brain(self.pan_7_id_143)
		self.midi_cc_ch_0_val_22.pre_val = value
		self.midi_cc_ch_0_val_22.prev_press_time = time.time()
	def midi_cc_ch_0_val_23_mode49_listener(self, value):
		self.midi_cc_ch_0_val_23.cur_val = value 
		if not hasattr(self.midi_cc_ch_0_val_23, "pre_val"):
			self.midi_cc_ch_0_val_23.pre_val = None
		if not hasattr(self.midi_cc_ch_0_val_23, "prev_press_time"):
			self.midi_cc_ch_0_val_23.prev_press_time = time.time()
		self.pick_brain(self.pan_8_id_144)
		self.midi_cc_ch_0_val_23.pre_val = value
		self.midi_cc_ch_0_val_23.prev_press_time = time.time()
	def _mode1_configs(self):
		self.mode_1_configs_map = [
			"new_session_record_mapping_id_353",
			"change_drum1_id_351",
			"change_drum1_copy_352_id_352",
			"new_session_box_navigation_mapping_id_348",
			"new_session_box_navigation_mapping_copy_349_id_349",
			"new_redo_mapping_id_346",
			"new_parameter_mapping_id_296",
			"new_parameter_mapping_copy_300_id_300",
			"new_parameter_mapping_copy_298_id_298",
			"new_parameter_mapping_copy_298_copy_302_id_302",
			"new_parameter_mapping_copy_297_id_297",
			"new_parameter_mapping_copy_297_copy_301_id_301",
			"new_parameter_mapping_copy_297_copy_299_id_299",
			"new_parameter_mapping_copy_297_copy_299_copy_303_id_303",
			"new_arm_mapping_copy_355_id_355",
			"new_arm_mapping_copy_271_copy_359_id_359",
			"new_arm_mapping_copy_363_id_363",
			"new_arm_mapping_copy_270_copy_367_id_367",
			"new_arm_mapping_copy_267_copy_371_id_371",
			"new_arm_mapping_copy_267_copy_269_copy_375_id_375",
			"new_arm_mapping_copy_266_copy_379_id_379",
			"new_arm_mapping_copy_266_copy_268_copy_383_id_383",
			"new_session_box_navigation_mapping_id_252",
			"new_session_box_navigation_mapping_copy_263_id_263",
			"new_session_box_navigation_mapping_copy_259_id_259",
			"volume_1_id_7",
			"volume_1_id_9",
			"volume_1_id_11",
			"volume_1_id_13",
			"volume_1_id_15",
			"volume_1_id_17",
			"volume_1_id_19",
			"volume_1_id_21",
			"mute_1_id_22",
			"mute_2_id_24",
			"mute_3_id_26",
			"mute_4_id_28",
			"mute_5_id_30",
			"mute_6_id_32",
			"mute_7_id_34",
			"mute_8_id_36",
			"play_1_id_39",
			"stop_1_id_40",
			"undo_1_id_42",
			"pan_id_47",
			"aux_id_48"]
		self.new_session_record_mapping_id_353 = {}
		self.new_session_record_mapping_id_353["attached_to"] = "midi_note_ch_0_val_15"
		self.new_session_record_mapping_id_353["module"] = "self.song()"
		self.new_session_record_mapping_id_353["element"] = "session_record"
		self.new_session_record_mapping_id_353["output_type"] = "bool"
		self.new_session_record_mapping_id_353["ui_listener"] = "session_record"
		self.new_session_record_mapping_id_353["feedback_brain"] = "feedback_bool"
		self.new_session_record_mapping_id_353["ctrl_type"] = "on/off"
		self.new_session_record_mapping_id_353["enc_first"] = 127
		self.new_session_record_mapping_id_353["enc_second"] = 0
		self.new_session_record_mapping_id_353["switch_type"] = "momentary"
		self.new_session_record_mapping_id_353["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_record_mapping_id_353["LED_feedback"] = "default"
		self.new_session_record_mapping_id_353["LED_feedback_active"] = "1"
		self.new_session_record_mapping_id_353["LED_on"] = "127"
		self.new_session_record_mapping_id_353["LED_off"] = "0"
		self.new_session_record_mapping_id_353["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_15"]
		self.new_session_record_mapping_id_353["json_id"] = 353
		self.new_session_record_mapping_id_353["mapping_name"] = "New Session Record mapping "
		self.new_session_record_mapping_id_353["mapping_type"] = "Session Record"
		self.change_drum1_id_351 = {}
		self.change_drum1_id_351["attached_to"] = "midi_note_ch_0_val_13"
		self.change_drum1_id_351["track"] = self.track_num(2)
		self.change_drum1_id_351["module"] = "self.song().tracks[0]"
		self.change_drum1_id_351["element"] = "mute"
		self.change_drum1_id_351["output_type"] = "bool"
		self.change_drum1_id_351["ui_listener"] = "mute"
		self.change_drum1_id_351["feedback_brain"] = "feedback_bool"
		self.change_drum1_id_351["ctrl_type"] = "on/off"
		self.change_drum1_id_351["enc_first"] = 127
		self.change_drum1_id_351["enc_second"] = 0
		self.change_drum1_id_351["switch_type"] = "momentary"
		self.change_drum1_id_351["LED_mapping_type_needs_feedback"] = "1"
		self.change_drum1_id_351["LED_feedback"] = "default"
		self.change_drum1_id_351["LED_feedback_active"] = "1"
		self.change_drum1_id_351["LED_on"] = "127"
		self.change_drum1_id_351["LED_off"] = "0"
		self.change_drum1_id_351["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_13"]
		self.change_drum1_id_351["json_id"] = 351
		self.change_drum1_id_351["mapping_name"] = "change drum1"
		self.change_drum1_id_351["mapping_type"] = "Mute"
		self.change_drum1_copy_352_id_352 = {}
		self.change_drum1_copy_352_id_352["attached_to"] = "midi_note_ch_0_val_13"
		self.change_drum1_copy_352_id_352["track"] = self.track_num(2)
		self.change_drum1_copy_352_id_352["module"] = "self.song().tracks[7]"
		self.change_drum1_copy_352_id_352["element"] = "mute"
		self.change_drum1_copy_352_id_352["output_type"] = "bool"
		self.change_drum1_copy_352_id_352["ui_listener"] = "mute"
		self.change_drum1_copy_352_id_352["feedback_brain"] = "feedback_bool"
		self.change_drum1_copy_352_id_352["ctrl_type"] = "on/off"
		self.change_drum1_copy_352_id_352["enc_first"] = 127
		self.change_drum1_copy_352_id_352["enc_second"] = 0
		self.change_drum1_copy_352_id_352["switch_type"] = "momentary"
		self.change_drum1_copy_352_id_352["LED_mapping_type_needs_feedback"] = "1"
		self.change_drum1_copy_352_id_352["LED_feedback"] = "default"
		self.change_drum1_copy_352_id_352["LED_feedback_active"] = "1"
		self.change_drum1_copy_352_id_352["LED_on"] = "127"
		self.change_drum1_copy_352_id_352["LED_off"] = "0"
		self.change_drum1_copy_352_id_352["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_13"]
		self.change_drum1_copy_352_id_352["json_id"] = 352
		self.change_drum1_copy_352_id_352["mapping_name"] = "change drum1 copy 352"
		self.change_drum1_copy_352_id_352["mapping_type"] = "Mute"
		self.new_session_box_navigation_mapping_id_348 = {}
		self.new_session_box_navigation_mapping_id_348["attached_to"] = "midi_note_ch_0_val_10"
		self.new_session_box_navigation_mapping_id_348["module"] = "self"
		self.new_session_box_navigation_mapping_id_348["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_id_348["output_type"] = "func"
		self.new_session_box_navigation_mapping_id_348["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_id_348["tracks_scenes"] = "scenes"
		self.new_session_box_navigation_mapping_id_348["highlight_number"] = 0
		self.new_session_box_navigation_mapping_id_348["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_id_348["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_id_348["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_id_348["enc_first"] = 127
		self.new_session_box_navigation_mapping_id_348["enc_second"] = 0
		self.new_session_box_navigation_mapping_id_348["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_id_348["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_id_348["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_id_348["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_id_348["LED_on"] = "127"
		self.new_session_box_navigation_mapping_id_348["LED_off"] = "0"
		self.new_session_box_navigation_mapping_id_348["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_10"]
		self.new_session_box_navigation_mapping_id_348["json_id"] = 348
		self.new_session_box_navigation_mapping_id_348["mapping_name"] = "New Session Box Navigation mapping "
		self.new_session_box_navigation_mapping_id_348["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_349_id_349 = {}
		self.new_session_box_navigation_mapping_copy_349_id_349["attached_to"] = "midi_note_ch_0_val_11"
		self.new_session_box_navigation_mapping_copy_349_id_349["module"] = "self"
		self.new_session_box_navigation_mapping_copy_349_id_349["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_349_id_349["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_349_id_349["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_349_id_349["tracks_scenes"] = "scenes"
		self.new_session_box_navigation_mapping_copy_349_id_349["highlight_number"] = 7
		self.new_session_box_navigation_mapping_copy_349_id_349["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_349_id_349["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_349_id_349["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_349_id_349["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_349_id_349["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_349_id_349["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_349_id_349["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_349_id_349["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_349_id_349["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_349_id_349["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_349_id_349["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_349_id_349["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_11"]
		self.new_session_box_navigation_mapping_copy_349_id_349["json_id"] = 349
		self.new_session_box_navigation_mapping_copy_349_id_349["mapping_name"] = "New Session Box Navigation mapping  copy 349"
		self.new_session_box_navigation_mapping_copy_349_id_349["mapping_type"] = "Session Box Navigation"
		self.new_redo_mapping_id_346 = {}
		self.new_redo_mapping_id_346["attached_to"] = "midi_note_ch_0_val_12"
		self.new_redo_mapping_id_346["module"] = "self.song()"
		self.new_redo_mapping_id_346["element"] = "redo"
		self.new_redo_mapping_id_346["output_type"] = "func"
		self.new_redo_mapping_id_346["func_arg"] = ""
		self.new_redo_mapping_id_346["ctrl_type"] = "on/off"
		self.new_redo_mapping_id_346["enc_first"] = 127
		self.new_redo_mapping_id_346["enc_second"] = 0
		self.new_redo_mapping_id_346["switch_type"] = "momentary"
		self.new_redo_mapping_id_346["json_id"] = 346
		self.new_redo_mapping_id_346["mapping_name"] = "New Redo mapping "
		self.new_redo_mapping_id_346["mapping_type"] = "Redo"
		self.new_parameter_mapping_id_296 = {}
		self.new_parameter_mapping_id_296["attached_to"] = "midi_cc_ch_0_val_0"
		self.new_parameter_mapping_id_296["track"] = self.track_num(2)
		self.new_parameter_mapping_id_296["module"] = "self.relative_tracks_dict[0].devices[0].parameters[1]"
		self.new_parameter_mapping_id_296["element"] = "value"
		self.new_parameter_mapping_id_296["output_type"] = "val"
		self.new_parameter_mapping_id_296["minimum"] = round(0,2)
		self.new_parameter_mapping_id_296["maximum"] = round(100,2)
		self.new_parameter_mapping_id_296["decimal_places"] = 2
		self.new_parameter_mapping_id_296["ui_listener"] = "value"
		self.new_parameter_mapping_id_296["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_id_296["ctrl_type"] = "absolute"
		self.new_parameter_mapping_id_296["enc_first"] = 0
		self.new_parameter_mapping_id_296["enc_second"] = 127
		self.new_parameter_mapping_id_296["reverse_mode"] = False
		self.new_parameter_mapping_id_296["takeover_mode"] = "None"
		self.new_parameter_mapping_id_296["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_id_296["LED_feedback"] = "default"
		self.new_parameter_mapping_id_296["LED_feedback_active"] = "1"
		self.new_parameter_mapping_id_296["LED_on"] = "127"
		self.new_parameter_mapping_id_296["LED_off"] = "0"
		self.new_parameter_mapping_id_296["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_0"]
		self.new_parameter_mapping_id_296["snap_to"] = True
		self.new_parameter_mapping_id_296["json_id"] = 296
		self.new_parameter_mapping_id_296["mapping_name"] = "New Parameter mapping "
		self.new_parameter_mapping_id_296["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_300_id_300 = {}
		self.new_parameter_mapping_copy_300_id_300["attached_to"] = "midi_cc_ch_1_val_0"
		self.new_parameter_mapping_copy_300_id_300["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_300_id_300["module"] = "self.relative_tracks_dict[0].devices[0].parameters[2]"
		self.new_parameter_mapping_copy_300_id_300["element"] = "value"
		self.new_parameter_mapping_copy_300_id_300["output_type"] = "val"
		self.new_parameter_mapping_copy_300_id_300["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_300_id_300["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_300_id_300["decimal_places"] = 2
		self.new_parameter_mapping_copy_300_id_300["ui_listener"] = "value"
		self.new_parameter_mapping_copy_300_id_300["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_300_id_300["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_300_id_300["enc_first"] = 0
		self.new_parameter_mapping_copy_300_id_300["enc_second"] = 127
		self.new_parameter_mapping_copy_300_id_300["reverse_mode"] = False
		self.new_parameter_mapping_copy_300_id_300["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_300_id_300["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_300_id_300["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_300_id_300["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_300_id_300["LED_on"] = "127"
		self.new_parameter_mapping_copy_300_id_300["LED_off"] = "0"
		self.new_parameter_mapping_copy_300_id_300["LED_send_feedback_to_selected"] = ["midi_cc_ch_1_val_0"]
		self.new_parameter_mapping_copy_300_id_300["snap_to"] = True
		self.new_parameter_mapping_copy_300_id_300["json_id"] = 300
		self.new_parameter_mapping_copy_300_id_300["mapping_name"] = "New Parameter mapping  copy 300"
		self.new_parameter_mapping_copy_300_id_300["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_298_id_298 = {}
		self.new_parameter_mapping_copy_298_id_298["attached_to"] = "midi_cc_ch_2_val_0"
		self.new_parameter_mapping_copy_298_id_298["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_298_id_298["module"] = "self.relative_tracks_dict[0].devices[0].parameters[3]"
		self.new_parameter_mapping_copy_298_id_298["element"] = "value"
		self.new_parameter_mapping_copy_298_id_298["output_type"] = "val"
		self.new_parameter_mapping_copy_298_id_298["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_298_id_298["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_298_id_298["decimal_places"] = 2
		self.new_parameter_mapping_copy_298_id_298["ui_listener"] = "value"
		self.new_parameter_mapping_copy_298_id_298["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_298_id_298["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_298_id_298["enc_first"] = 0
		self.new_parameter_mapping_copy_298_id_298["enc_second"] = 127
		self.new_parameter_mapping_copy_298_id_298["reverse_mode"] = False
		self.new_parameter_mapping_copy_298_id_298["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_298_id_298["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_298_id_298["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_298_id_298["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_298_id_298["LED_on"] = "127"
		self.new_parameter_mapping_copy_298_id_298["LED_off"] = "0"
		self.new_parameter_mapping_copy_298_id_298["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_0"]
		self.new_parameter_mapping_copy_298_id_298["snap_to"] = True
		self.new_parameter_mapping_copy_298_id_298["json_id"] = 298
		self.new_parameter_mapping_copy_298_id_298["mapping_name"] = "New Parameter mapping  copy 298"
		self.new_parameter_mapping_copy_298_id_298["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_298_copy_302_id_302 = {}
		self.new_parameter_mapping_copy_298_copy_302_id_302["attached_to"] = "midi_cc_ch_3_val_0"
		self.new_parameter_mapping_copy_298_copy_302_id_302["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_298_copy_302_id_302["module"] = "self.relative_tracks_dict[0].devices[0].parameters[4]"
		self.new_parameter_mapping_copy_298_copy_302_id_302["element"] = "value"
		self.new_parameter_mapping_copy_298_copy_302_id_302["output_type"] = "val"
		self.new_parameter_mapping_copy_298_copy_302_id_302["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_298_copy_302_id_302["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_298_copy_302_id_302["decimal_places"] = 2
		self.new_parameter_mapping_copy_298_copy_302_id_302["ui_listener"] = "value"
		self.new_parameter_mapping_copy_298_copy_302_id_302["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_298_copy_302_id_302["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_298_copy_302_id_302["enc_first"] = 0
		self.new_parameter_mapping_copy_298_copy_302_id_302["enc_second"] = 127
		self.new_parameter_mapping_copy_298_copy_302_id_302["reverse_mode"] = False
		self.new_parameter_mapping_copy_298_copy_302_id_302["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_298_copy_302_id_302["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_298_copy_302_id_302["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_298_copy_302_id_302["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_298_copy_302_id_302["LED_on"] = "127"
		self.new_parameter_mapping_copy_298_copy_302_id_302["LED_off"] = "0"
		self.new_parameter_mapping_copy_298_copy_302_id_302["LED_send_feedback_to_selected"] = ["midi_cc_ch_3_val_0"]
		self.new_parameter_mapping_copy_298_copy_302_id_302["snap_to"] = True
		self.new_parameter_mapping_copy_298_copy_302_id_302["json_id"] = 302
		self.new_parameter_mapping_copy_298_copy_302_id_302["mapping_name"] = "New Parameter mapping  copy 298 copy 302"
		self.new_parameter_mapping_copy_298_copy_302_id_302["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_id_297 = {}
		self.new_parameter_mapping_copy_297_id_297["attached_to"] = "midi_cc_ch_4_val_0"
		self.new_parameter_mapping_copy_297_id_297["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_id_297["module"] = "self.relative_tracks_dict[0].devices[0].parameters[5]"
		self.new_parameter_mapping_copy_297_id_297["element"] = "value"
		self.new_parameter_mapping_copy_297_id_297["output_type"] = "val"
		self.new_parameter_mapping_copy_297_id_297["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_id_297["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_id_297["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_id_297["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_id_297["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_id_297["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_id_297["enc_first"] = 0
		self.new_parameter_mapping_copy_297_id_297["enc_second"] = 127
		self.new_parameter_mapping_copy_297_id_297["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_id_297["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_id_297["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_id_297["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_id_297["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_id_297["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_id_297["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_id_297["LED_send_feedback_to_selected"] = ["midi_cc_ch_4_val_0"]
		self.new_parameter_mapping_copy_297_id_297["snap_to"] = True
		self.new_parameter_mapping_copy_297_id_297["json_id"] = 297
		self.new_parameter_mapping_copy_297_id_297["mapping_name"] = "New Parameter mapping  copy 297"
		self.new_parameter_mapping_copy_297_id_297["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_301_id_301 = {}
		self.new_parameter_mapping_copy_297_copy_301_id_301["attached_to"] = "midi_cc_ch_5_val_0"
		self.new_parameter_mapping_copy_297_copy_301_id_301["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_301_id_301["module"] = "self.relative_tracks_dict[0].devices[0].parameters[6]"
		self.new_parameter_mapping_copy_297_copy_301_id_301["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_301_id_301["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_301_id_301["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_301_id_301["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_301_id_301["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_301_id_301["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_301_id_301["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_301_id_301["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_301_id_301["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_301_id_301["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_301_id_301["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_301_id_301["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_301_id_301["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_301_id_301["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_301_id_301["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_301_id_301["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_301_id_301["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_301_id_301["LED_send_feedback_to_selected"] = ["midi_cc_ch_5_val_0"]
		self.new_parameter_mapping_copy_297_copy_301_id_301["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_301_id_301["json_id"] = 301
		self.new_parameter_mapping_copy_297_copy_301_id_301["mapping_name"] = "New Parameter mapping  copy 297 copy 301"
		self.new_parameter_mapping_copy_297_copy_301_id_301["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_299_id_299 = {}
		self.new_parameter_mapping_copy_297_copy_299_id_299["attached_to"] = "midi_cc_ch_6_val_0"
		self.new_parameter_mapping_copy_297_copy_299_id_299["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_299_id_299["module"] = "self.relative_tracks_dict[0].devices[0].parameters[7]"
		self.new_parameter_mapping_copy_297_copy_299_id_299["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_id_299["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_299_id_299["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_299_id_299["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_299_id_299["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_299_id_299["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_id_299["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_299_id_299["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_299_id_299["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_299_id_299["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_299_id_299["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_299_id_299["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_299_id_299["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_id_299["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_299_id_299["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_id_299["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_299_id_299["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_299_id_299["LED_send_feedback_to_selected"] = ["midi_cc_ch_6_val_0"]
		self.new_parameter_mapping_copy_297_copy_299_id_299["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_299_id_299["json_id"] = 299
		self.new_parameter_mapping_copy_297_copy_299_id_299["mapping_name"] = "New Parameter mapping  copy 297 copy 299"
		self.new_parameter_mapping_copy_297_copy_299_id_299["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303 = {}
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["attached_to"] = "midi_cc_ch_7_val_0"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["module"] = "self.relative_tracks_dict[0].devices[0].parameters[8]"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["LED_send_feedback_to_selected"] = ["midi_cc_ch_7_val_0"]
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["json_id"] = 303
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["mapping_name"] = "New Parameter mapping  copy 297 copy 299 copy 303"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["mapping_type"] = "Parameter"
		self.new_arm_mapping_copy_355_id_355 = {}
		self.new_arm_mapping_copy_355_id_355["attached_to"] = "midi_note_ch_0_val_4"
		self.new_arm_mapping_copy_355_id_355["track"] = self.track_num(2)
		self.new_arm_mapping_copy_355_id_355["module"] = "self.relative_tracks_dict[4]"
		self.new_arm_mapping_copy_355_id_355["element"] = "arm"
		self.new_arm_mapping_copy_355_id_355["output_type"] = "bool"
		self.new_arm_mapping_copy_355_id_355["ui_listener"] = "arm"
		self.new_arm_mapping_copy_355_id_355["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_355_id_355["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_355_id_355["enc_first"] = 127
		self.new_arm_mapping_copy_355_id_355["enc_second"] = 0
		self.new_arm_mapping_copy_355_id_355["switch_type"] = "momentary"
		self.new_arm_mapping_copy_355_id_355["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_355_id_355["LED_feedback"] = "default"
		self.new_arm_mapping_copy_355_id_355["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_355_id_355["LED_on"] = "127"
		self.new_arm_mapping_copy_355_id_355["LED_off"] = "0"
		self.new_arm_mapping_copy_355_id_355["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_4"]
		self.new_arm_mapping_copy_355_id_355["json_id"] = 355
		self.new_arm_mapping_copy_355_id_355["mapping_name"] = "New Arm mapping  copy 355"
		self.new_arm_mapping_copy_355_id_355["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_271_copy_359_id_359 = {}
		self.new_arm_mapping_copy_271_copy_359_id_359["attached_to"] = "midi_note_ch_0_val_1"
		self.new_arm_mapping_copy_271_copy_359_id_359["track"] = self.track_num(2)
		self.new_arm_mapping_copy_271_copy_359_id_359["module"] = "self.relative_tracks_dict[1]"
		self.new_arm_mapping_copy_271_copy_359_id_359["element"] = "arm"
		self.new_arm_mapping_copy_271_copy_359_id_359["output_type"] = "bool"
		self.new_arm_mapping_copy_271_copy_359_id_359["ui_listener"] = "arm"
		self.new_arm_mapping_copy_271_copy_359_id_359["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_271_copy_359_id_359["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_271_copy_359_id_359["enc_first"] = 127
		self.new_arm_mapping_copy_271_copy_359_id_359["enc_second"] = 0
		self.new_arm_mapping_copy_271_copy_359_id_359["switch_type"] = "momentary"
		self.new_arm_mapping_copy_271_copy_359_id_359["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_271_copy_359_id_359["LED_feedback"] = "default"
		self.new_arm_mapping_copy_271_copy_359_id_359["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_271_copy_359_id_359["LED_on"] = "127"
		self.new_arm_mapping_copy_271_copy_359_id_359["LED_off"] = "0"
		self.new_arm_mapping_copy_271_copy_359_id_359["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_1"]
		self.new_arm_mapping_copy_271_copy_359_id_359["json_id"] = 359
		self.new_arm_mapping_copy_271_copy_359_id_359["mapping_name"] = "New Arm mapping  copy 271 copy 359"
		self.new_arm_mapping_copy_271_copy_359_id_359["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_363_id_363 = {}
		self.new_arm_mapping_copy_363_id_363["attached_to"] = "midi_note_ch_0_val_0"
		self.new_arm_mapping_copy_363_id_363["track"] = self.track_num(2)
		self.new_arm_mapping_copy_363_id_363["module"] = "self.relative_tracks_dict[0]"
		self.new_arm_mapping_copy_363_id_363["element"] = "arm"
		self.new_arm_mapping_copy_363_id_363["output_type"] = "bool"
		self.new_arm_mapping_copy_363_id_363["ui_listener"] = "arm"
		self.new_arm_mapping_copy_363_id_363["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_363_id_363["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_363_id_363["enc_first"] = 127
		self.new_arm_mapping_copy_363_id_363["enc_second"] = 0
		self.new_arm_mapping_copy_363_id_363["switch_type"] = "momentary"
		self.new_arm_mapping_copy_363_id_363["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_363_id_363["LED_feedback"] = "default"
		self.new_arm_mapping_copy_363_id_363["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_363_id_363["LED_on"] = "127"
		self.new_arm_mapping_copy_363_id_363["LED_off"] = "0"
		self.new_arm_mapping_copy_363_id_363["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_0"]
		self.new_arm_mapping_copy_363_id_363["json_id"] = 363
		self.new_arm_mapping_copy_363_id_363["mapping_name"] = "New Arm mapping  copy 363"
		self.new_arm_mapping_copy_363_id_363["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_270_copy_367_id_367 = {}
		self.new_arm_mapping_copy_270_copy_367_id_367["attached_to"] = "midi_note_ch_0_val_5"
		self.new_arm_mapping_copy_270_copy_367_id_367["track"] = self.track_num(2)
		self.new_arm_mapping_copy_270_copy_367_id_367["module"] = "self.relative_tracks_dict[5]"
		self.new_arm_mapping_copy_270_copy_367_id_367["element"] = "arm"
		self.new_arm_mapping_copy_270_copy_367_id_367["output_type"] = "bool"
		self.new_arm_mapping_copy_270_copy_367_id_367["ui_listener"] = "arm"
		self.new_arm_mapping_copy_270_copy_367_id_367["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_270_copy_367_id_367["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_270_copy_367_id_367["enc_first"] = 127
		self.new_arm_mapping_copy_270_copy_367_id_367["enc_second"] = 0
		self.new_arm_mapping_copy_270_copy_367_id_367["switch_type"] = "momentary"
		self.new_arm_mapping_copy_270_copy_367_id_367["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_270_copy_367_id_367["LED_feedback"] = "default"
		self.new_arm_mapping_copy_270_copy_367_id_367["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_270_copy_367_id_367["LED_on"] = "127"
		self.new_arm_mapping_copy_270_copy_367_id_367["LED_off"] = "0"
		self.new_arm_mapping_copy_270_copy_367_id_367["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_5"]
		self.new_arm_mapping_copy_270_copy_367_id_367["json_id"] = 367
		self.new_arm_mapping_copy_270_copy_367_id_367["mapping_name"] = "New Arm mapping  copy 270 copy 367"
		self.new_arm_mapping_copy_270_copy_367_id_367["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_267_copy_371_id_371 = {}
		self.new_arm_mapping_copy_267_copy_371_id_371["attached_to"] = "midi_note_ch_0_val_2"
		self.new_arm_mapping_copy_267_copy_371_id_371["track"] = self.track_num(2)
		self.new_arm_mapping_copy_267_copy_371_id_371["module"] = "self.relative_tracks_dict[2]"
		self.new_arm_mapping_copy_267_copy_371_id_371["element"] = "arm"
		self.new_arm_mapping_copy_267_copy_371_id_371["output_type"] = "bool"
		self.new_arm_mapping_copy_267_copy_371_id_371["ui_listener"] = "arm"
		self.new_arm_mapping_copy_267_copy_371_id_371["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_267_copy_371_id_371["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_267_copy_371_id_371["enc_first"] = 127
		self.new_arm_mapping_copy_267_copy_371_id_371["enc_second"] = 0
		self.new_arm_mapping_copy_267_copy_371_id_371["switch_type"] = "momentary"
		self.new_arm_mapping_copy_267_copy_371_id_371["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_267_copy_371_id_371["LED_feedback"] = "default"
		self.new_arm_mapping_copy_267_copy_371_id_371["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_267_copy_371_id_371["LED_on"] = "127"
		self.new_arm_mapping_copy_267_copy_371_id_371["LED_off"] = "0"
		self.new_arm_mapping_copy_267_copy_371_id_371["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_2"]
		self.new_arm_mapping_copy_267_copy_371_id_371["json_id"] = 371
		self.new_arm_mapping_copy_267_copy_371_id_371["mapping_name"] = "New Arm mapping  copy 267 copy 371"
		self.new_arm_mapping_copy_267_copy_371_id_371["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375 = {}
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["attached_to"] = "midi_note_ch_0_val_6"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["track"] = self.track_num(2)
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["module"] = "self.relative_tracks_dict[6]"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["element"] = "arm"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["output_type"] = "bool"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["ui_listener"] = "arm"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["enc_first"] = 127
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["enc_second"] = 0
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["switch_type"] = "momentary"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["LED_feedback"] = "default"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["LED_on"] = "127"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["LED_off"] = "0"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_6"]
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["json_id"] = 375
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["mapping_name"] = "New Arm mapping  copy 267 copy 269 copy 375"
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_266_copy_379_id_379 = {}
		self.new_arm_mapping_copy_266_copy_379_id_379["attached_to"] = "midi_note_ch_0_val_3"
		self.new_arm_mapping_copy_266_copy_379_id_379["track"] = self.track_num(2)
		self.new_arm_mapping_copy_266_copy_379_id_379["module"] = "self.relative_tracks_dict[3]"
		self.new_arm_mapping_copy_266_copy_379_id_379["element"] = "arm"
		self.new_arm_mapping_copy_266_copy_379_id_379["output_type"] = "bool"
		self.new_arm_mapping_copy_266_copy_379_id_379["ui_listener"] = "arm"
		self.new_arm_mapping_copy_266_copy_379_id_379["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_266_copy_379_id_379["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_266_copy_379_id_379["enc_first"] = 127
		self.new_arm_mapping_copy_266_copy_379_id_379["enc_second"] = 0
		self.new_arm_mapping_copy_266_copy_379_id_379["switch_type"] = "momentary"
		self.new_arm_mapping_copy_266_copy_379_id_379["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_266_copy_379_id_379["LED_feedback"] = "default"
		self.new_arm_mapping_copy_266_copy_379_id_379["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_266_copy_379_id_379["LED_on"] = "127"
		self.new_arm_mapping_copy_266_copy_379_id_379["LED_off"] = "0"
		self.new_arm_mapping_copy_266_copy_379_id_379["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_3"]
		self.new_arm_mapping_copy_266_copy_379_id_379["json_id"] = 379
		self.new_arm_mapping_copy_266_copy_379_id_379["mapping_name"] = "New Arm mapping  copy 266 copy 379"
		self.new_arm_mapping_copy_266_copy_379_id_379["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383 = {}
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["attached_to"] = "midi_note_ch_0_val_7"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["track"] = self.track_num(2)
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["module"] = "self.relative_tracks_dict[7]"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["element"] = "arm"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["output_type"] = "bool"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["ui_listener"] = "arm"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["enc_first"] = 127
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["enc_second"] = 0
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["switch_type"] = "momentary"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["LED_feedback"] = "default"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["LED_on"] = "127"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["LED_off"] = "0"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_7"]
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["json_id"] = 383
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["mapping_name"] = "New Arm mapping  copy 266 copy 268 copy 383"
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["mapping_type"] = "Arm"
		self.new_session_box_navigation_mapping_id_252 = {}
		self.new_session_box_navigation_mapping_id_252["attached_to"] = "midi_note_ch_0_val_92"
		self.new_session_box_navigation_mapping_id_252["module"] = "self"
		self.new_session_box_navigation_mapping_id_252["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_id_252["output_type"] = "func"
		self.new_session_box_navigation_mapping_id_252["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_id_252["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_id_252["highlight_number"] = 0
		self.new_session_box_navigation_mapping_id_252["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_id_252["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_id_252["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_id_252["enc_first"] = 127
		self.new_session_box_navigation_mapping_id_252["enc_second"] = 0
		self.new_session_box_navigation_mapping_id_252["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_id_252["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_id_252["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_id_252["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_id_252["LED_on"] = "127"
		self.new_session_box_navigation_mapping_id_252["LED_off"] = "0"
		self.new_session_box_navigation_mapping_id_252["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_92"]
		self.new_session_box_navigation_mapping_id_252["json_id"] = 252
		self.new_session_box_navigation_mapping_id_252["mapping_name"] = "New Session Box Navigation mapping "
		self.new_session_box_navigation_mapping_id_252["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_263_id_263 = {}
		self.new_session_box_navigation_mapping_copy_263_id_263["attached_to"] = "midi_note_ch_0_val_46"
		self.new_session_box_navigation_mapping_copy_263_id_263["module"] = "self"
		self.new_session_box_navigation_mapping_copy_263_id_263["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_263_id_263["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_263_id_263["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_263_id_263["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_263_id_263["highlight_number"] = 8
		self.new_session_box_navigation_mapping_copy_263_id_263["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_263_id_263["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_263_id_263["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_263_id_263["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_263_id_263["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_263_id_263["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_263_id_263["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_263_id_263["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_263_id_263["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_263_id_263["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_263_id_263["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_263_id_263["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_46"]
		self.new_session_box_navigation_mapping_copy_263_id_263["json_id"] = 263
		self.new_session_box_navigation_mapping_copy_263_id_263["mapping_name"] = "New Session Box Navigation mapping  copy 263"
		self.new_session_box_navigation_mapping_copy_263_id_263["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_259_id_259 = {}
		self.new_session_box_navigation_mapping_copy_259_id_259["attached_to"] = "midi_note_ch_0_val_47"
		self.new_session_box_navigation_mapping_copy_259_id_259["module"] = "self"
		self.new_session_box_navigation_mapping_copy_259_id_259["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_259_id_259["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_259_id_259["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_259_id_259["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_259_id_259["highlight_number"] = 16
		self.new_session_box_navigation_mapping_copy_259_id_259["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_259_id_259["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_259_id_259["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_259_id_259["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_259_id_259["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_259_id_259["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_259_id_259["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_259_id_259["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_259_id_259["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_259_id_259["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_259_id_259["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_259_id_259["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_47"]
		self.new_session_box_navigation_mapping_copy_259_id_259["json_id"] = 259
		self.new_session_box_navigation_mapping_copy_259_id_259["mapping_name"] = "New Session Box Navigation mapping  copy 259"
		self.new_session_box_navigation_mapping_copy_259_id_259["mapping_type"] = "Session Box Navigation"
		self.volume_1_id_7 = {}
		self.volume_1_id_7["attached_to"] = "midi_cc_ch_0_val_16"
		self.volume_1_id_7["track"] = self.track_num(2)
		self.volume_1_id_7["module"] = "self.relative_tracks_dict[0].mixer_device.volume"
		self.volume_1_id_7["element"] = "value"
		self.volume_1_id_7["output_type"] = "val"
		self.volume_1_id_7["minimum"] = round(0,2)
		self.volume_1_id_7["maximum"] = round(100,2)
		self.volume_1_id_7["decimal_places"] = 2
		self.volume_1_id_7["ui_listener"] = "value"
		self.volume_1_id_7["feedback_brain"] = "feedback_range"
		self.volume_1_id_7["ctrl_type"] = "relative"
		self.volume_1_id_7["enc_first"] = 65
		self.volume_1_id_7["enc_second"] = 1
		self.volume_1_id_7["steps"] = 127
		self.volume_1_id_7["LED_mapping_type_needs_feedback"] = "1"
		self.volume_1_id_7["LED_feedback"] = "default"
		self.volume_1_id_7["LED_feedback_active"] = "1"
		self.volume_1_id_7["LED_on"] = "127"
		self.volume_1_id_7["LED_off"] = "0"
		self.volume_1_id_7["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_16"]
		self.volume_1_id_7["snap_to"] = True
		self.volume_1_id_7["json_id"] = 7
		self.volume_1_id_7["mapping_name"] = "Volume 1"
		self.volume_1_id_7["mapping_type"] = "Volume"
		self.volume_1_id_7["parent_json_id"] = 6
		self.volume_1_id_7["parent_name"] = "pan_8_id_144"
		self.volume_1_id_9 = {}
		self.volume_1_id_9["attached_to"] = "midi_cc_ch_0_val_17"
		self.volume_1_id_9["track"] = self.track_num(2)
		self.volume_1_id_9["module"] = "self.relative_tracks_dict[1].mixer_device.volume"
		self.volume_1_id_9["element"] = "value"
		self.volume_1_id_9["output_type"] = "val"
		self.volume_1_id_9["minimum"] = round(0,2)
		self.volume_1_id_9["maximum"] = round(100,2)
		self.volume_1_id_9["decimal_places"] = 2
		self.volume_1_id_9["ui_listener"] = "value"
		self.volume_1_id_9["feedback_brain"] = "feedback_range"
		self.volume_1_id_9["ctrl_type"] = "relative"
		self.volume_1_id_9["enc_first"] = 65
		self.volume_1_id_9["enc_second"] = 1
		self.volume_1_id_9["steps"] = 127
		self.volume_1_id_9["LED_mapping_type_needs_feedback"] = "1"
		self.volume_1_id_9["LED_feedback"] = "default"
		self.volume_1_id_9["LED_feedback_active"] = "1"
		self.volume_1_id_9["LED_on"] = "127"
		self.volume_1_id_9["LED_off"] = "0"
		self.volume_1_id_9["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_17"]
		self.volume_1_id_9["snap_to"] = True
		self.volume_1_id_9["json_id"] = 9
		self.volume_1_id_9["mapping_name"] = "Volume 1"
		self.volume_1_id_9["mapping_type"] = "Volume"
		self.volume_1_id_9["parent_json_id"] = 8
		self.volume_1_id_9["parent_name"] = "pan_8_id_144"
		self.volume_1_id_11 = {}
		self.volume_1_id_11["attached_to"] = "midi_cc_ch_0_val_18"
		self.volume_1_id_11["track"] = self.track_num(2)
		self.volume_1_id_11["module"] = "self.relative_tracks_dict[2].mixer_device.volume"
		self.volume_1_id_11["element"] = "value"
		self.volume_1_id_11["output_type"] = "val"
		self.volume_1_id_11["minimum"] = round(0,2)
		self.volume_1_id_11["maximum"] = round(100,2)
		self.volume_1_id_11["decimal_places"] = 2
		self.volume_1_id_11["ui_listener"] = "value"
		self.volume_1_id_11["feedback_brain"] = "feedback_range"
		self.volume_1_id_11["ctrl_type"] = "relative"
		self.volume_1_id_11["enc_first"] = 65
		self.volume_1_id_11["enc_second"] = 1
		self.volume_1_id_11["steps"] = 127
		self.volume_1_id_11["LED_mapping_type_needs_feedback"] = "1"
		self.volume_1_id_11["LED_feedback"] = "default"
		self.volume_1_id_11["LED_feedback_active"] = "1"
		self.volume_1_id_11["LED_on"] = "127"
		self.volume_1_id_11["LED_off"] = "0"
		self.volume_1_id_11["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_18"]
		self.volume_1_id_11["snap_to"] = True
		self.volume_1_id_11["json_id"] = 11
		self.volume_1_id_11["mapping_name"] = "Volume 1"
		self.volume_1_id_11["mapping_type"] = "Volume"
		self.volume_1_id_11["parent_json_id"] = 10
		self.volume_1_id_11["parent_name"] = "pan_8_id_144"
		self.volume_1_id_13 = {}
		self.volume_1_id_13["attached_to"] = "midi_cc_ch_0_val_19"
		self.volume_1_id_13["track"] = self.track_num(2)
		self.volume_1_id_13["module"] = "self.relative_tracks_dict[3].mixer_device.volume"
		self.volume_1_id_13["element"] = "value"
		self.volume_1_id_13["output_type"] = "val"
		self.volume_1_id_13["minimum"] = round(0,2)
		self.volume_1_id_13["maximum"] = round(100,2)
		self.volume_1_id_13["decimal_places"] = 2
		self.volume_1_id_13["ui_listener"] = "value"
		self.volume_1_id_13["feedback_brain"] = "feedback_range"
		self.volume_1_id_13["ctrl_type"] = "relative"
		self.volume_1_id_13["enc_first"] = 65
		self.volume_1_id_13["enc_second"] = 1
		self.volume_1_id_13["steps"] = 127
		self.volume_1_id_13["LED_mapping_type_needs_feedback"] = "1"
		self.volume_1_id_13["LED_feedback"] = "default"
		self.volume_1_id_13["LED_feedback_active"] = "1"
		self.volume_1_id_13["LED_on"] = "127"
		self.volume_1_id_13["LED_off"] = "0"
		self.volume_1_id_13["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_19"]
		self.volume_1_id_13["snap_to"] = True
		self.volume_1_id_13["json_id"] = 13
		self.volume_1_id_13["mapping_name"] = "Volume 1"
		self.volume_1_id_13["mapping_type"] = "Volume"
		self.volume_1_id_13["parent_json_id"] = 12
		self.volume_1_id_13["parent_name"] = "pan_8_id_144"
		self.volume_1_id_15 = {}
		self.volume_1_id_15["attached_to"] = "midi_cc_ch_0_val_20"
		self.volume_1_id_15["track"] = self.track_num(2)
		self.volume_1_id_15["module"] = "self.relative_tracks_dict[4].mixer_device.volume"
		self.volume_1_id_15["element"] = "value"
		self.volume_1_id_15["output_type"] = "val"
		self.volume_1_id_15["minimum"] = round(0,2)
		self.volume_1_id_15["maximum"] = round(100,2)
		self.volume_1_id_15["decimal_places"] = 2
		self.volume_1_id_15["ui_listener"] = "value"
		self.volume_1_id_15["feedback_brain"] = "feedback_range"
		self.volume_1_id_15["ctrl_type"] = "relative"
		self.volume_1_id_15["enc_first"] = 65
		self.volume_1_id_15["enc_second"] = 1
		self.volume_1_id_15["steps"] = 127
		self.volume_1_id_15["LED_mapping_type_needs_feedback"] = "1"
		self.volume_1_id_15["LED_feedback"] = "default"
		self.volume_1_id_15["LED_feedback_active"] = "1"
		self.volume_1_id_15["LED_on"] = "127"
		self.volume_1_id_15["LED_off"] = "0"
		self.volume_1_id_15["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_20"]
		self.volume_1_id_15["snap_to"] = True
		self.volume_1_id_15["json_id"] = 15
		self.volume_1_id_15["mapping_name"] = "Volume 1"
		self.volume_1_id_15["mapping_type"] = "Volume"
		self.volume_1_id_15["parent_json_id"] = 14
		self.volume_1_id_15["parent_name"] = "pan_8_id_144"
		self.volume_1_id_17 = {}
		self.volume_1_id_17["attached_to"] = "midi_cc_ch_0_val_21"
		self.volume_1_id_17["track"] = self.track_num(2)
		self.volume_1_id_17["module"] = "self.relative_tracks_dict[5].mixer_device.volume"
		self.volume_1_id_17["element"] = "value"
		self.volume_1_id_17["output_type"] = "val"
		self.volume_1_id_17["minimum"] = round(0,2)
		self.volume_1_id_17["maximum"] = round(100,2)
		self.volume_1_id_17["decimal_places"] = 2
		self.volume_1_id_17["ui_listener"] = "value"
		self.volume_1_id_17["feedback_brain"] = "feedback_range"
		self.volume_1_id_17["ctrl_type"] = "relative"
		self.volume_1_id_17["enc_first"] = 65
		self.volume_1_id_17["enc_second"] = 1
		self.volume_1_id_17["steps"] = 127
		self.volume_1_id_17["LED_mapping_type_needs_feedback"] = "1"
		self.volume_1_id_17["LED_feedback"] = "default"
		self.volume_1_id_17["LED_feedback_active"] = "1"
		self.volume_1_id_17["LED_on"] = "127"
		self.volume_1_id_17["LED_off"] = "0"
		self.volume_1_id_17["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_21"]
		self.volume_1_id_17["snap_to"] = True
		self.volume_1_id_17["json_id"] = 17
		self.volume_1_id_17["mapping_name"] = "Volume 1"
		self.volume_1_id_17["mapping_type"] = "Volume"
		self.volume_1_id_17["parent_json_id"] = 16
		self.volume_1_id_17["parent_name"] = "pan_8_id_144"
		self.volume_1_id_19 = {}
		self.volume_1_id_19["attached_to"] = "midi_cc_ch_0_val_22"
		self.volume_1_id_19["track"] = self.track_num(2)
		self.volume_1_id_19["module"] = "self.relative_tracks_dict[6].mixer_device.volume"
		self.volume_1_id_19["element"] = "value"
		self.volume_1_id_19["output_type"] = "val"
		self.volume_1_id_19["minimum"] = round(0,2)
		self.volume_1_id_19["maximum"] = round(100,2)
		self.volume_1_id_19["decimal_places"] = 2
		self.volume_1_id_19["ui_listener"] = "value"
		self.volume_1_id_19["feedback_brain"] = "feedback_range"
		self.volume_1_id_19["ctrl_type"] = "relative"
		self.volume_1_id_19["enc_first"] = 65
		self.volume_1_id_19["enc_second"] = 1
		self.volume_1_id_19["steps"] = 127
		self.volume_1_id_19["LED_mapping_type_needs_feedback"] = "1"
		self.volume_1_id_19["LED_feedback"] = "default"
		self.volume_1_id_19["LED_feedback_active"] = "1"
		self.volume_1_id_19["LED_on"] = "127"
		self.volume_1_id_19["LED_off"] = "0"
		self.volume_1_id_19["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_22"]
		self.volume_1_id_19["snap_to"] = True
		self.volume_1_id_19["json_id"] = 19
		self.volume_1_id_19["mapping_name"] = "Volume 1"
		self.volume_1_id_19["mapping_type"] = "Volume"
		self.volume_1_id_19["parent_json_id"] = 18
		self.volume_1_id_19["parent_name"] = "pan_8_id_144"
		self.volume_1_id_21 = {}
		self.volume_1_id_21["attached_to"] = "midi_cc_ch_0_val_23"
		self.volume_1_id_21["track"] = self.track_num(2)
		self.volume_1_id_21["module"] = "self.relative_tracks_dict[7].mixer_device.volume"
		self.volume_1_id_21["element"] = "value"
		self.volume_1_id_21["output_type"] = "val"
		self.volume_1_id_21["minimum"] = round(0,2)
		self.volume_1_id_21["maximum"] = round(100,2)
		self.volume_1_id_21["decimal_places"] = 2
		self.volume_1_id_21["ui_listener"] = "value"
		self.volume_1_id_21["feedback_brain"] = "feedback_range"
		self.volume_1_id_21["ctrl_type"] = "relative"
		self.volume_1_id_21["enc_first"] = 65
		self.volume_1_id_21["enc_second"] = 1
		self.volume_1_id_21["steps"] = 127
		self.volume_1_id_21["LED_mapping_type_needs_feedback"] = "1"
		self.volume_1_id_21["LED_feedback"] = "default"
		self.volume_1_id_21["LED_feedback_active"] = "1"
		self.volume_1_id_21["LED_on"] = "127"
		self.volume_1_id_21["LED_off"] = "0"
		self.volume_1_id_21["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_23"]
		self.volume_1_id_21["snap_to"] = True
		self.volume_1_id_21["json_id"] = 21
		self.volume_1_id_21["mapping_name"] = "Volume 1"
		self.volume_1_id_21["mapping_type"] = "Volume"
		self.volume_1_id_21["parent_json_id"] = 20
		self.volume_1_id_21["parent_name"] = "pan_8_id_144"
		self.mute_1_id_22 = {}
		self.mute_1_id_22["attached_to"] = "midi_note_ch_0_val_16"
		self.mute_1_id_22["track"] = self.track_num(2)
		self.mute_1_id_22["module"] = "self.relative_tracks_dict[0]"
		self.mute_1_id_22["element"] = "mute"
		self.mute_1_id_22["output_type"] = "bool"
		self.mute_1_id_22["ui_listener"] = "mute"
		self.mute_1_id_22["feedback_brain"] = "feedback_bool"
		self.mute_1_id_22["ctrl_type"] = "on/off"
		self.mute_1_id_22["enc_first"] = 127
		self.mute_1_id_22["enc_second"] = 0
		self.mute_1_id_22["switch_type"] = "momentary"
		self.mute_1_id_22["LED_mapping_type_needs_feedback"] = "1"
		self.mute_1_id_22["LED_feedback"] = "default"
		self.mute_1_id_22["LED_feedback_active"] = "1"
		self.mute_1_id_22["LED_on"] = "127"
		self.mute_1_id_22["LED_off"] = "0"
		self.mute_1_id_22["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_16"]
		self.mute_1_id_22["json_id"] = 22
		self.mute_1_id_22["mapping_name"] = "Mute 1"
		self.mute_1_id_22["mapping_type"] = "Mute"
		self.mute_1_id_22["parent_json_id"] = 6
		self.mute_1_id_22["parent_name"] = "pan_8_id_144"
		self.mute_2_id_24 = {}
		self.mute_2_id_24["attached_to"] = "midi_note_ch_0_val_17"
		self.mute_2_id_24["track"] = self.track_num(2)
		self.mute_2_id_24["module"] = "self.relative_tracks_dict[1]"
		self.mute_2_id_24["element"] = "mute"
		self.mute_2_id_24["output_type"] = "bool"
		self.mute_2_id_24["ui_listener"] = "mute"
		self.mute_2_id_24["feedback_brain"] = "feedback_bool"
		self.mute_2_id_24["ctrl_type"] = "on/off"
		self.mute_2_id_24["enc_first"] = 127
		self.mute_2_id_24["enc_second"] = 0
		self.mute_2_id_24["switch_type"] = "momentary"
		self.mute_2_id_24["LED_mapping_type_needs_feedback"] = "1"
		self.mute_2_id_24["LED_feedback"] = "default"
		self.mute_2_id_24["LED_feedback_active"] = "1"
		self.mute_2_id_24["LED_on"] = "127"
		self.mute_2_id_24["LED_off"] = "0"
		self.mute_2_id_24["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_17"]
		self.mute_2_id_24["json_id"] = 24
		self.mute_2_id_24["mapping_name"] = "Mute 2"
		self.mute_2_id_24["mapping_type"] = "Mute"
		self.mute_2_id_24["parent_json_id"] = 8
		self.mute_2_id_24["parent_name"] = "pan_8_id_144"
		self.mute_3_id_26 = {}
		self.mute_3_id_26["attached_to"] = "midi_note_ch_0_val_18"
		self.mute_3_id_26["track"] = self.track_num(2)
		self.mute_3_id_26["module"] = "self.relative_tracks_dict[2]"
		self.mute_3_id_26["element"] = "mute"
		self.mute_3_id_26["output_type"] = "bool"
		self.mute_3_id_26["ui_listener"] = "mute"
		self.mute_3_id_26["feedback_brain"] = "feedback_bool"
		self.mute_3_id_26["ctrl_type"] = "on/off"
		self.mute_3_id_26["enc_first"] = 127
		self.mute_3_id_26["enc_second"] = 0
		self.mute_3_id_26["switch_type"] = "momentary"
		self.mute_3_id_26["LED_mapping_type_needs_feedback"] = "1"
		self.mute_3_id_26["LED_feedback"] = "default"
		self.mute_3_id_26["LED_feedback_active"] = "1"
		self.mute_3_id_26["LED_on"] = "127"
		self.mute_3_id_26["LED_off"] = "0"
		self.mute_3_id_26["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_18"]
		self.mute_3_id_26["json_id"] = 26
		self.mute_3_id_26["mapping_name"] = "Mute 3"
		self.mute_3_id_26["mapping_type"] = "Mute"
		self.mute_3_id_26["parent_json_id"] = 10
		self.mute_3_id_26["parent_name"] = "pan_8_id_144"
		self.mute_4_id_28 = {}
		self.mute_4_id_28["attached_to"] = "midi_note_ch_0_val_19"
		self.mute_4_id_28["track"] = self.track_num(2)
		self.mute_4_id_28["module"] = "self.relative_tracks_dict[3]"
		self.mute_4_id_28["element"] = "mute"
		self.mute_4_id_28["output_type"] = "bool"
		self.mute_4_id_28["ui_listener"] = "mute"
		self.mute_4_id_28["feedback_brain"] = "feedback_bool"
		self.mute_4_id_28["ctrl_type"] = "on/off"
		self.mute_4_id_28["enc_first"] = 127
		self.mute_4_id_28["enc_second"] = 0
		self.mute_4_id_28["switch_type"] = "momentary"
		self.mute_4_id_28["LED_mapping_type_needs_feedback"] = "1"
		self.mute_4_id_28["LED_feedback"] = "default"
		self.mute_4_id_28["LED_feedback_active"] = "1"
		self.mute_4_id_28["LED_on"] = "127"
		self.mute_4_id_28["LED_off"] = "0"
		self.mute_4_id_28["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_19"]
		self.mute_4_id_28["json_id"] = 28
		self.mute_4_id_28["mapping_name"] = "Mute 4"
		self.mute_4_id_28["mapping_type"] = "Mute"
		self.mute_4_id_28["parent_json_id"] = 12
		self.mute_4_id_28["parent_name"] = "pan_8_id_144"
		self.mute_5_id_30 = {}
		self.mute_5_id_30["attached_to"] = "midi_note_ch_0_val_20"
		self.mute_5_id_30["track"] = self.track_num(2)
		self.mute_5_id_30["module"] = "self.relative_tracks_dict[4]"
		self.mute_5_id_30["element"] = "mute"
		self.mute_5_id_30["output_type"] = "bool"
		self.mute_5_id_30["ui_listener"] = "mute"
		self.mute_5_id_30["feedback_brain"] = "feedback_bool"
		self.mute_5_id_30["ctrl_type"] = "on/off"
		self.mute_5_id_30["enc_first"] = 127
		self.mute_5_id_30["enc_second"] = 0
		self.mute_5_id_30["switch_type"] = "momentary"
		self.mute_5_id_30["LED_mapping_type_needs_feedback"] = "1"
		self.mute_5_id_30["LED_feedback"] = "default"
		self.mute_5_id_30["LED_feedback_active"] = "1"
		self.mute_5_id_30["LED_on"] = "127"
		self.mute_5_id_30["LED_off"] = "0"
		self.mute_5_id_30["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_20"]
		self.mute_5_id_30["json_id"] = 30
		self.mute_5_id_30["mapping_name"] = "Mute 5"
		self.mute_5_id_30["mapping_type"] = "Mute"
		self.mute_5_id_30["parent_json_id"] = 14
		self.mute_5_id_30["parent_name"] = "pan_8_id_144"
		self.mute_6_id_32 = {}
		self.mute_6_id_32["attached_to"] = "midi_note_ch_0_val_21"
		self.mute_6_id_32["track"] = self.track_num(2)
		self.mute_6_id_32["module"] = "self.relative_tracks_dict[5]"
		self.mute_6_id_32["element"] = "mute"
		self.mute_6_id_32["output_type"] = "bool"
		self.mute_6_id_32["ui_listener"] = "mute"
		self.mute_6_id_32["feedback_brain"] = "feedback_bool"
		self.mute_6_id_32["ctrl_type"] = "on/off"
		self.mute_6_id_32["enc_first"] = 127
		self.mute_6_id_32["enc_second"] = 0
		self.mute_6_id_32["switch_type"] = "momentary"
		self.mute_6_id_32["LED_mapping_type_needs_feedback"] = "1"
		self.mute_6_id_32["LED_feedback"] = "default"
		self.mute_6_id_32["LED_feedback_active"] = "1"
		self.mute_6_id_32["LED_on"] = "127"
		self.mute_6_id_32["LED_off"] = "0"
		self.mute_6_id_32["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_21"]
		self.mute_6_id_32["json_id"] = 32
		self.mute_6_id_32["mapping_name"] = "Mute 6"
		self.mute_6_id_32["mapping_type"] = "Mute"
		self.mute_6_id_32["parent_json_id"] = 16
		self.mute_6_id_32["parent_name"] = "pan_8_id_144"
		self.mute_7_id_34 = {}
		self.mute_7_id_34["attached_to"] = "midi_note_ch_0_val_22"
		self.mute_7_id_34["track"] = self.track_num(2)
		self.mute_7_id_34["module"] = "self.relative_tracks_dict[6]"
		self.mute_7_id_34["element"] = "mute"
		self.mute_7_id_34["output_type"] = "bool"
		self.mute_7_id_34["ui_listener"] = "mute"
		self.mute_7_id_34["feedback_brain"] = "feedback_bool"
		self.mute_7_id_34["ctrl_type"] = "on/off"
		self.mute_7_id_34["enc_first"] = 127
		self.mute_7_id_34["enc_second"] = 0
		self.mute_7_id_34["switch_type"] = "momentary"
		self.mute_7_id_34["LED_mapping_type_needs_feedback"] = "1"
		self.mute_7_id_34["LED_feedback"] = "default"
		self.mute_7_id_34["LED_feedback_active"] = "1"
		self.mute_7_id_34["LED_on"] = "127"
		self.mute_7_id_34["LED_off"] = "0"
		self.mute_7_id_34["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_22"]
		self.mute_7_id_34["json_id"] = 34
		self.mute_7_id_34["mapping_name"] = "Mute 7"
		self.mute_7_id_34["mapping_type"] = "Mute"
		self.mute_7_id_34["parent_json_id"] = 18
		self.mute_7_id_34["parent_name"] = "pan_8_id_144"
		self.mute_8_id_36 = {}
		self.mute_8_id_36["attached_to"] = "midi_note_ch_0_val_23"
		self.mute_8_id_36["track"] = self.track_num(2)
		self.mute_8_id_36["module"] = "self.relative_tracks_dict[7]"
		self.mute_8_id_36["element"] = "mute"
		self.mute_8_id_36["output_type"] = "bool"
		self.mute_8_id_36["ui_listener"] = "mute"
		self.mute_8_id_36["feedback_brain"] = "feedback_bool"
		self.mute_8_id_36["ctrl_type"] = "on/off"
		self.mute_8_id_36["enc_first"] = 127
		self.mute_8_id_36["enc_second"] = 0
		self.mute_8_id_36["switch_type"] = "momentary"
		self.mute_8_id_36["LED_mapping_type_needs_feedback"] = "1"
		self.mute_8_id_36["LED_feedback"] = "default"
		self.mute_8_id_36["LED_feedback_active"] = "1"
		self.mute_8_id_36["LED_on"] = "127"
		self.mute_8_id_36["LED_off"] = "0"
		self.mute_8_id_36["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_23"]
		self.mute_8_id_36["json_id"] = 36
		self.mute_8_id_36["mapping_name"] = "Mute 8"
		self.mute_8_id_36["mapping_type"] = "Mute"
		self.mute_8_id_36["parent_json_id"] = 20
		self.mute_8_id_36["parent_name"] = "pan_8_id_144"
		self.play_1_id_39 = {}
		self.play_1_id_39["attached_to"] = "midi_note_ch_0_val_94"
		self.play_1_id_39["module"] = "self.song()"
		self.play_1_id_39["element"] = "start_playing"
		self.play_1_id_39["output_type"] = "func"
		self.play_1_id_39["func_arg"] = ""
		self.play_1_id_39["ui_listener"] = "is_playing"
		self.play_1_id_39["feedback_brain"] = "feedback_bool"
		self.play_1_id_39["ctrl_type"] = "on/off"
		self.play_1_id_39["enc_first"] = 127
		self.play_1_id_39["enc_second"] = 0
		self.play_1_id_39["switch_type"] = "momentary"
		self.play_1_id_39["LED_mapping_type_needs_feedback"] = "1"
		self.play_1_id_39["LED_feedback"] = "default"
		self.play_1_id_39["LED_feedback_active"] = "1"
		self.play_1_id_39["LED_on"] = "127"
		self.play_1_id_39["LED_off"] = "0"
		self.play_1_id_39["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_94"]
		self.play_1_id_39["json_id"] = 39
		self.play_1_id_39["mapping_name"] = "Play 1"
		self.play_1_id_39["mapping_type"] = "Play"
		self.play_1_id_39["parent_json_id"] = 1
		self.play_1_id_39["parent_name"] = "volume_id_1"
		self.stop_1_id_40 = {}
		self.stop_1_id_40["attached_to"] = "midi_note_ch_0_val_93"
		self.stop_1_id_40["module"] = "self.song()"
		self.stop_1_id_40["element"] = "stop_playing"
		self.stop_1_id_40["output_type"] = "func"
		self.stop_1_id_40["func_arg"] = ""
		self.stop_1_id_40["ui_listener"] = "is_playing"
		self.stop_1_id_40["feedback_brain"] = "feedback_bool"
		self.stop_1_id_40["ctrl_type"] = "on/off"
		self.stop_1_id_40["enc_first"] = 127
		self.stop_1_id_40["enc_second"] = 0
		self.stop_1_id_40["switch_type"] = "momentary"
		self.stop_1_id_40["LED_mapping_type_needs_feedback"] = "1"
		self.stop_1_id_40["LED_feedback"] = "default"
		self.stop_1_id_40["LED_feedback_active"] = "1"
		self.stop_1_id_40["LED_on"] = "127"
		self.stop_1_id_40["LED_off"] = "0"
		self.stop_1_id_40["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_93"]
		self.stop_1_id_40["json_id"] = 40
		self.stop_1_id_40["mapping_name"] = "Stop 1"
		self.stop_1_id_40["mapping_type"] = "Stop"
		self.stop_1_id_40["parent_json_id"] = 1
		self.stop_1_id_40["parent_name"] = "volume_id_1"
		self.undo_1_id_42 = {}
		self.undo_1_id_42["attached_to"] = "midi_note_ch_0_val_91"
		self.undo_1_id_42["module"] = "self.song()"
		self.undo_1_id_42["element"] = "undo"
		self.undo_1_id_42["output_type"] = "func"
		self.undo_1_id_42["func_arg"] = ""
		self.undo_1_id_42["ctrl_type"] = "on/off"
		self.undo_1_id_42["enc_first"] = 127
		self.undo_1_id_42["enc_second"] = 0
		self.undo_1_id_42["switch_type"] = "momentary"
		self.undo_1_id_42["json_id"] = 42
		self.undo_1_id_42["mapping_name"] = "Undo 1"
		self.undo_1_id_42["mapping_type"] = "Undo"
		self.undo_1_id_42["parent_json_id"] = 1
		self.undo_1_id_42["parent_name"] = "volume_id_1"
		self.pan_id_47 = {}
		self.pan_id_47["attached_to"] = "midi_note_ch_0_val_98"
		self.pan_id_47["module"] = "self"
		self.pan_id_47["element"] = "set_active_mode"
		self.pan_id_47["output_type"] = "func"
		self.pan_id_47["func_arg"] = "49"
		self.pan_id_47["ui_listener"] = "value"
		self.pan_id_47["feedback_brain"] = "feedback_scroll_mode_selector_select"
		self.pan_id_47["ctrl_type"] = "on/off"
		self.pan_id_47["enc_first"] = 127
		self.pan_id_47["enc_second"] = 0
		self.pan_id_47["switch_type"] = "momentary"
		self.pan_id_47["LED_mapping_type_needs_feedback"] = ""
		self.pan_id_47["LED_feedback"] = "default"
		self.pan_id_47["LED_feedback_active"] = "1"
		self.pan_id_47["LED_on"] = "127"
		self.pan_id_47["LED_off"] = "0"
		self.pan_id_47["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_98"]
		self.pan_id_47["json_id"] = 47
		self.pan_id_47["mapping_name"] = "pan"
		self.pan_id_47["mapping_type"] = "Mode Selector"
		self.pan_id_47["parent_json_id"] = 1
		self.pan_id_47["parent_name"] = "volume_id_1"
		self.aux_id_48 = {}
		self.aux_id_48["attached_to"] = "midi_note_ch_0_val_99"
		self.aux_id_48["module"] = "self"
		self.aux_id_48["element"] = "set_active_mode"
		self.aux_id_48["output_type"] = "func"
		self.aux_id_48["func_arg"] = "3"
		self.aux_id_48["ui_listener"] = "value"
		self.aux_id_48["feedback_brain"] = "feedback_scroll_mode_selector_select"
		self.aux_id_48["ctrl_type"] = "on/off"
		self.aux_id_48["enc_first"] = 127
		self.aux_id_48["enc_second"] = 0
		self.aux_id_48["switch_type"] = "momentary"
		self.aux_id_48["LED_mapping_type_needs_feedback"] = ""
		self.aux_id_48["LED_feedback"] = "default"
		self.aux_id_48["LED_feedback_active"] = "1"
		self.aux_id_48["LED_on"] = "127"
		self.aux_id_48["LED_off"] = "0"
		self.aux_id_48["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_99"]
		self.aux_id_48["json_id"] = 48
		self.aux_id_48["mapping_name"] = "aux"
		self.aux_id_48["mapping_type"] = "Mode Selector"
		self.aux_id_48["parent_json_id"] = 1
		self.aux_id_48["parent_name"] = "volume_id_1"
	def _mode3_configs(self):
		self.mode_3_configs_map = [
			"new_parameter_mapping_copy_320_id_320",
			"new_parameter_mapping_copy_300_copy_321_id_321",
			"new_parameter_mapping_copy_298_copy_322_id_322",
			"new_parameter_mapping_copy_298_copy_302_copy_323_id_323",
			"new_parameter_mapping_copy_297_copy_324_id_324",
			"new_parameter_mapping_copy_297_copy_301_copy_325_id_325",
			"new_parameter_mapping_copy_297_copy_299_copy_326_id_326",
			"new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327",
			"new_arm_mapping_copy_295_copy_356_id_356",
			"new_arm_mapping_copy_271_copy_294_copy_360_id_360",
			"new_arm_mapping_copy_293_copy_364_id_364",
			"new_arm_mapping_copy_270_copy_292_copy_368_id_368",
			"new_arm_mapping_copy_267_copy_291_copy_372_id_372",
			"new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376",
			"new_arm_mapping_copy_266_copy_289_copy_380_id_380",
			"new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384",
			"new_session_box_navigation_mapping_copy_254_id_254",
			"new_session_box_navigation_mapping_copy_254_copy_262_id_262",
			"new_session_box_navigation_mapping_copy_254_copy_258_id_258",
			"new_send_mapping_id_173",
			"new_send_mapping_id_172",
			"new_send_mapping_6_id_171",
			"new_send_mapping_5_id_170",
			"new_send_mapping_4_id_169",
			"new_send_mapping_3_id_168",
			"new_send_mapping_id_167",
			"new_send_mapping_id_166",
			"mute_1_id_51",
			"solo_1_id_52",
			"mute_2_id_54",
			"solo_2_id_55",
			"mute_3_id_57",
			"solo_3_id_58",
			"mute_4_id_60",
			"solo_4_id_61",
			"mute_5_id_63",
			"solo_5_id_64",
			"mute_6_id_66",
			"solo_6_id_67",
			"mute_7_id_69",
			"solo_7_id_70",
			"mute_8_id_72",
			"solo_8_id_73",
			"play_1_id_83",
			"stop_1_id_84",
			"undo_1_id_86",
			"pan_id_91",
			"aux_id_92"]
		self.new_parameter_mapping_copy_320_id_320 = {}
		self.new_parameter_mapping_copy_320_id_320["attached_to"] = "midi_cc_ch_0_val_0"
		self.new_parameter_mapping_copy_320_id_320["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_320_id_320["module"] = "self.relative_tracks_dict[0].devices[0].parameters[1]"
		self.new_parameter_mapping_copy_320_id_320["element"] = "value"
		self.new_parameter_mapping_copy_320_id_320["output_type"] = "val"
		self.new_parameter_mapping_copy_320_id_320["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_320_id_320["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_320_id_320["decimal_places"] = 2
		self.new_parameter_mapping_copy_320_id_320["ui_listener"] = "value"
		self.new_parameter_mapping_copy_320_id_320["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_320_id_320["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_320_id_320["enc_first"] = 0
		self.new_parameter_mapping_copy_320_id_320["enc_second"] = 127
		self.new_parameter_mapping_copy_320_id_320["reverse_mode"] = False
		self.new_parameter_mapping_copy_320_id_320["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_320_id_320["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_320_id_320["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_320_id_320["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_320_id_320["LED_on"] = "127"
		self.new_parameter_mapping_copy_320_id_320["LED_off"] = "0"
		self.new_parameter_mapping_copy_320_id_320["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_0"]
		self.new_parameter_mapping_copy_320_id_320["snap_to"] = True
		self.new_parameter_mapping_copy_320_id_320["json_id"] = 320
		self.new_parameter_mapping_copy_320_id_320["mapping_name"] = "New Parameter mapping  copy 320"
		self.new_parameter_mapping_copy_320_id_320["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_300_copy_321_id_321 = {}
		self.new_parameter_mapping_copy_300_copy_321_id_321["attached_to"] = "midi_cc_ch_1_val_0"
		self.new_parameter_mapping_copy_300_copy_321_id_321["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_300_copy_321_id_321["module"] = "self.relative_tracks_dict[0].devices[0].parameters[2]"
		self.new_parameter_mapping_copy_300_copy_321_id_321["element"] = "value"
		self.new_parameter_mapping_copy_300_copy_321_id_321["output_type"] = "val"
		self.new_parameter_mapping_copy_300_copy_321_id_321["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_300_copy_321_id_321["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_300_copy_321_id_321["decimal_places"] = 2
		self.new_parameter_mapping_copy_300_copy_321_id_321["ui_listener"] = "value"
		self.new_parameter_mapping_copy_300_copy_321_id_321["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_300_copy_321_id_321["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_300_copy_321_id_321["enc_first"] = 0
		self.new_parameter_mapping_copy_300_copy_321_id_321["enc_second"] = 127
		self.new_parameter_mapping_copy_300_copy_321_id_321["reverse_mode"] = False
		self.new_parameter_mapping_copy_300_copy_321_id_321["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_300_copy_321_id_321["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_300_copy_321_id_321["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_300_copy_321_id_321["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_300_copy_321_id_321["LED_on"] = "127"
		self.new_parameter_mapping_copy_300_copy_321_id_321["LED_off"] = "0"
		self.new_parameter_mapping_copy_300_copy_321_id_321["LED_send_feedback_to_selected"] = ["midi_cc_ch_1_val_0"]
		self.new_parameter_mapping_copy_300_copy_321_id_321["snap_to"] = True
		self.new_parameter_mapping_copy_300_copy_321_id_321["json_id"] = 321
		self.new_parameter_mapping_copy_300_copy_321_id_321["mapping_name"] = "New Parameter mapping  copy 300 copy 321"
		self.new_parameter_mapping_copy_300_copy_321_id_321["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_298_copy_322_id_322 = {}
		self.new_parameter_mapping_copy_298_copy_322_id_322["attached_to"] = "midi_cc_ch_2_val_0"
		self.new_parameter_mapping_copy_298_copy_322_id_322["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_298_copy_322_id_322["module"] = "self.relative_tracks_dict[0].devices[0].parameters[3]"
		self.new_parameter_mapping_copy_298_copy_322_id_322["element"] = "value"
		self.new_parameter_mapping_copy_298_copy_322_id_322["output_type"] = "val"
		self.new_parameter_mapping_copy_298_copy_322_id_322["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_298_copy_322_id_322["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_298_copy_322_id_322["decimal_places"] = 2
		self.new_parameter_mapping_copy_298_copy_322_id_322["ui_listener"] = "value"
		self.new_parameter_mapping_copy_298_copy_322_id_322["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_298_copy_322_id_322["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_298_copy_322_id_322["enc_first"] = 0
		self.new_parameter_mapping_copy_298_copy_322_id_322["enc_second"] = 127
		self.new_parameter_mapping_copy_298_copy_322_id_322["reverse_mode"] = False
		self.new_parameter_mapping_copy_298_copy_322_id_322["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_298_copy_322_id_322["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_298_copy_322_id_322["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_298_copy_322_id_322["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_298_copy_322_id_322["LED_on"] = "127"
		self.new_parameter_mapping_copy_298_copy_322_id_322["LED_off"] = "0"
		self.new_parameter_mapping_copy_298_copy_322_id_322["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_0"]
		self.new_parameter_mapping_copy_298_copy_322_id_322["snap_to"] = True
		self.new_parameter_mapping_copy_298_copy_322_id_322["json_id"] = 322
		self.new_parameter_mapping_copy_298_copy_322_id_322["mapping_name"] = "New Parameter mapping  copy 298 copy 322"
		self.new_parameter_mapping_copy_298_copy_322_id_322["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323 = {}
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["attached_to"] = "midi_cc_ch_3_val_0"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["module"] = "self.relative_tracks_dict[0].devices[0].parameters[4]"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["element"] = "value"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["output_type"] = "val"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["decimal_places"] = 2
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["ui_listener"] = "value"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["enc_first"] = 0
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["enc_second"] = 127
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["reverse_mode"] = False
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["LED_on"] = "127"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["LED_off"] = "0"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["LED_send_feedback_to_selected"] = ["midi_cc_ch_3_val_0"]
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["snap_to"] = True
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["json_id"] = 323
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["mapping_name"] = "New Parameter mapping  copy 298 copy 302 copy 323"
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_324_id_324 = {}
		self.new_parameter_mapping_copy_297_copy_324_id_324["attached_to"] = "midi_cc_ch_4_val_0"
		self.new_parameter_mapping_copy_297_copy_324_id_324["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_324_id_324["module"] = "self.relative_tracks_dict[0].devices[0].parameters[5]"
		self.new_parameter_mapping_copy_297_copy_324_id_324["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_324_id_324["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_324_id_324["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_324_id_324["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_324_id_324["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_324_id_324["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_324_id_324["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_324_id_324["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_324_id_324["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_324_id_324["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_324_id_324["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_324_id_324["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_324_id_324["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_324_id_324["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_324_id_324["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_324_id_324["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_324_id_324["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_324_id_324["LED_send_feedback_to_selected"] = ["midi_cc_ch_4_val_0"]
		self.new_parameter_mapping_copy_297_copy_324_id_324["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_324_id_324["json_id"] = 324
		self.new_parameter_mapping_copy_297_copy_324_id_324["mapping_name"] = "New Parameter mapping  copy 297 copy 324"
		self.new_parameter_mapping_copy_297_copy_324_id_324["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325 = {}
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["attached_to"] = "midi_cc_ch_5_val_0"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["module"] = "self.relative_tracks_dict[0].devices[0].parameters[6]"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["LED_send_feedback_to_selected"] = ["midi_cc_ch_5_val_0"]
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["json_id"] = 325
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["mapping_name"] = "New Parameter mapping  copy 297 copy 301 copy 325"
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326 = {}
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["attached_to"] = "midi_cc_ch_6_val_0"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["module"] = "self.relative_tracks_dict[0].devices[0].parameters[7]"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["LED_send_feedback_to_selected"] = ["midi_cc_ch_6_val_0"]
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["json_id"] = 326
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["mapping_name"] = "New Parameter mapping  copy 297 copy 299 copy 326"
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327 = {}
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["attached_to"] = "midi_cc_ch_7_val_0"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["module"] = "self.relative_tracks_dict[0].devices[0].parameters[8]"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["LED_send_feedback_to_selected"] = ["midi_cc_ch_7_val_0"]
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["json_id"] = 327
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["mapping_name"] = "New Parameter mapping  copy 297 copy 299 copy 303 copy 327"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["mapping_type"] = "Parameter"
		self.new_arm_mapping_copy_295_copy_356_id_356 = {}
		self.new_arm_mapping_copy_295_copy_356_id_356["attached_to"] = "midi_note_ch_0_val_4"
		self.new_arm_mapping_copy_295_copy_356_id_356["track"] = self.track_num(2)
		self.new_arm_mapping_copy_295_copy_356_id_356["module"] = "self.relative_tracks_dict[4]"
		self.new_arm_mapping_copy_295_copy_356_id_356["element"] = "arm"
		self.new_arm_mapping_copy_295_copy_356_id_356["output_type"] = "bool"
		self.new_arm_mapping_copy_295_copy_356_id_356["ui_listener"] = "arm"
		self.new_arm_mapping_copy_295_copy_356_id_356["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_295_copy_356_id_356["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_295_copy_356_id_356["enc_first"] = 127
		self.new_arm_mapping_copy_295_copy_356_id_356["enc_second"] = 0
		self.new_arm_mapping_copy_295_copy_356_id_356["switch_type"] = "momentary"
		self.new_arm_mapping_copy_295_copy_356_id_356["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_295_copy_356_id_356["LED_feedback"] = "default"
		self.new_arm_mapping_copy_295_copy_356_id_356["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_295_copy_356_id_356["LED_on"] = "127"
		self.new_arm_mapping_copy_295_copy_356_id_356["LED_off"] = "0"
		self.new_arm_mapping_copy_295_copy_356_id_356["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_4"]
		self.new_arm_mapping_copy_295_copy_356_id_356["json_id"] = 356
		self.new_arm_mapping_copy_295_copy_356_id_356["mapping_name"] = "New Arm mapping  copy 295 copy 356"
		self.new_arm_mapping_copy_295_copy_356_id_356["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360 = {}
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["attached_to"] = "midi_note_ch_0_val_1"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["track"] = self.track_num(2)
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["module"] = "self.relative_tracks_dict[1]"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["element"] = "arm"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["output_type"] = "bool"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["ui_listener"] = "arm"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["enc_first"] = 127
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["enc_second"] = 0
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["switch_type"] = "momentary"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["LED_feedback"] = "default"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["LED_on"] = "127"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["LED_off"] = "0"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_1"]
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["json_id"] = 360
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["mapping_name"] = "New Arm mapping  copy 271 copy 294 copy 360"
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_293_copy_364_id_364 = {}
		self.new_arm_mapping_copy_293_copy_364_id_364["attached_to"] = "midi_note_ch_0_val_0"
		self.new_arm_mapping_copy_293_copy_364_id_364["track"] = self.track_num(2)
		self.new_arm_mapping_copy_293_copy_364_id_364["module"] = "self.relative_tracks_dict[0]"
		self.new_arm_mapping_copy_293_copy_364_id_364["element"] = "arm"
		self.new_arm_mapping_copy_293_copy_364_id_364["output_type"] = "bool"
		self.new_arm_mapping_copy_293_copy_364_id_364["ui_listener"] = "arm"
		self.new_arm_mapping_copy_293_copy_364_id_364["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_293_copy_364_id_364["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_293_copy_364_id_364["enc_first"] = 127
		self.new_arm_mapping_copy_293_copy_364_id_364["enc_second"] = 0
		self.new_arm_mapping_copy_293_copy_364_id_364["switch_type"] = "momentary"
		self.new_arm_mapping_copy_293_copy_364_id_364["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_293_copy_364_id_364["LED_feedback"] = "default"
		self.new_arm_mapping_copy_293_copy_364_id_364["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_293_copy_364_id_364["LED_on"] = "127"
		self.new_arm_mapping_copy_293_copy_364_id_364["LED_off"] = "0"
		self.new_arm_mapping_copy_293_copy_364_id_364["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_0"]
		self.new_arm_mapping_copy_293_copy_364_id_364["json_id"] = 364
		self.new_arm_mapping_copy_293_copy_364_id_364["mapping_name"] = "New Arm mapping  copy 293 copy 364"
		self.new_arm_mapping_copy_293_copy_364_id_364["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368 = {}
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["attached_to"] = "midi_note_ch_0_val_5"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["track"] = self.track_num(2)
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["module"] = "self.relative_tracks_dict[5]"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["element"] = "arm"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["output_type"] = "bool"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["ui_listener"] = "arm"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["enc_first"] = 127
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["enc_second"] = 0
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["switch_type"] = "momentary"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["LED_feedback"] = "default"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["LED_on"] = "127"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["LED_off"] = "0"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_5"]
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["json_id"] = 368
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["mapping_name"] = "New Arm mapping  copy 270 copy 292 copy 368"
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372 = {}
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["attached_to"] = "midi_note_ch_0_val_2"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["track"] = self.track_num(2)
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["module"] = "self.relative_tracks_dict[2]"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["element"] = "arm"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["output_type"] = "bool"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["ui_listener"] = "arm"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["enc_first"] = 127
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["enc_second"] = 0
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["switch_type"] = "momentary"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["LED_feedback"] = "default"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["LED_on"] = "127"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["LED_off"] = "0"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_2"]
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["json_id"] = 372
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["mapping_name"] = "New Arm mapping  copy 267 copy 291 copy 372"
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376 = {}
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["attached_to"] = "midi_note_ch_0_val_6"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["track"] = self.track_num(2)
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["module"] = "self.relative_tracks_dict[6]"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["element"] = "arm"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["output_type"] = "bool"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["ui_listener"] = "arm"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["enc_first"] = 127
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["enc_second"] = 0
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["switch_type"] = "momentary"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["LED_feedback"] = "default"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["LED_on"] = "127"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["LED_off"] = "0"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_6"]
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["json_id"] = 376
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["mapping_name"] = "New Arm mapping  copy 267 copy 269 copy 290 copy 376"
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380 = {}
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["attached_to"] = "midi_note_ch_0_val_3"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["track"] = self.track_num(2)
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["module"] = "self.relative_tracks_dict[3]"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["element"] = "arm"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["output_type"] = "bool"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["ui_listener"] = "arm"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["enc_first"] = 127
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["enc_second"] = 0
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["switch_type"] = "momentary"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["LED_feedback"] = "default"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["LED_on"] = "127"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["LED_off"] = "0"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_3"]
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["json_id"] = 380
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["mapping_name"] = "New Arm mapping  copy 266 copy 289 copy 380"
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384 = {}
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["attached_to"] = "midi_note_ch_0_val_7"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["track"] = self.track_num(2)
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["module"] = "self.relative_tracks_dict[7]"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["element"] = "arm"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["output_type"] = "bool"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["ui_listener"] = "arm"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["enc_first"] = 127
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["enc_second"] = 0
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["switch_type"] = "momentary"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["LED_feedback"] = "default"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["LED_on"] = "127"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["LED_off"] = "0"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_7"]
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["json_id"] = 384
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["mapping_name"] = "New Arm mapping  copy 266 copy 268 copy 288 copy 384"
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["mapping_type"] = "Arm"
		self.new_session_box_navigation_mapping_copy_254_id_254 = {}
		self.new_session_box_navigation_mapping_copy_254_id_254["attached_to"] = "midi_note_ch_0_val_92"
		self.new_session_box_navigation_mapping_copy_254_id_254["module"] = "self"
		self.new_session_box_navigation_mapping_copy_254_id_254["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_254_id_254["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_254_id_254["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_254_id_254["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_254_id_254["highlight_number"] = 0
		self.new_session_box_navigation_mapping_copy_254_id_254["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_254_id_254["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_254_id_254["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_254_id_254["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_254_id_254["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_254_id_254["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_254_id_254["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_254_id_254["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_254_id_254["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_254_id_254["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_254_id_254["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_254_id_254["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_92"]
		self.new_session_box_navigation_mapping_copy_254_id_254["json_id"] = 254
		self.new_session_box_navigation_mapping_copy_254_id_254["mapping_name"] = "New Session Box Navigation mapping  copy 254"
		self.new_session_box_navigation_mapping_copy_254_id_254["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262 = {}
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["attached_to"] = "midi_note_ch_0_val_46"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["module"] = "self"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["highlight_number"] = 8
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_46"]
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["json_id"] = 262
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["mapping_name"] = "New Session Box Navigation mapping  copy 254 copy 262"
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258 = {}
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["attached_to"] = "midi_note_ch_0_val_47"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["module"] = "self"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["highlight_number"] = 16
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_47"]
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["json_id"] = 258
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["mapping_name"] = "New Session Box Navigation mapping  copy 254 copy 258"
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258["mapping_type"] = "Session Box Navigation"
		self.new_send_mapping_id_173 = {}
		self.new_send_mapping_id_173["attached_to"] = "midi_cc_ch_0_val_23"
		self.new_send_mapping_id_173["track"] = self.track_num(2)
		self.new_send_mapping_id_173["module"] = "self.relative_tracks_dict[7].mixer_device.sends[0]"
		self.new_send_mapping_id_173["element"] = "value"
		self.new_send_mapping_id_173["output_type"] = "val"
		self.new_send_mapping_id_173["minimum"] = round(0,3)
		self.new_send_mapping_id_173["maximum"] = round(100,3)
		self.new_send_mapping_id_173["decimal_places"] = 3
		self.new_send_mapping_id_173["ui_listener"] = "value"
		self.new_send_mapping_id_173["feedback_brain"] = "feedback_range"
		self.new_send_mapping_id_173["ctrl_type"] = "relative"
		self.new_send_mapping_id_173["enc_first"] = 65
		self.new_send_mapping_id_173["enc_second"] = 1
		self.new_send_mapping_id_173["steps"] = 127
		self.new_send_mapping_id_173["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_id_173["LED_feedback"] = "default"
		self.new_send_mapping_id_173["LED_feedback_active"] = "1"
		self.new_send_mapping_id_173["LED_on"] = "127"
		self.new_send_mapping_id_173["LED_off"] = "0"
		self.new_send_mapping_id_173["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_23"]
		self.new_send_mapping_id_173["snap_to"] = True
		self.new_send_mapping_id_173["json_id"] = 173
		self.new_send_mapping_id_173["mapping_name"] = "New Send mapping "
		self.new_send_mapping_id_173["mapping_type"] = "Send"
		self.new_send_mapping_id_172 = {}
		self.new_send_mapping_id_172["attached_to"] = "midi_cc_ch_0_val_22"
		self.new_send_mapping_id_172["track"] = self.track_num(2)
		self.new_send_mapping_id_172["module"] = "self.relative_tracks_dict[6].mixer_device.sends[0]"
		self.new_send_mapping_id_172["element"] = "value"
		self.new_send_mapping_id_172["output_type"] = "val"
		self.new_send_mapping_id_172["minimum"] = round(0,3)
		self.new_send_mapping_id_172["maximum"] = round(100,3)
		self.new_send_mapping_id_172["decimal_places"] = 3
		self.new_send_mapping_id_172["ui_listener"] = "value"
		self.new_send_mapping_id_172["feedback_brain"] = "feedback_range"
		self.new_send_mapping_id_172["ctrl_type"] = "relative"
		self.new_send_mapping_id_172["enc_first"] = 65
		self.new_send_mapping_id_172["enc_second"] = 1
		self.new_send_mapping_id_172["steps"] = 127
		self.new_send_mapping_id_172["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_id_172["LED_feedback"] = "default"
		self.new_send_mapping_id_172["LED_feedback_active"] = "1"
		self.new_send_mapping_id_172["LED_on"] = "127"
		self.new_send_mapping_id_172["LED_off"] = "0"
		self.new_send_mapping_id_172["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_22"]
		self.new_send_mapping_id_172["snap_to"] = True
		self.new_send_mapping_id_172["json_id"] = 172
		self.new_send_mapping_id_172["mapping_name"] = "New Send mapping "
		self.new_send_mapping_id_172["mapping_type"] = "Send"
		self.new_send_mapping_6_id_171 = {}
		self.new_send_mapping_6_id_171["attached_to"] = "midi_cc_ch_0_val_21"
		self.new_send_mapping_6_id_171["track"] = self.track_num(2)
		self.new_send_mapping_6_id_171["module"] = "self.relative_tracks_dict[5].mixer_device.sends[0]"
		self.new_send_mapping_6_id_171["element"] = "value"
		self.new_send_mapping_6_id_171["output_type"] = "val"
		self.new_send_mapping_6_id_171["minimum"] = round(0,3)
		self.new_send_mapping_6_id_171["maximum"] = round(100,3)
		self.new_send_mapping_6_id_171["decimal_places"] = 3
		self.new_send_mapping_6_id_171["ui_listener"] = "value"
		self.new_send_mapping_6_id_171["feedback_brain"] = "feedback_range"
		self.new_send_mapping_6_id_171["ctrl_type"] = "relative"
		self.new_send_mapping_6_id_171["enc_first"] = 65
		self.new_send_mapping_6_id_171["enc_second"] = 1
		self.new_send_mapping_6_id_171["steps"] = 127
		self.new_send_mapping_6_id_171["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_6_id_171["LED_feedback"] = "default"
		self.new_send_mapping_6_id_171["LED_feedback_active"] = "1"
		self.new_send_mapping_6_id_171["LED_on"] = "127"
		self.new_send_mapping_6_id_171["LED_off"] = "0"
		self.new_send_mapping_6_id_171["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_21"]
		self.new_send_mapping_6_id_171["snap_to"] = True
		self.new_send_mapping_6_id_171["json_id"] = 171
		self.new_send_mapping_6_id_171["mapping_name"] = "New Send mapping 6"
		self.new_send_mapping_6_id_171["mapping_type"] = "Send"
		self.new_send_mapping_5_id_170 = {}
		self.new_send_mapping_5_id_170["attached_to"] = "midi_cc_ch_0_val_20"
		self.new_send_mapping_5_id_170["track"] = self.track_num(2)
		self.new_send_mapping_5_id_170["module"] = "self.relative_tracks_dict[4].mixer_device.sends[0]"
		self.new_send_mapping_5_id_170["element"] = "value"
		self.new_send_mapping_5_id_170["output_type"] = "val"
		self.new_send_mapping_5_id_170["minimum"] = round(0,3)
		self.new_send_mapping_5_id_170["maximum"] = round(100,3)
		self.new_send_mapping_5_id_170["decimal_places"] = 3
		self.new_send_mapping_5_id_170["ui_listener"] = "value"
		self.new_send_mapping_5_id_170["feedback_brain"] = "feedback_range"
		self.new_send_mapping_5_id_170["ctrl_type"] = "relative"
		self.new_send_mapping_5_id_170["enc_first"] = 65
		self.new_send_mapping_5_id_170["enc_second"] = 1
		self.new_send_mapping_5_id_170["steps"] = 127
		self.new_send_mapping_5_id_170["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_5_id_170["LED_feedback"] = "default"
		self.new_send_mapping_5_id_170["LED_feedback_active"] = "1"
		self.new_send_mapping_5_id_170["LED_on"] = "127"
		self.new_send_mapping_5_id_170["LED_off"] = "0"
		self.new_send_mapping_5_id_170["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_20"]
		self.new_send_mapping_5_id_170["snap_to"] = True
		self.new_send_mapping_5_id_170["json_id"] = 170
		self.new_send_mapping_5_id_170["mapping_name"] = "New Send mapping 5"
		self.new_send_mapping_5_id_170["mapping_type"] = "Send"
		self.new_send_mapping_4_id_169 = {}
		self.new_send_mapping_4_id_169["attached_to"] = "midi_cc_ch_0_val_19"
		self.new_send_mapping_4_id_169["track"] = self.track_num(2)
		self.new_send_mapping_4_id_169["module"] = "self.relative_tracks_dict[3].mixer_device.sends[0]"
		self.new_send_mapping_4_id_169["element"] = "value"
		self.new_send_mapping_4_id_169["output_type"] = "val"
		self.new_send_mapping_4_id_169["minimum"] = round(0,3)
		self.new_send_mapping_4_id_169["maximum"] = round(100,3)
		self.new_send_mapping_4_id_169["decimal_places"] = 3
		self.new_send_mapping_4_id_169["ui_listener"] = "value"
		self.new_send_mapping_4_id_169["feedback_brain"] = "feedback_range"
		self.new_send_mapping_4_id_169["ctrl_type"] = "relative"
		self.new_send_mapping_4_id_169["enc_first"] = 65
		self.new_send_mapping_4_id_169["enc_second"] = 1
		self.new_send_mapping_4_id_169["steps"] = 127
		self.new_send_mapping_4_id_169["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_4_id_169["LED_feedback"] = "default"
		self.new_send_mapping_4_id_169["LED_feedback_active"] = "1"
		self.new_send_mapping_4_id_169["LED_on"] = "127"
		self.new_send_mapping_4_id_169["LED_off"] = "0"
		self.new_send_mapping_4_id_169["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_19"]
		self.new_send_mapping_4_id_169["snap_to"] = True
		self.new_send_mapping_4_id_169["json_id"] = 169
		self.new_send_mapping_4_id_169["mapping_name"] = "New Send mapping 4"
		self.new_send_mapping_4_id_169["mapping_type"] = "Send"
		self.new_send_mapping_3_id_168 = {}
		self.new_send_mapping_3_id_168["attached_to"] = "midi_cc_ch_0_val_18"
		self.new_send_mapping_3_id_168["track"] = self.track_num(2)
		self.new_send_mapping_3_id_168["module"] = "self.relative_tracks_dict[2].mixer_device.sends[0]"
		self.new_send_mapping_3_id_168["element"] = "value"
		self.new_send_mapping_3_id_168["output_type"] = "val"
		self.new_send_mapping_3_id_168["minimum"] = round(0,3)
		self.new_send_mapping_3_id_168["maximum"] = round(100,3)
		self.new_send_mapping_3_id_168["decimal_places"] = 3
		self.new_send_mapping_3_id_168["ui_listener"] = "value"
		self.new_send_mapping_3_id_168["feedback_brain"] = "feedback_range"
		self.new_send_mapping_3_id_168["ctrl_type"] = "relative"
		self.new_send_mapping_3_id_168["enc_first"] = 65
		self.new_send_mapping_3_id_168["enc_second"] = 1
		self.new_send_mapping_3_id_168["steps"] = 127
		self.new_send_mapping_3_id_168["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_3_id_168["LED_feedback"] = "default"
		self.new_send_mapping_3_id_168["LED_feedback_active"] = "1"
		self.new_send_mapping_3_id_168["LED_on"] = "127"
		self.new_send_mapping_3_id_168["LED_off"] = "0"
		self.new_send_mapping_3_id_168["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_18"]
		self.new_send_mapping_3_id_168["snap_to"] = True
		self.new_send_mapping_3_id_168["json_id"] = 168
		self.new_send_mapping_3_id_168["mapping_name"] = "New Send mapping 3"
		self.new_send_mapping_3_id_168["mapping_type"] = "Send"
		self.new_send_mapping_id_167 = {}
		self.new_send_mapping_id_167["attached_to"] = "midi_cc_ch_0_val_17"
		self.new_send_mapping_id_167["track"] = self.track_num(2)
		self.new_send_mapping_id_167["module"] = "self.relative_tracks_dict[1].mixer_device.sends[0]"
		self.new_send_mapping_id_167["element"] = "value"
		self.new_send_mapping_id_167["output_type"] = "val"
		self.new_send_mapping_id_167["minimum"] = round(0,3)
		self.new_send_mapping_id_167["maximum"] = round(100,3)
		self.new_send_mapping_id_167["decimal_places"] = 3
		self.new_send_mapping_id_167["ui_listener"] = "value"
		self.new_send_mapping_id_167["feedback_brain"] = "feedback_range"
		self.new_send_mapping_id_167["ctrl_type"] = "relative"
		self.new_send_mapping_id_167["enc_first"] = 65
		self.new_send_mapping_id_167["enc_second"] = 1
		self.new_send_mapping_id_167["steps"] = 127
		self.new_send_mapping_id_167["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_id_167["LED_feedback"] = "default"
		self.new_send_mapping_id_167["LED_feedback_active"] = "1"
		self.new_send_mapping_id_167["LED_on"] = "127"
		self.new_send_mapping_id_167["LED_off"] = "0"
		self.new_send_mapping_id_167["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_17"]
		self.new_send_mapping_id_167["snap_to"] = True
		self.new_send_mapping_id_167["json_id"] = 167
		self.new_send_mapping_id_167["mapping_name"] = "New Send mapping "
		self.new_send_mapping_id_167["mapping_type"] = "Send"
		self.new_send_mapping_id_166 = {}
		self.new_send_mapping_id_166["attached_to"] = "midi_cc_ch_0_val_16"
		self.new_send_mapping_id_166["track"] = self.track_num(2)
		self.new_send_mapping_id_166["module"] = "self.relative_tracks_dict[0].mixer_device.sends[0]"
		self.new_send_mapping_id_166["element"] = "value"
		self.new_send_mapping_id_166["output_type"] = "val"
		self.new_send_mapping_id_166["minimum"] = round(0,3)
		self.new_send_mapping_id_166["maximum"] = round(100,3)
		self.new_send_mapping_id_166["decimal_places"] = 3
		self.new_send_mapping_id_166["ui_listener"] = "value"
		self.new_send_mapping_id_166["feedback_brain"] = "feedback_range"
		self.new_send_mapping_id_166["ctrl_type"] = "relative"
		self.new_send_mapping_id_166["enc_first"] = 65
		self.new_send_mapping_id_166["enc_second"] = 1
		self.new_send_mapping_id_166["steps"] = 127
		self.new_send_mapping_id_166["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_id_166["LED_feedback"] = "default"
		self.new_send_mapping_id_166["LED_feedback_active"] = "1"
		self.new_send_mapping_id_166["LED_on"] = "127"
		self.new_send_mapping_id_166["LED_off"] = "0"
		self.new_send_mapping_id_166["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_16"]
		self.new_send_mapping_id_166["snap_to"] = True
		self.new_send_mapping_id_166["json_id"] = 166
		self.new_send_mapping_id_166["mapping_name"] = "New Send mapping "
		self.new_send_mapping_id_166["mapping_type"] = "Send"
		self.mute_1_id_51 = {}
		self.mute_1_id_51["attached_to"] = "midi_note_ch_0_val_16"
		self.mute_1_id_51["track"] = self.track_num(2)
		self.mute_1_id_51["module"] = "self.relative_tracks_dict[0]"
		self.mute_1_id_51["element"] = "mute"
		self.mute_1_id_51["output_type"] = "bool"
		self.mute_1_id_51["ui_listener"] = "mute"
		self.mute_1_id_51["feedback_brain"] = "feedback_bool"
		self.mute_1_id_51["ctrl_type"] = "on/off"
		self.mute_1_id_51["enc_first"] = 127
		self.mute_1_id_51["enc_second"] = 0
		self.mute_1_id_51["switch_type"] = "momentary"
		self.mute_1_id_51["LED_mapping_type_needs_feedback"] = "1"
		self.mute_1_id_51["LED_feedback"] = "default"
		self.mute_1_id_51["LED_feedback_active"] = "1"
		self.mute_1_id_51["LED_on"] = "127"
		self.mute_1_id_51["LED_off"] = "0"
		self.mute_1_id_51["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_16"]
		self.mute_1_id_51["json_id"] = 51
		self.mute_1_id_51["mapping_name"] = "Mute 1"
		self.mute_1_id_51["mapping_type"] = "Mute"
		self.mute_1_id_51["parent_json_id"] = 74
		self.mute_1_id_51["parent_name"] = "pan_8_id_144"
		self.solo_1_id_52 = {}
		self.solo_1_id_52["attached_to"] = "midi_note_ch_0_val_8"
		self.solo_1_id_52["track"] = self.track_num(2)
		self.solo_1_id_52["module"] = "self.relative_tracks_dict[0]"
		self.solo_1_id_52["element"] = "solo"
		self.solo_1_id_52["output_type"] = "bool"
		self.solo_1_id_52["ui_listener"] = "solo"
		self.solo_1_id_52["feedback_brain"] = "feedback_bool"
		self.solo_1_id_52["ctrl_type"] = "on/off"
		self.solo_1_id_52["enc_first"] = 127
		self.solo_1_id_52["enc_second"] = 0
		self.solo_1_id_52["switch_type"] = "momentary"
		self.solo_1_id_52["LED_mapping_type_needs_feedback"] = "1"
		self.solo_1_id_52["LED_feedback"] = "default"
		self.solo_1_id_52["LED_feedback_active"] = "1"
		self.solo_1_id_52["LED_on"] = "127"
		self.solo_1_id_52["LED_off"] = "0"
		self.solo_1_id_52["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_8"]
		self.solo_1_id_52["json_id"] = 52
		self.solo_1_id_52["mapping_name"] = "Solo 1"
		self.solo_1_id_52["mapping_type"] = "Solo"
		self.solo_1_id_52["parent_json_id"] = 74
		self.solo_1_id_52["parent_name"] = "pan_8_id_144"
		self.mute_2_id_54 = {}
		self.mute_2_id_54["attached_to"] = "midi_note_ch_0_val_17"
		self.mute_2_id_54["track"] = self.track_num(2)
		self.mute_2_id_54["module"] = "self.relative_tracks_dict[1]"
		self.mute_2_id_54["element"] = "mute"
		self.mute_2_id_54["output_type"] = "bool"
		self.mute_2_id_54["ui_listener"] = "mute"
		self.mute_2_id_54["feedback_brain"] = "feedback_bool"
		self.mute_2_id_54["ctrl_type"] = "on/off"
		self.mute_2_id_54["enc_first"] = 127
		self.mute_2_id_54["enc_second"] = 0
		self.mute_2_id_54["switch_type"] = "momentary"
		self.mute_2_id_54["LED_mapping_type_needs_feedback"] = "1"
		self.mute_2_id_54["LED_feedback"] = "default"
		self.mute_2_id_54["LED_feedback_active"] = "1"
		self.mute_2_id_54["LED_on"] = "127"
		self.mute_2_id_54["LED_off"] = "0"
		self.mute_2_id_54["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_17"]
		self.mute_2_id_54["json_id"] = 54
		self.mute_2_id_54["mapping_name"] = "Mute 2"
		self.mute_2_id_54["mapping_type"] = "Mute"
		self.mute_2_id_54["parent_json_id"] = 75
		self.mute_2_id_54["parent_name"] = "pan_8_id_144"
		self.solo_2_id_55 = {}
		self.solo_2_id_55["attached_to"] = "midi_note_ch_0_val_9"
		self.solo_2_id_55["track"] = self.track_num(2)
		self.solo_2_id_55["module"] = "self.relative_tracks_dict[1]"
		self.solo_2_id_55["element"] = "solo"
		self.solo_2_id_55["output_type"] = "bool"
		self.solo_2_id_55["ui_listener"] = "solo"
		self.solo_2_id_55["feedback_brain"] = "feedback_bool"
		self.solo_2_id_55["ctrl_type"] = "on/off"
		self.solo_2_id_55["enc_first"] = 127
		self.solo_2_id_55["enc_second"] = 0
		self.solo_2_id_55["switch_type"] = "momentary"
		self.solo_2_id_55["LED_mapping_type_needs_feedback"] = "1"
		self.solo_2_id_55["LED_feedback"] = "default"
		self.solo_2_id_55["LED_feedback_active"] = "1"
		self.solo_2_id_55["LED_on"] = "127"
		self.solo_2_id_55["LED_off"] = "0"
		self.solo_2_id_55["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_9"]
		self.solo_2_id_55["json_id"] = 55
		self.solo_2_id_55["mapping_name"] = "Solo 2"
		self.solo_2_id_55["mapping_type"] = "Solo"
		self.solo_2_id_55["parent_json_id"] = 75
		self.solo_2_id_55["parent_name"] = "pan_8_id_144"
		self.mute_3_id_57 = {}
		self.mute_3_id_57["attached_to"] = "midi_note_ch_0_val_18"
		self.mute_3_id_57["track"] = self.track_num(2)
		self.mute_3_id_57["module"] = "self.relative_tracks_dict[2]"
		self.mute_3_id_57["element"] = "mute"
		self.mute_3_id_57["output_type"] = "bool"
		self.mute_3_id_57["ui_listener"] = "mute"
		self.mute_3_id_57["feedback_brain"] = "feedback_bool"
		self.mute_3_id_57["ctrl_type"] = "on/off"
		self.mute_3_id_57["enc_first"] = 127
		self.mute_3_id_57["enc_second"] = 0
		self.mute_3_id_57["switch_type"] = "momentary"
		self.mute_3_id_57["LED_mapping_type_needs_feedback"] = "1"
		self.mute_3_id_57["LED_feedback"] = "default"
		self.mute_3_id_57["LED_feedback_active"] = "1"
		self.mute_3_id_57["LED_on"] = "127"
		self.mute_3_id_57["LED_off"] = "0"
		self.mute_3_id_57["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_18"]
		self.mute_3_id_57["json_id"] = 57
		self.mute_3_id_57["mapping_name"] = "Mute 3"
		self.mute_3_id_57["mapping_type"] = "Mute"
		self.mute_3_id_57["parent_json_id"] = 76
		self.mute_3_id_57["parent_name"] = "pan_8_id_144"
		self.solo_3_id_58 = {}
		self.solo_3_id_58["attached_to"] = "midi_note_ch_0_val_10"
		self.solo_3_id_58["track"] = self.track_num(2)
		self.solo_3_id_58["module"] = "self.relative_tracks_dict[2]"
		self.solo_3_id_58["element"] = "solo"
		self.solo_3_id_58["output_type"] = "bool"
		self.solo_3_id_58["ui_listener"] = "solo"
		self.solo_3_id_58["feedback_brain"] = "feedback_bool"
		self.solo_3_id_58["ctrl_type"] = "on/off"
		self.solo_3_id_58["enc_first"] = 127
		self.solo_3_id_58["enc_second"] = 0
		self.solo_3_id_58["switch_type"] = "momentary"
		self.solo_3_id_58["LED_mapping_type_needs_feedback"] = "1"
		self.solo_3_id_58["LED_feedback"] = "default"
		self.solo_3_id_58["LED_feedback_active"] = "1"
		self.solo_3_id_58["LED_on"] = "127"
		self.solo_3_id_58["LED_off"] = "0"
		self.solo_3_id_58["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_10"]
		self.solo_3_id_58["json_id"] = 58
		self.solo_3_id_58["mapping_name"] = "Solo 3"
		self.solo_3_id_58["mapping_type"] = "Solo"
		self.solo_3_id_58["parent_json_id"] = 76
		self.solo_3_id_58["parent_name"] = "pan_8_id_144"
		self.mute_4_id_60 = {}
		self.mute_4_id_60["attached_to"] = "midi_note_ch_0_val_19"
		self.mute_4_id_60["track"] = self.track_num(2)
		self.mute_4_id_60["module"] = "self.relative_tracks_dict[3]"
		self.mute_4_id_60["element"] = "mute"
		self.mute_4_id_60["output_type"] = "bool"
		self.mute_4_id_60["ui_listener"] = "mute"
		self.mute_4_id_60["feedback_brain"] = "feedback_bool"
		self.mute_4_id_60["ctrl_type"] = "on/off"
		self.mute_4_id_60["enc_first"] = 127
		self.mute_4_id_60["enc_second"] = 0
		self.mute_4_id_60["switch_type"] = "momentary"
		self.mute_4_id_60["LED_mapping_type_needs_feedback"] = "1"
		self.mute_4_id_60["LED_feedback"] = "default"
		self.mute_4_id_60["LED_feedback_active"] = "1"
		self.mute_4_id_60["LED_on"] = "127"
		self.mute_4_id_60["LED_off"] = "0"
		self.mute_4_id_60["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_19"]
		self.mute_4_id_60["json_id"] = 60
		self.mute_4_id_60["mapping_name"] = "Mute 4"
		self.mute_4_id_60["mapping_type"] = "Mute"
		self.mute_4_id_60["parent_json_id"] = 77
		self.mute_4_id_60["parent_name"] = "pan_8_id_144"
		self.solo_4_id_61 = {}
		self.solo_4_id_61["attached_to"] = "midi_note_ch_0_val_11"
		self.solo_4_id_61["track"] = self.track_num(2)
		self.solo_4_id_61["module"] = "self.relative_tracks_dict[3]"
		self.solo_4_id_61["element"] = "solo"
		self.solo_4_id_61["output_type"] = "bool"
		self.solo_4_id_61["ui_listener"] = "solo"
		self.solo_4_id_61["feedback_brain"] = "feedback_bool"
		self.solo_4_id_61["ctrl_type"] = "on/off"
		self.solo_4_id_61["enc_first"] = 127
		self.solo_4_id_61["enc_second"] = 0
		self.solo_4_id_61["switch_type"] = "momentary"
		self.solo_4_id_61["LED_mapping_type_needs_feedback"] = "1"
		self.solo_4_id_61["LED_feedback"] = "default"
		self.solo_4_id_61["LED_feedback_active"] = "1"
		self.solo_4_id_61["LED_on"] = "127"
		self.solo_4_id_61["LED_off"] = "0"
		self.solo_4_id_61["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_11"]
		self.solo_4_id_61["json_id"] = 61
		self.solo_4_id_61["mapping_name"] = "Solo 4"
		self.solo_4_id_61["mapping_type"] = "Solo"
		self.solo_4_id_61["parent_json_id"] = 77
		self.solo_4_id_61["parent_name"] = "pan_8_id_144"
		self.mute_5_id_63 = {}
		self.mute_5_id_63["attached_to"] = "midi_note_ch_0_val_20"
		self.mute_5_id_63["track"] = self.track_num(2)
		self.mute_5_id_63["module"] = "self.relative_tracks_dict[4]"
		self.mute_5_id_63["element"] = "mute"
		self.mute_5_id_63["output_type"] = "bool"
		self.mute_5_id_63["ui_listener"] = "mute"
		self.mute_5_id_63["feedback_brain"] = "feedback_bool"
		self.mute_5_id_63["ctrl_type"] = "on/off"
		self.mute_5_id_63["enc_first"] = 127
		self.mute_5_id_63["enc_second"] = 0
		self.mute_5_id_63["switch_type"] = "momentary"
		self.mute_5_id_63["LED_mapping_type_needs_feedback"] = "1"
		self.mute_5_id_63["LED_feedback"] = "default"
		self.mute_5_id_63["LED_feedback_active"] = "1"
		self.mute_5_id_63["LED_on"] = "127"
		self.mute_5_id_63["LED_off"] = "0"
		self.mute_5_id_63["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_20"]
		self.mute_5_id_63["json_id"] = 63
		self.mute_5_id_63["mapping_name"] = "Mute 5"
		self.mute_5_id_63["mapping_type"] = "Mute"
		self.mute_5_id_63["parent_json_id"] = 78
		self.mute_5_id_63["parent_name"] = "pan_8_id_144"
		self.solo_5_id_64 = {}
		self.solo_5_id_64["attached_to"] = "midi_note_ch_0_val_12"
		self.solo_5_id_64["track"] = self.track_num(2)
		self.solo_5_id_64["module"] = "self.relative_tracks_dict[4]"
		self.solo_5_id_64["element"] = "solo"
		self.solo_5_id_64["output_type"] = "bool"
		self.solo_5_id_64["ui_listener"] = "solo"
		self.solo_5_id_64["feedback_brain"] = "feedback_bool"
		self.solo_5_id_64["ctrl_type"] = "on/off"
		self.solo_5_id_64["enc_first"] = 127
		self.solo_5_id_64["enc_second"] = 0
		self.solo_5_id_64["switch_type"] = "momentary"
		self.solo_5_id_64["LED_mapping_type_needs_feedback"] = "1"
		self.solo_5_id_64["LED_feedback"] = "default"
		self.solo_5_id_64["LED_feedback_active"] = "1"
		self.solo_5_id_64["LED_on"] = "127"
		self.solo_5_id_64["LED_off"] = "0"
		self.solo_5_id_64["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_12"]
		self.solo_5_id_64["json_id"] = 64
		self.solo_5_id_64["mapping_name"] = "Solo 5"
		self.solo_5_id_64["mapping_type"] = "Solo"
		self.solo_5_id_64["parent_json_id"] = 78
		self.solo_5_id_64["parent_name"] = "pan_8_id_144"
		self.mute_6_id_66 = {}
		self.mute_6_id_66["attached_to"] = "midi_note_ch_0_val_21"
		self.mute_6_id_66["track"] = self.track_num(2)
		self.mute_6_id_66["module"] = "self.relative_tracks_dict[5]"
		self.mute_6_id_66["element"] = "mute"
		self.mute_6_id_66["output_type"] = "bool"
		self.mute_6_id_66["ui_listener"] = "mute"
		self.mute_6_id_66["feedback_brain"] = "feedback_bool"
		self.mute_6_id_66["ctrl_type"] = "on/off"
		self.mute_6_id_66["enc_first"] = 127
		self.mute_6_id_66["enc_second"] = 0
		self.mute_6_id_66["switch_type"] = "momentary"
		self.mute_6_id_66["LED_mapping_type_needs_feedback"] = "1"
		self.mute_6_id_66["LED_feedback"] = "default"
		self.mute_6_id_66["LED_feedback_active"] = "1"
		self.mute_6_id_66["LED_on"] = "127"
		self.mute_6_id_66["LED_off"] = "0"
		self.mute_6_id_66["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_21"]
		self.mute_6_id_66["json_id"] = 66
		self.mute_6_id_66["mapping_name"] = "Mute 6"
		self.mute_6_id_66["mapping_type"] = "Mute"
		self.mute_6_id_66["parent_json_id"] = 79
		self.mute_6_id_66["parent_name"] = "pan_8_id_144"
		self.solo_6_id_67 = {}
		self.solo_6_id_67["attached_to"] = "midi_note_ch_0_val_13"
		self.solo_6_id_67["track"] = self.track_num(2)
		self.solo_6_id_67["module"] = "self.relative_tracks_dict[5]"
		self.solo_6_id_67["element"] = "solo"
		self.solo_6_id_67["output_type"] = "bool"
		self.solo_6_id_67["ui_listener"] = "solo"
		self.solo_6_id_67["feedback_brain"] = "feedback_bool"
		self.solo_6_id_67["ctrl_type"] = "on/off"
		self.solo_6_id_67["enc_first"] = 127
		self.solo_6_id_67["enc_second"] = 0
		self.solo_6_id_67["switch_type"] = "momentary"
		self.solo_6_id_67["LED_mapping_type_needs_feedback"] = "1"
		self.solo_6_id_67["LED_feedback"] = "default"
		self.solo_6_id_67["LED_feedback_active"] = "1"
		self.solo_6_id_67["LED_on"] = "127"
		self.solo_6_id_67["LED_off"] = "0"
		self.solo_6_id_67["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_13"]
		self.solo_6_id_67["json_id"] = 67
		self.solo_6_id_67["mapping_name"] = "Solo 6"
		self.solo_6_id_67["mapping_type"] = "Solo"
		self.solo_6_id_67["parent_json_id"] = 79
		self.solo_6_id_67["parent_name"] = "pan_8_id_144"
		self.mute_7_id_69 = {}
		self.mute_7_id_69["attached_to"] = "midi_note_ch_0_val_22"
		self.mute_7_id_69["track"] = self.track_num(2)
		self.mute_7_id_69["module"] = "self.relative_tracks_dict[6]"
		self.mute_7_id_69["element"] = "mute"
		self.mute_7_id_69["output_type"] = "bool"
		self.mute_7_id_69["ui_listener"] = "mute"
		self.mute_7_id_69["feedback_brain"] = "feedback_bool"
		self.mute_7_id_69["ctrl_type"] = "on/off"
		self.mute_7_id_69["enc_first"] = 127
		self.mute_7_id_69["enc_second"] = 0
		self.mute_7_id_69["switch_type"] = "momentary"
		self.mute_7_id_69["LED_mapping_type_needs_feedback"] = "1"
		self.mute_7_id_69["LED_feedback"] = "default"
		self.mute_7_id_69["LED_feedback_active"] = "1"
		self.mute_7_id_69["LED_on"] = "127"
		self.mute_7_id_69["LED_off"] = "0"
		self.mute_7_id_69["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_22"]
		self.mute_7_id_69["json_id"] = 69
		self.mute_7_id_69["mapping_name"] = "Mute 7"
		self.mute_7_id_69["mapping_type"] = "Mute"
		self.mute_7_id_69["parent_json_id"] = 80
		self.mute_7_id_69["parent_name"] = "pan_8_id_144"
		self.solo_7_id_70 = {}
		self.solo_7_id_70["attached_to"] = "midi_note_ch_0_val_14"
		self.solo_7_id_70["track"] = self.track_num(2)
		self.solo_7_id_70["module"] = "self.relative_tracks_dict[6]"
		self.solo_7_id_70["element"] = "solo"
		self.solo_7_id_70["output_type"] = "bool"
		self.solo_7_id_70["ui_listener"] = "solo"
		self.solo_7_id_70["feedback_brain"] = "feedback_bool"
		self.solo_7_id_70["ctrl_type"] = "on/off"
		self.solo_7_id_70["enc_first"] = 127
		self.solo_7_id_70["enc_second"] = 0
		self.solo_7_id_70["switch_type"] = "momentary"
		self.solo_7_id_70["LED_mapping_type_needs_feedback"] = "1"
		self.solo_7_id_70["LED_feedback"] = "default"
		self.solo_7_id_70["LED_feedback_active"] = "1"
		self.solo_7_id_70["LED_on"] = "127"
		self.solo_7_id_70["LED_off"] = "0"
		self.solo_7_id_70["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_14"]
		self.solo_7_id_70["json_id"] = 70
		self.solo_7_id_70["mapping_name"] = "Solo 7"
		self.solo_7_id_70["mapping_type"] = "Solo"
		self.solo_7_id_70["parent_json_id"] = 80
		self.solo_7_id_70["parent_name"] = "pan_8_id_144"
		self.mute_8_id_72 = {}
		self.mute_8_id_72["attached_to"] = "midi_note_ch_0_val_23"
		self.mute_8_id_72["track"] = self.track_num(2)
		self.mute_8_id_72["module"] = "self.relative_tracks_dict[7]"
		self.mute_8_id_72["element"] = "mute"
		self.mute_8_id_72["output_type"] = "bool"
		self.mute_8_id_72["ui_listener"] = "mute"
		self.mute_8_id_72["feedback_brain"] = "feedback_bool"
		self.mute_8_id_72["ctrl_type"] = "on/off"
		self.mute_8_id_72["enc_first"] = 127
		self.mute_8_id_72["enc_second"] = 0
		self.mute_8_id_72["switch_type"] = "momentary"
		self.mute_8_id_72["LED_mapping_type_needs_feedback"] = "1"
		self.mute_8_id_72["LED_feedback"] = "default"
		self.mute_8_id_72["LED_feedback_active"] = "1"
		self.mute_8_id_72["LED_on"] = "127"
		self.mute_8_id_72["LED_off"] = "0"
		self.mute_8_id_72["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_23"]
		self.mute_8_id_72["json_id"] = 72
		self.mute_8_id_72["mapping_name"] = "Mute 8"
		self.mute_8_id_72["mapping_type"] = "Mute"
		self.mute_8_id_72["parent_json_id"] = 81
		self.mute_8_id_72["parent_name"] = "pan_8_id_144"
		self.solo_8_id_73 = {}
		self.solo_8_id_73["attached_to"] = "midi_note_ch_0_val_15"
		self.solo_8_id_73["track"] = self.track_num(2)
		self.solo_8_id_73["module"] = "self.relative_tracks_dict[7]"
		self.solo_8_id_73["element"] = "solo"
		self.solo_8_id_73["output_type"] = "bool"
		self.solo_8_id_73["ui_listener"] = "solo"
		self.solo_8_id_73["feedback_brain"] = "feedback_bool"
		self.solo_8_id_73["ctrl_type"] = "on/off"
		self.solo_8_id_73["enc_first"] = 127
		self.solo_8_id_73["enc_second"] = 0
		self.solo_8_id_73["switch_type"] = "momentary"
		self.solo_8_id_73["LED_mapping_type_needs_feedback"] = "1"
		self.solo_8_id_73["LED_feedback"] = "default"
		self.solo_8_id_73["LED_feedback_active"] = "1"
		self.solo_8_id_73["LED_on"] = "127"
		self.solo_8_id_73["LED_off"] = "0"
		self.solo_8_id_73["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_15"]
		self.solo_8_id_73["json_id"] = 73
		self.solo_8_id_73["mapping_name"] = "Solo 8"
		self.solo_8_id_73["mapping_type"] = "Solo"
		self.solo_8_id_73["parent_json_id"] = 81
		self.solo_8_id_73["parent_name"] = "pan_8_id_144"
		self.play_1_id_83 = {}
		self.play_1_id_83["attached_to"] = "midi_note_ch_0_val_94"
		self.play_1_id_83["module"] = "self.song()"
		self.play_1_id_83["element"] = "start_playing"
		self.play_1_id_83["output_type"] = "func"
		self.play_1_id_83["func_arg"] = ""
		self.play_1_id_83["ui_listener"] = "is_playing"
		self.play_1_id_83["feedback_brain"] = "feedback_bool"
		self.play_1_id_83["ctrl_type"] = "on/off"
		self.play_1_id_83["enc_first"] = 127
		self.play_1_id_83["enc_second"] = 0
		self.play_1_id_83["switch_type"] = "momentary"
		self.play_1_id_83["LED_mapping_type_needs_feedback"] = "1"
		self.play_1_id_83["LED_feedback"] = "default"
		self.play_1_id_83["LED_feedback_active"] = "1"
		self.play_1_id_83["LED_on"] = "127"
		self.play_1_id_83["LED_off"] = "0"
		self.play_1_id_83["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_94"]
		self.play_1_id_83["json_id"] = 83
		self.play_1_id_83["mapping_name"] = "Play 1"
		self.play_1_id_83["mapping_type"] = "Play"
		self.play_1_id_83["parent_json_id"] = 49
		self.play_1_id_83["parent_name"] = "pan_id_49"
		self.stop_1_id_84 = {}
		self.stop_1_id_84["attached_to"] = "midi_note_ch_0_val_93"
		self.stop_1_id_84["module"] = "self.song()"
		self.stop_1_id_84["element"] = "stop_playing"
		self.stop_1_id_84["output_type"] = "func"
		self.stop_1_id_84["func_arg"] = ""
		self.stop_1_id_84["ui_listener"] = "is_playing"
		self.stop_1_id_84["feedback_brain"] = "feedback_bool"
		self.stop_1_id_84["ctrl_type"] = "on/off"
		self.stop_1_id_84["enc_first"] = 127
		self.stop_1_id_84["enc_second"] = 0
		self.stop_1_id_84["switch_type"] = "momentary"
		self.stop_1_id_84["LED_mapping_type_needs_feedback"] = "1"
		self.stop_1_id_84["LED_feedback"] = "default"
		self.stop_1_id_84["LED_feedback_active"] = "1"
		self.stop_1_id_84["LED_on"] = "127"
		self.stop_1_id_84["LED_off"] = "0"
		self.stop_1_id_84["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_93"]
		self.stop_1_id_84["json_id"] = 84
		self.stop_1_id_84["mapping_name"] = "Stop 1"
		self.stop_1_id_84["mapping_type"] = "Stop"
		self.stop_1_id_84["parent_json_id"] = 49
		self.stop_1_id_84["parent_name"] = "pan_id_49"
		self.undo_1_id_86 = {}
		self.undo_1_id_86["attached_to"] = "midi_note_ch_0_val_91"
		self.undo_1_id_86["module"] = "self.song()"
		self.undo_1_id_86["element"] = "undo"
		self.undo_1_id_86["output_type"] = "func"
		self.undo_1_id_86["func_arg"] = ""
		self.undo_1_id_86["ctrl_type"] = "on/off"
		self.undo_1_id_86["enc_first"] = 127
		self.undo_1_id_86["enc_second"] = 0
		self.undo_1_id_86["switch_type"] = "momentary"
		self.undo_1_id_86["json_id"] = 86
		self.undo_1_id_86["mapping_name"] = "Undo 1"
		self.undo_1_id_86["mapping_type"] = "Undo"
		self.undo_1_id_86["parent_json_id"] = 49
		self.undo_1_id_86["parent_name"] = "pan_id_49"
		self.pan_id_91 = {}
		self.pan_id_91["attached_to"] = "midi_note_ch_0_val_98"
		self.pan_id_91["module"] = "self"
		self.pan_id_91["element"] = "set_active_mode"
		self.pan_id_91["output_type"] = "func"
		self.pan_id_91["func_arg"] = "1"
		self.pan_id_91["ui_listener"] = "value"
		self.pan_id_91["feedback_brain"] = "feedback_scroll_mode_selector_select"
		self.pan_id_91["ctrl_type"] = "on/off"
		self.pan_id_91["enc_first"] = 127
		self.pan_id_91["enc_second"] = 0
		self.pan_id_91["switch_type"] = "momentary"
		self.pan_id_91["LED_mapping_type_needs_feedback"] = ""
		self.pan_id_91["LED_feedback"] = "default"
		self.pan_id_91["LED_feedback_active"] = "1"
		self.pan_id_91["LED_on"] = "127"
		self.pan_id_91["LED_off"] = "0"
		self.pan_id_91["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_98"]
		self.pan_id_91["json_id"] = 91
		self.pan_id_91["mapping_name"] = "pan"
		self.pan_id_91["mapping_type"] = "Mode Selector"
		self.pan_id_91["parent_json_id"] = 49
		self.pan_id_91["parent_name"] = "pan_id_49"
		self.aux_id_92 = {}
		self.aux_id_92["attached_to"] = "midi_note_ch_0_val_99"
		self.aux_id_92["module"] = "self"
		self.aux_id_92["element"] = "set_active_mode"
		self.aux_id_92["output_type"] = "func"
		self.aux_id_92["func_arg"] = "4"
		self.aux_id_92["ui_listener"] = "value"
		self.aux_id_92["feedback_brain"] = "feedback_scroll_mode_selector_select"
		self.aux_id_92["ctrl_type"] = "on/off"
		self.aux_id_92["enc_first"] = 127
		self.aux_id_92["enc_second"] = 0
		self.aux_id_92["switch_type"] = "momentary"
		self.aux_id_92["LED_mapping_type_needs_feedback"] = ""
		self.aux_id_92["LED_feedback"] = "default"
		self.aux_id_92["LED_feedback_active"] = "1"
		self.aux_id_92["LED_on"] = "127"
		self.aux_id_92["LED_off"] = "0"
		self.aux_id_92["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_99"]
		self.aux_id_92["json_id"] = 92
		self.aux_id_92["mapping_name"] = "aux"
		self.aux_id_92["mapping_type"] = "Mode Selector"
		self.aux_id_92["parent_json_id"] = 49
		self.aux_id_92["parent_name"] = "pan_id_49"
	def _mode4_configs(self):
		self.mode_4_configs_map = [
			"new_parameter_mapping_copy_312_id_312",
			"new_parameter_mapping_copy_300_copy_313_id_313",
			"new_parameter_mapping_copy_298_copy_314_id_314",
			"new_parameter_mapping_copy_298_copy_302_copy_315_id_315",
			"new_parameter_mapping_copy_297_copy_316_id_316",
			"new_parameter_mapping_copy_297_copy_301_copy_317_id_317",
			"new_parameter_mapping_copy_297_copy_299_copy_318_id_318",
			"new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319",
			"new_arm_mapping_copy_287_copy_357_id_357",
			"new_arm_mapping_copy_271_copy_286_copy_361_id_361",
			"new_arm_mapping_copy_285_copy_365_id_365",
			"new_arm_mapping_copy_270_copy_284_copy_369_id_369",
			"new_arm_mapping_copy_267_copy_283_copy_373_id_373",
			"new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377",
			"new_arm_mapping_copy_266_copy_281_copy_381_id_381",
			"new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385",
			"new_session_box_navigation_mapping_copy_253_id_253",
			"new_session_box_navigation_mapping_copy_253_copy_261_id_261",
			"new_session_box_navigation_mapping_copy_253_copy_257_id_257",
			"new_send_mapping_copy_182_id_182",
			"new_send_mapping_copy_183_id_183",
			"new_send_mapping_6_copy_184_id_184",
			"new_send_mapping_5_copy_185_id_185",
			"new_send_mapping_4_copy_186_id_186",
			"new_send_mapping_3_copy_187_id_187",
			"new_send_mapping_copy_188_id_188",
			"new_send_mapping_copy_189_id_189",
			"mute_1_id_95",
			"solo_1_id_96",
			"mute_2_id_98",
			"solo_2_id_99",
			"mute_3_id_101",
			"solo_3_id_102",
			"mute_4_id_104",
			"solo_4_id_105",
			"mute_5_id_107",
			"solo_5_id_108",
			"mute_6_id_110",
			"solo_6_id_111",
			"mute_7_id_113",
			"solo_7_id_114",
			"mute_8_id_116",
			"solo_8_id_117",
			"play_1_id_127",
			"stop_1_id_128",
			"undo_1_id_130",
			"pan_id_135",
			"aux_id_136"]
		self.new_parameter_mapping_copy_312_id_312 = {}
		self.new_parameter_mapping_copy_312_id_312["attached_to"] = "midi_cc_ch_0_val_0"
		self.new_parameter_mapping_copy_312_id_312["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_312_id_312["module"] = "self.relative_tracks_dict[0].devices[0].parameters[1]"
		self.new_parameter_mapping_copy_312_id_312["element"] = "value"
		self.new_parameter_mapping_copy_312_id_312["output_type"] = "val"
		self.new_parameter_mapping_copy_312_id_312["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_312_id_312["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_312_id_312["decimal_places"] = 2
		self.new_parameter_mapping_copy_312_id_312["ui_listener"] = "value"
		self.new_parameter_mapping_copy_312_id_312["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_312_id_312["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_312_id_312["enc_first"] = 0
		self.new_parameter_mapping_copy_312_id_312["enc_second"] = 127
		self.new_parameter_mapping_copy_312_id_312["reverse_mode"] = False
		self.new_parameter_mapping_copy_312_id_312["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_312_id_312["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_312_id_312["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_312_id_312["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_312_id_312["LED_on"] = "127"
		self.new_parameter_mapping_copy_312_id_312["LED_off"] = "0"
		self.new_parameter_mapping_copy_312_id_312["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_0"]
		self.new_parameter_mapping_copy_312_id_312["snap_to"] = True
		self.new_parameter_mapping_copy_312_id_312["json_id"] = 312
		self.new_parameter_mapping_copy_312_id_312["mapping_name"] = "New Parameter mapping  copy 312"
		self.new_parameter_mapping_copy_312_id_312["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_300_copy_313_id_313 = {}
		self.new_parameter_mapping_copy_300_copy_313_id_313["attached_to"] = "midi_cc_ch_1_val_0"
		self.new_parameter_mapping_copy_300_copy_313_id_313["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_300_copy_313_id_313["module"] = "self.relative_tracks_dict[0].devices[0].parameters[2]"
		self.new_parameter_mapping_copy_300_copy_313_id_313["element"] = "value"
		self.new_parameter_mapping_copy_300_copy_313_id_313["output_type"] = "val"
		self.new_parameter_mapping_copy_300_copy_313_id_313["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_300_copy_313_id_313["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_300_copy_313_id_313["decimal_places"] = 2
		self.new_parameter_mapping_copy_300_copy_313_id_313["ui_listener"] = "value"
		self.new_parameter_mapping_copy_300_copy_313_id_313["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_300_copy_313_id_313["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_300_copy_313_id_313["enc_first"] = 0
		self.new_parameter_mapping_copy_300_copy_313_id_313["enc_second"] = 127
		self.new_parameter_mapping_copy_300_copy_313_id_313["reverse_mode"] = False
		self.new_parameter_mapping_copy_300_copy_313_id_313["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_300_copy_313_id_313["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_300_copy_313_id_313["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_300_copy_313_id_313["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_300_copy_313_id_313["LED_on"] = "127"
		self.new_parameter_mapping_copy_300_copy_313_id_313["LED_off"] = "0"
		self.new_parameter_mapping_copy_300_copy_313_id_313["LED_send_feedback_to_selected"] = ["midi_cc_ch_1_val_0"]
		self.new_parameter_mapping_copy_300_copy_313_id_313["snap_to"] = True
		self.new_parameter_mapping_copy_300_copy_313_id_313["json_id"] = 313
		self.new_parameter_mapping_copy_300_copy_313_id_313["mapping_name"] = "New Parameter mapping  copy 300 copy 313"
		self.new_parameter_mapping_copy_300_copy_313_id_313["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_298_copy_314_id_314 = {}
		self.new_parameter_mapping_copy_298_copy_314_id_314["attached_to"] = "midi_cc_ch_2_val_0"
		self.new_parameter_mapping_copy_298_copy_314_id_314["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_298_copy_314_id_314["module"] = "self.relative_tracks_dict[0].devices[0].parameters[3]"
		self.new_parameter_mapping_copy_298_copy_314_id_314["element"] = "value"
		self.new_parameter_mapping_copy_298_copy_314_id_314["output_type"] = "val"
		self.new_parameter_mapping_copy_298_copy_314_id_314["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_298_copy_314_id_314["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_298_copy_314_id_314["decimal_places"] = 2
		self.new_parameter_mapping_copy_298_copy_314_id_314["ui_listener"] = "value"
		self.new_parameter_mapping_copy_298_copy_314_id_314["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_298_copy_314_id_314["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_298_copy_314_id_314["enc_first"] = 0
		self.new_parameter_mapping_copy_298_copy_314_id_314["enc_second"] = 127
		self.new_parameter_mapping_copy_298_copy_314_id_314["reverse_mode"] = False
		self.new_parameter_mapping_copy_298_copy_314_id_314["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_298_copy_314_id_314["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_298_copy_314_id_314["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_298_copy_314_id_314["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_298_copy_314_id_314["LED_on"] = "127"
		self.new_parameter_mapping_copy_298_copy_314_id_314["LED_off"] = "0"
		self.new_parameter_mapping_copy_298_copy_314_id_314["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_0"]
		self.new_parameter_mapping_copy_298_copy_314_id_314["snap_to"] = True
		self.new_parameter_mapping_copy_298_copy_314_id_314["json_id"] = 314
		self.new_parameter_mapping_copy_298_copy_314_id_314["mapping_name"] = "New Parameter mapping  copy 298 copy 314"
		self.new_parameter_mapping_copy_298_copy_314_id_314["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315 = {}
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["attached_to"] = "midi_cc_ch_3_val_0"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["module"] = "self.relative_tracks_dict[0].devices[0].parameters[4]"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["element"] = "value"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["output_type"] = "val"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["decimal_places"] = 2
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["ui_listener"] = "value"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["enc_first"] = 0
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["enc_second"] = 127
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["reverse_mode"] = False
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["LED_on"] = "127"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["LED_off"] = "0"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["LED_send_feedback_to_selected"] = ["midi_cc_ch_3_val_0"]
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["snap_to"] = True
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["json_id"] = 315
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["mapping_name"] = "New Parameter mapping  copy 298 copy 302 copy 315"
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_316_id_316 = {}
		self.new_parameter_mapping_copy_297_copy_316_id_316["attached_to"] = "midi_cc_ch_4_val_0"
		self.new_parameter_mapping_copy_297_copy_316_id_316["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_316_id_316["module"] = "self.relative_tracks_dict[0].devices[0].parameters[5]"
		self.new_parameter_mapping_copy_297_copy_316_id_316["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_316_id_316["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_316_id_316["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_316_id_316["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_316_id_316["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_316_id_316["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_316_id_316["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_316_id_316["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_316_id_316["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_316_id_316["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_316_id_316["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_316_id_316["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_316_id_316["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_316_id_316["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_316_id_316["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_316_id_316["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_316_id_316["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_316_id_316["LED_send_feedback_to_selected"] = ["midi_cc_ch_4_val_0"]
		self.new_parameter_mapping_copy_297_copy_316_id_316["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_316_id_316["json_id"] = 316
		self.new_parameter_mapping_copy_297_copy_316_id_316["mapping_name"] = "New Parameter mapping  copy 297 copy 316"
		self.new_parameter_mapping_copy_297_copy_316_id_316["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317 = {}
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["attached_to"] = "midi_cc_ch_5_val_0"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["module"] = "self.relative_tracks_dict[0].devices[0].parameters[6]"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["LED_send_feedback_to_selected"] = ["midi_cc_ch_5_val_0"]
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["json_id"] = 317
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["mapping_name"] = "New Parameter mapping  copy 297 copy 301 copy 317"
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318 = {}
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["attached_to"] = "midi_cc_ch_6_val_0"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["module"] = "self.relative_tracks_dict[0].devices[0].parameters[7]"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["LED_send_feedback_to_selected"] = ["midi_cc_ch_6_val_0"]
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["json_id"] = 318
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["mapping_name"] = "New Parameter mapping  copy 297 copy 299 copy 318"
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319 = {}
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["attached_to"] = "midi_cc_ch_7_val_0"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["module"] = "self.relative_tracks_dict[0].devices[0].parameters[8]"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["LED_send_feedback_to_selected"] = ["midi_cc_ch_7_val_0"]
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["json_id"] = 319
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["mapping_name"] = "New Parameter mapping  copy 297 copy 299 copy 303 copy 319"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["mapping_type"] = "Parameter"
		self.new_arm_mapping_copy_287_copy_357_id_357 = {}
		self.new_arm_mapping_copy_287_copy_357_id_357["attached_to"] = "midi_note_ch_0_val_4"
		self.new_arm_mapping_copy_287_copy_357_id_357["track"] = self.track_num(2)
		self.new_arm_mapping_copy_287_copy_357_id_357["module"] = "self.relative_tracks_dict[4]"
		self.new_arm_mapping_copy_287_copy_357_id_357["element"] = "arm"
		self.new_arm_mapping_copy_287_copy_357_id_357["output_type"] = "bool"
		self.new_arm_mapping_copy_287_copy_357_id_357["ui_listener"] = "arm"
		self.new_arm_mapping_copy_287_copy_357_id_357["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_287_copy_357_id_357["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_287_copy_357_id_357["enc_first"] = 127
		self.new_arm_mapping_copy_287_copy_357_id_357["enc_second"] = 0
		self.new_arm_mapping_copy_287_copy_357_id_357["switch_type"] = "momentary"
		self.new_arm_mapping_copy_287_copy_357_id_357["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_287_copy_357_id_357["LED_feedback"] = "default"
		self.new_arm_mapping_copy_287_copy_357_id_357["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_287_copy_357_id_357["LED_on"] = "127"
		self.new_arm_mapping_copy_287_copy_357_id_357["LED_off"] = "0"
		self.new_arm_mapping_copy_287_copy_357_id_357["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_4"]
		self.new_arm_mapping_copy_287_copy_357_id_357["json_id"] = 357
		self.new_arm_mapping_copy_287_copy_357_id_357["mapping_name"] = "New Arm mapping  copy 287 copy 357"
		self.new_arm_mapping_copy_287_copy_357_id_357["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361 = {}
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["attached_to"] = "midi_note_ch_0_val_1"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["track"] = self.track_num(2)
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["module"] = "self.relative_tracks_dict[1]"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["element"] = "arm"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["output_type"] = "bool"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["ui_listener"] = "arm"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["enc_first"] = 127
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["enc_second"] = 0
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["switch_type"] = "momentary"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["LED_feedback"] = "default"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["LED_on"] = "127"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["LED_off"] = "0"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_1"]
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["json_id"] = 361
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["mapping_name"] = "New Arm mapping  copy 271 copy 286 copy 361"
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_285_copy_365_id_365 = {}
		self.new_arm_mapping_copy_285_copy_365_id_365["attached_to"] = "midi_note_ch_0_val_0"
		self.new_arm_mapping_copy_285_copy_365_id_365["track"] = self.track_num(2)
		self.new_arm_mapping_copy_285_copy_365_id_365["module"] = "self.relative_tracks_dict[0]"
		self.new_arm_mapping_copy_285_copy_365_id_365["element"] = "arm"
		self.new_arm_mapping_copy_285_copy_365_id_365["output_type"] = "bool"
		self.new_arm_mapping_copy_285_copy_365_id_365["ui_listener"] = "arm"
		self.new_arm_mapping_copy_285_copy_365_id_365["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_285_copy_365_id_365["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_285_copy_365_id_365["enc_first"] = 127
		self.new_arm_mapping_copy_285_copy_365_id_365["enc_second"] = 0
		self.new_arm_mapping_copy_285_copy_365_id_365["switch_type"] = "momentary"
		self.new_arm_mapping_copy_285_copy_365_id_365["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_285_copy_365_id_365["LED_feedback"] = "default"
		self.new_arm_mapping_copy_285_copy_365_id_365["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_285_copy_365_id_365["LED_on"] = "127"
		self.new_arm_mapping_copy_285_copy_365_id_365["LED_off"] = "0"
		self.new_arm_mapping_copy_285_copy_365_id_365["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_0"]
		self.new_arm_mapping_copy_285_copy_365_id_365["json_id"] = 365
		self.new_arm_mapping_copy_285_copy_365_id_365["mapping_name"] = "New Arm mapping  copy 285 copy 365"
		self.new_arm_mapping_copy_285_copy_365_id_365["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369 = {}
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["attached_to"] = "midi_note_ch_0_val_5"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["track"] = self.track_num(2)
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["module"] = "self.relative_tracks_dict[5]"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["element"] = "arm"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["output_type"] = "bool"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["ui_listener"] = "arm"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["enc_first"] = 127
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["enc_second"] = 0
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["switch_type"] = "momentary"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["LED_feedback"] = "default"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["LED_on"] = "127"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["LED_off"] = "0"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_5"]
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["json_id"] = 369
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["mapping_name"] = "New Arm mapping  copy 270 copy 284 copy 369"
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373 = {}
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["attached_to"] = "midi_note_ch_0_val_2"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["track"] = self.track_num(2)
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["module"] = "self.relative_tracks_dict[2]"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["element"] = "arm"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["output_type"] = "bool"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["ui_listener"] = "arm"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["enc_first"] = 127
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["enc_second"] = 0
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["switch_type"] = "momentary"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["LED_feedback"] = "default"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["LED_on"] = "127"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["LED_off"] = "0"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_2"]
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["json_id"] = 373
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["mapping_name"] = "New Arm mapping  copy 267 copy 283 copy 373"
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377 = {}
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["attached_to"] = "midi_note_ch_0_val_6"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["track"] = self.track_num(2)
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["module"] = "self.relative_tracks_dict[6]"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["element"] = "arm"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["output_type"] = "bool"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["ui_listener"] = "arm"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["enc_first"] = 127
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["enc_second"] = 0
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["switch_type"] = "momentary"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["LED_feedback"] = "default"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["LED_on"] = "127"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["LED_off"] = "0"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_6"]
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["json_id"] = 377
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["mapping_name"] = "New Arm mapping  copy 267 copy 269 copy 282 copy 377"
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381 = {}
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["attached_to"] = "midi_note_ch_0_val_3"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["track"] = self.track_num(2)
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["module"] = "self.relative_tracks_dict[3]"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["element"] = "arm"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["output_type"] = "bool"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["ui_listener"] = "arm"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["enc_first"] = 127
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["enc_second"] = 0
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["switch_type"] = "momentary"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["LED_feedback"] = "default"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["LED_on"] = "127"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["LED_off"] = "0"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_3"]
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["json_id"] = 381
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["mapping_name"] = "New Arm mapping  copy 266 copy 281 copy 381"
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385 = {}
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["attached_to"] = "midi_note_ch_0_val_7"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["track"] = self.track_num(2)
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["module"] = "self.relative_tracks_dict[7]"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["element"] = "arm"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["output_type"] = "bool"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["ui_listener"] = "arm"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["enc_first"] = 127
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["enc_second"] = 0
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["switch_type"] = "momentary"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["LED_feedback"] = "default"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["LED_on"] = "127"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["LED_off"] = "0"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_7"]
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["json_id"] = 385
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["mapping_name"] = "New Arm mapping  copy 266 copy 268 copy 280 copy 385"
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["mapping_type"] = "Arm"
		self.new_session_box_navigation_mapping_copy_253_id_253 = {}
		self.new_session_box_navigation_mapping_copy_253_id_253["attached_to"] = "midi_note_ch_0_val_92"
		self.new_session_box_navigation_mapping_copy_253_id_253["module"] = "self"
		self.new_session_box_navigation_mapping_copy_253_id_253["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_253_id_253["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_253_id_253["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_253_id_253["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_253_id_253["highlight_number"] = 0
		self.new_session_box_navigation_mapping_copy_253_id_253["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_253_id_253["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_253_id_253["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_253_id_253["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_253_id_253["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_253_id_253["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_253_id_253["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_253_id_253["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_253_id_253["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_253_id_253["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_253_id_253["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_253_id_253["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_92"]
		self.new_session_box_navigation_mapping_copy_253_id_253["json_id"] = 253
		self.new_session_box_navigation_mapping_copy_253_id_253["mapping_name"] = "New Session Box Navigation mapping  copy 253"
		self.new_session_box_navigation_mapping_copy_253_id_253["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261 = {}
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["attached_to"] = "midi_note_ch_0_val_46"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["module"] = "self"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["highlight_number"] = 8
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_46"]
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["json_id"] = 261
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["mapping_name"] = "New Session Box Navigation mapping  copy 253 copy 261"
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257 = {}
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["attached_to"] = "midi_note_ch_0_val_47"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["module"] = "self"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["highlight_number"] = 16
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_47"]
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["json_id"] = 257
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["mapping_name"] = "New Session Box Navigation mapping  copy 253 copy 257"
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257["mapping_type"] = "Session Box Navigation"
		self.new_send_mapping_copy_182_id_182 = {}
		self.new_send_mapping_copy_182_id_182["attached_to"] = "midi_cc_ch_0_val_23"
		self.new_send_mapping_copy_182_id_182["track"] = self.track_num(2)
		self.new_send_mapping_copy_182_id_182["module"] = "self.relative_tracks_dict[7].mixer_device.sends[1]"
		self.new_send_mapping_copy_182_id_182["element"] = "value"
		self.new_send_mapping_copy_182_id_182["output_type"] = "val"
		self.new_send_mapping_copy_182_id_182["minimum"] = round(0,3)
		self.new_send_mapping_copy_182_id_182["maximum"] = round(100,3)
		self.new_send_mapping_copy_182_id_182["decimal_places"] = 3
		self.new_send_mapping_copy_182_id_182["ui_listener"] = "value"
		self.new_send_mapping_copy_182_id_182["feedback_brain"] = "feedback_range"
		self.new_send_mapping_copy_182_id_182["ctrl_type"] = "relative"
		self.new_send_mapping_copy_182_id_182["enc_first"] = 65
		self.new_send_mapping_copy_182_id_182["enc_second"] = 1
		self.new_send_mapping_copy_182_id_182["steps"] = 127
		self.new_send_mapping_copy_182_id_182["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_copy_182_id_182["LED_feedback"] = "default"
		self.new_send_mapping_copy_182_id_182["LED_feedback_active"] = "1"
		self.new_send_mapping_copy_182_id_182["LED_on"] = "127"
		self.new_send_mapping_copy_182_id_182["LED_off"] = "0"
		self.new_send_mapping_copy_182_id_182["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_23"]
		self.new_send_mapping_copy_182_id_182["snap_to"] = True
		self.new_send_mapping_copy_182_id_182["json_id"] = 182
		self.new_send_mapping_copy_182_id_182["mapping_name"] = "New Send mapping  copy 182"
		self.new_send_mapping_copy_182_id_182["mapping_type"] = "Send"
		self.new_send_mapping_copy_183_id_183 = {}
		self.new_send_mapping_copy_183_id_183["attached_to"] = "midi_cc_ch_0_val_22"
		self.new_send_mapping_copy_183_id_183["track"] = self.track_num(2)
		self.new_send_mapping_copy_183_id_183["module"] = "self.relative_tracks_dict[6].mixer_device.sends[1]"
		self.new_send_mapping_copy_183_id_183["element"] = "value"
		self.new_send_mapping_copy_183_id_183["output_type"] = "val"
		self.new_send_mapping_copy_183_id_183["minimum"] = round(0,3)
		self.new_send_mapping_copy_183_id_183["maximum"] = round(100,3)
		self.new_send_mapping_copy_183_id_183["decimal_places"] = 3
		self.new_send_mapping_copy_183_id_183["ui_listener"] = "value"
		self.new_send_mapping_copy_183_id_183["feedback_brain"] = "feedback_range"
		self.new_send_mapping_copy_183_id_183["ctrl_type"] = "relative"
		self.new_send_mapping_copy_183_id_183["enc_first"] = 65
		self.new_send_mapping_copy_183_id_183["enc_second"] = 1
		self.new_send_mapping_copy_183_id_183["steps"] = 127
		self.new_send_mapping_copy_183_id_183["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_copy_183_id_183["LED_feedback"] = "default"
		self.new_send_mapping_copy_183_id_183["LED_feedback_active"] = "1"
		self.new_send_mapping_copy_183_id_183["LED_on"] = "127"
		self.new_send_mapping_copy_183_id_183["LED_off"] = "0"
		self.new_send_mapping_copy_183_id_183["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_22"]
		self.new_send_mapping_copy_183_id_183["snap_to"] = True
		self.new_send_mapping_copy_183_id_183["json_id"] = 183
		self.new_send_mapping_copy_183_id_183["mapping_name"] = "New Send mapping  copy 183"
		self.new_send_mapping_copy_183_id_183["mapping_type"] = "Send"
		self.new_send_mapping_6_copy_184_id_184 = {}
		self.new_send_mapping_6_copy_184_id_184["attached_to"] = "midi_cc_ch_0_val_21"
		self.new_send_mapping_6_copy_184_id_184["track"] = self.track_num(2)
		self.new_send_mapping_6_copy_184_id_184["module"] = "self.relative_tracks_dict[5].mixer_device.sends[1]"
		self.new_send_mapping_6_copy_184_id_184["element"] = "value"
		self.new_send_mapping_6_copy_184_id_184["output_type"] = "val"
		self.new_send_mapping_6_copy_184_id_184["minimum"] = round(0,3)
		self.new_send_mapping_6_copy_184_id_184["maximum"] = round(100,3)
		self.new_send_mapping_6_copy_184_id_184["decimal_places"] = 3
		self.new_send_mapping_6_copy_184_id_184["ui_listener"] = "value"
		self.new_send_mapping_6_copy_184_id_184["feedback_brain"] = "feedback_range"
		self.new_send_mapping_6_copy_184_id_184["ctrl_type"] = "relative"
		self.new_send_mapping_6_copy_184_id_184["enc_first"] = 65
		self.new_send_mapping_6_copy_184_id_184["enc_second"] = 1
		self.new_send_mapping_6_copy_184_id_184["steps"] = 127
		self.new_send_mapping_6_copy_184_id_184["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_6_copy_184_id_184["LED_feedback"] = "default"
		self.new_send_mapping_6_copy_184_id_184["LED_feedback_active"] = "1"
		self.new_send_mapping_6_copy_184_id_184["LED_on"] = "127"
		self.new_send_mapping_6_copy_184_id_184["LED_off"] = "0"
		self.new_send_mapping_6_copy_184_id_184["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_21"]
		self.new_send_mapping_6_copy_184_id_184["snap_to"] = True
		self.new_send_mapping_6_copy_184_id_184["json_id"] = 184
		self.new_send_mapping_6_copy_184_id_184["mapping_name"] = "New Send mapping 6 copy 184"
		self.new_send_mapping_6_copy_184_id_184["mapping_type"] = "Send"
		self.new_send_mapping_5_copy_185_id_185 = {}
		self.new_send_mapping_5_copy_185_id_185["attached_to"] = "midi_cc_ch_0_val_20"
		self.new_send_mapping_5_copy_185_id_185["track"] = self.track_num(2)
		self.new_send_mapping_5_copy_185_id_185["module"] = "self.relative_tracks_dict[4].mixer_device.sends[1]"
		self.new_send_mapping_5_copy_185_id_185["element"] = "value"
		self.new_send_mapping_5_copy_185_id_185["output_type"] = "val"
		self.new_send_mapping_5_copy_185_id_185["minimum"] = round(0,3)
		self.new_send_mapping_5_copy_185_id_185["maximum"] = round(100,3)
		self.new_send_mapping_5_copy_185_id_185["decimal_places"] = 3
		self.new_send_mapping_5_copy_185_id_185["ui_listener"] = "value"
		self.new_send_mapping_5_copy_185_id_185["feedback_brain"] = "feedback_range"
		self.new_send_mapping_5_copy_185_id_185["ctrl_type"] = "relative"
		self.new_send_mapping_5_copy_185_id_185["enc_first"] = 65
		self.new_send_mapping_5_copy_185_id_185["enc_second"] = 1
		self.new_send_mapping_5_copy_185_id_185["steps"] = 127
		self.new_send_mapping_5_copy_185_id_185["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_5_copy_185_id_185["LED_feedback"] = "default"
		self.new_send_mapping_5_copy_185_id_185["LED_feedback_active"] = "1"
		self.new_send_mapping_5_copy_185_id_185["LED_on"] = "127"
		self.new_send_mapping_5_copy_185_id_185["LED_off"] = "0"
		self.new_send_mapping_5_copy_185_id_185["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_20"]
		self.new_send_mapping_5_copy_185_id_185["snap_to"] = True
		self.new_send_mapping_5_copy_185_id_185["json_id"] = 185
		self.new_send_mapping_5_copy_185_id_185["mapping_name"] = "New Send mapping 5 copy 185"
		self.new_send_mapping_5_copy_185_id_185["mapping_type"] = "Send"
		self.new_send_mapping_4_copy_186_id_186 = {}
		self.new_send_mapping_4_copy_186_id_186["attached_to"] = "midi_cc_ch_0_val_19"
		self.new_send_mapping_4_copy_186_id_186["track"] = self.track_num(2)
		self.new_send_mapping_4_copy_186_id_186["module"] = "self.relative_tracks_dict[3].mixer_device.sends[1]"
		self.new_send_mapping_4_copy_186_id_186["element"] = "value"
		self.new_send_mapping_4_copy_186_id_186["output_type"] = "val"
		self.new_send_mapping_4_copy_186_id_186["minimum"] = round(0,3)
		self.new_send_mapping_4_copy_186_id_186["maximum"] = round(100,3)
		self.new_send_mapping_4_copy_186_id_186["decimal_places"] = 3
		self.new_send_mapping_4_copy_186_id_186["ui_listener"] = "value"
		self.new_send_mapping_4_copy_186_id_186["feedback_brain"] = "feedback_range"
		self.new_send_mapping_4_copy_186_id_186["ctrl_type"] = "relative"
		self.new_send_mapping_4_copy_186_id_186["enc_first"] = 65
		self.new_send_mapping_4_copy_186_id_186["enc_second"] = 1
		self.new_send_mapping_4_copy_186_id_186["steps"] = 127
		self.new_send_mapping_4_copy_186_id_186["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_4_copy_186_id_186["LED_feedback"] = "default"
		self.new_send_mapping_4_copy_186_id_186["LED_feedback_active"] = "1"
		self.new_send_mapping_4_copy_186_id_186["LED_on"] = "127"
		self.new_send_mapping_4_copy_186_id_186["LED_off"] = "0"
		self.new_send_mapping_4_copy_186_id_186["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_19"]
		self.new_send_mapping_4_copy_186_id_186["snap_to"] = True
		self.new_send_mapping_4_copy_186_id_186["json_id"] = 186
		self.new_send_mapping_4_copy_186_id_186["mapping_name"] = "New Send mapping 4 copy 186"
		self.new_send_mapping_4_copy_186_id_186["mapping_type"] = "Send"
		self.new_send_mapping_3_copy_187_id_187 = {}
		self.new_send_mapping_3_copy_187_id_187["attached_to"] = "midi_cc_ch_0_val_18"
		self.new_send_mapping_3_copy_187_id_187["track"] = self.track_num(2)
		self.new_send_mapping_3_copy_187_id_187["module"] = "self.relative_tracks_dict[2].mixer_device.sends[1]"
		self.new_send_mapping_3_copy_187_id_187["element"] = "value"
		self.new_send_mapping_3_copy_187_id_187["output_type"] = "val"
		self.new_send_mapping_3_copy_187_id_187["minimum"] = round(0,3)
		self.new_send_mapping_3_copy_187_id_187["maximum"] = round(100,3)
		self.new_send_mapping_3_copy_187_id_187["decimal_places"] = 3
		self.new_send_mapping_3_copy_187_id_187["ui_listener"] = "value"
		self.new_send_mapping_3_copy_187_id_187["feedback_brain"] = "feedback_range"
		self.new_send_mapping_3_copy_187_id_187["ctrl_type"] = "relative"
		self.new_send_mapping_3_copy_187_id_187["enc_first"] = 65
		self.new_send_mapping_3_copy_187_id_187["enc_second"] = 1
		self.new_send_mapping_3_copy_187_id_187["steps"] = 127
		self.new_send_mapping_3_copy_187_id_187["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_3_copy_187_id_187["LED_feedback"] = "default"
		self.new_send_mapping_3_copy_187_id_187["LED_feedback_active"] = "1"
		self.new_send_mapping_3_copy_187_id_187["LED_on"] = "127"
		self.new_send_mapping_3_copy_187_id_187["LED_off"] = "0"
		self.new_send_mapping_3_copy_187_id_187["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_18"]
		self.new_send_mapping_3_copy_187_id_187["snap_to"] = True
		self.new_send_mapping_3_copy_187_id_187["json_id"] = 187
		self.new_send_mapping_3_copy_187_id_187["mapping_name"] = "New Send mapping 3 copy 187"
		self.new_send_mapping_3_copy_187_id_187["mapping_type"] = "Send"
		self.new_send_mapping_copy_188_id_188 = {}
		self.new_send_mapping_copy_188_id_188["attached_to"] = "midi_cc_ch_0_val_17"
		self.new_send_mapping_copy_188_id_188["track"] = self.track_num(2)
		self.new_send_mapping_copy_188_id_188["module"] = "self.relative_tracks_dict[1].mixer_device.sends[1]"
		self.new_send_mapping_copy_188_id_188["element"] = "value"
		self.new_send_mapping_copy_188_id_188["output_type"] = "val"
		self.new_send_mapping_copy_188_id_188["minimum"] = round(0,3)
		self.new_send_mapping_copy_188_id_188["maximum"] = round(100,3)
		self.new_send_mapping_copy_188_id_188["decimal_places"] = 3
		self.new_send_mapping_copy_188_id_188["ui_listener"] = "value"
		self.new_send_mapping_copy_188_id_188["feedback_brain"] = "feedback_range"
		self.new_send_mapping_copy_188_id_188["ctrl_type"] = "relative"
		self.new_send_mapping_copy_188_id_188["enc_first"] = 65
		self.new_send_mapping_copy_188_id_188["enc_second"] = 1
		self.new_send_mapping_copy_188_id_188["steps"] = 127
		self.new_send_mapping_copy_188_id_188["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_copy_188_id_188["LED_feedback"] = "default"
		self.new_send_mapping_copy_188_id_188["LED_feedback_active"] = "1"
		self.new_send_mapping_copy_188_id_188["LED_on"] = "127"
		self.new_send_mapping_copy_188_id_188["LED_off"] = "0"
		self.new_send_mapping_copy_188_id_188["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_17"]
		self.new_send_mapping_copy_188_id_188["snap_to"] = True
		self.new_send_mapping_copy_188_id_188["json_id"] = 188
		self.new_send_mapping_copy_188_id_188["mapping_name"] = "New Send mapping  copy 188"
		self.new_send_mapping_copy_188_id_188["mapping_type"] = "Send"
		self.new_send_mapping_copy_189_id_189 = {}
		self.new_send_mapping_copy_189_id_189["attached_to"] = "midi_cc_ch_0_val_16"
		self.new_send_mapping_copy_189_id_189["track"] = self.track_num(2)
		self.new_send_mapping_copy_189_id_189["module"] = "self.relative_tracks_dict[0].mixer_device.sends[1]"
		self.new_send_mapping_copy_189_id_189["element"] = "value"
		self.new_send_mapping_copy_189_id_189["output_type"] = "val"
		self.new_send_mapping_copy_189_id_189["minimum"] = round(0,3)
		self.new_send_mapping_copy_189_id_189["maximum"] = round(100,3)
		self.new_send_mapping_copy_189_id_189["decimal_places"] = 3
		self.new_send_mapping_copy_189_id_189["ui_listener"] = "value"
		self.new_send_mapping_copy_189_id_189["feedback_brain"] = "feedback_range"
		self.new_send_mapping_copy_189_id_189["ctrl_type"] = "relative"
		self.new_send_mapping_copy_189_id_189["enc_first"] = 65
		self.new_send_mapping_copy_189_id_189["enc_second"] = 1
		self.new_send_mapping_copy_189_id_189["steps"] = 127
		self.new_send_mapping_copy_189_id_189["LED_mapping_type_needs_feedback"] = "1"
		self.new_send_mapping_copy_189_id_189["LED_feedback"] = "default"
		self.new_send_mapping_copy_189_id_189["LED_feedback_active"] = "1"
		self.new_send_mapping_copy_189_id_189["LED_on"] = "127"
		self.new_send_mapping_copy_189_id_189["LED_off"] = "0"
		self.new_send_mapping_copy_189_id_189["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_16"]
		self.new_send_mapping_copy_189_id_189["snap_to"] = True
		self.new_send_mapping_copy_189_id_189["json_id"] = 189
		self.new_send_mapping_copy_189_id_189["mapping_name"] = "New Send mapping  copy 189"
		self.new_send_mapping_copy_189_id_189["mapping_type"] = "Send"
		self.mute_1_id_95 = {}
		self.mute_1_id_95["attached_to"] = "midi_note_ch_0_val_16"
		self.mute_1_id_95["track"] = self.track_num(2)
		self.mute_1_id_95["module"] = "self.relative_tracks_dict[0]"
		self.mute_1_id_95["element"] = "mute"
		self.mute_1_id_95["output_type"] = "bool"
		self.mute_1_id_95["ui_listener"] = "mute"
		self.mute_1_id_95["feedback_brain"] = "feedback_bool"
		self.mute_1_id_95["ctrl_type"] = "on/off"
		self.mute_1_id_95["enc_first"] = 127
		self.mute_1_id_95["enc_second"] = 0
		self.mute_1_id_95["switch_type"] = "momentary"
		self.mute_1_id_95["LED_mapping_type_needs_feedback"] = "1"
		self.mute_1_id_95["LED_feedback"] = "default"
		self.mute_1_id_95["LED_feedback_active"] = "1"
		self.mute_1_id_95["LED_on"] = "127"
		self.mute_1_id_95["LED_off"] = "0"
		self.mute_1_id_95["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_16"]
		self.mute_1_id_95["json_id"] = 95
		self.mute_1_id_95["mapping_name"] = "Mute 1"
		self.mute_1_id_95["mapping_type"] = "Mute"
		self.mute_1_id_95["parent_json_id"] = 118
		self.mute_1_id_95["parent_name"] = "pan_8_id_144"
		self.solo_1_id_96 = {}
		self.solo_1_id_96["attached_to"] = "midi_note_ch_0_val_8"
		self.solo_1_id_96["track"] = self.track_num(2)
		self.solo_1_id_96["module"] = "self.relative_tracks_dict[0]"
		self.solo_1_id_96["element"] = "solo"
		self.solo_1_id_96["output_type"] = "bool"
		self.solo_1_id_96["ui_listener"] = "solo"
		self.solo_1_id_96["feedback_brain"] = "feedback_bool"
		self.solo_1_id_96["ctrl_type"] = "on/off"
		self.solo_1_id_96["enc_first"] = 127
		self.solo_1_id_96["enc_second"] = 0
		self.solo_1_id_96["switch_type"] = "momentary"
		self.solo_1_id_96["LED_mapping_type_needs_feedback"] = "1"
		self.solo_1_id_96["LED_feedback"] = "default"
		self.solo_1_id_96["LED_feedback_active"] = "1"
		self.solo_1_id_96["LED_on"] = "127"
		self.solo_1_id_96["LED_off"] = "0"
		self.solo_1_id_96["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_8"]
		self.solo_1_id_96["json_id"] = 96
		self.solo_1_id_96["mapping_name"] = "Solo 1"
		self.solo_1_id_96["mapping_type"] = "Solo"
		self.solo_1_id_96["parent_json_id"] = 118
		self.solo_1_id_96["parent_name"] = "pan_8_id_144"
		self.mute_2_id_98 = {}
		self.mute_2_id_98["attached_to"] = "midi_note_ch_0_val_17"
		self.mute_2_id_98["track"] = self.track_num(2)
		self.mute_2_id_98["module"] = "self.relative_tracks_dict[1]"
		self.mute_2_id_98["element"] = "mute"
		self.mute_2_id_98["output_type"] = "bool"
		self.mute_2_id_98["ui_listener"] = "mute"
		self.mute_2_id_98["feedback_brain"] = "feedback_bool"
		self.mute_2_id_98["ctrl_type"] = "on/off"
		self.mute_2_id_98["enc_first"] = 127
		self.mute_2_id_98["enc_second"] = 0
		self.mute_2_id_98["switch_type"] = "momentary"
		self.mute_2_id_98["LED_mapping_type_needs_feedback"] = "1"
		self.mute_2_id_98["LED_feedback"] = "default"
		self.mute_2_id_98["LED_feedback_active"] = "1"
		self.mute_2_id_98["LED_on"] = "127"
		self.mute_2_id_98["LED_off"] = "0"
		self.mute_2_id_98["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_17"]
		self.mute_2_id_98["json_id"] = 98
		self.mute_2_id_98["mapping_name"] = "Mute 2"
		self.mute_2_id_98["mapping_type"] = "Mute"
		self.mute_2_id_98["parent_json_id"] = 119
		self.mute_2_id_98["parent_name"] = "pan_8_id_144"
		self.solo_2_id_99 = {}
		self.solo_2_id_99["attached_to"] = "midi_note_ch_0_val_9"
		self.solo_2_id_99["track"] = self.track_num(2)
		self.solo_2_id_99["module"] = "self.relative_tracks_dict[1]"
		self.solo_2_id_99["element"] = "solo"
		self.solo_2_id_99["output_type"] = "bool"
		self.solo_2_id_99["ui_listener"] = "solo"
		self.solo_2_id_99["feedback_brain"] = "feedback_bool"
		self.solo_2_id_99["ctrl_type"] = "on/off"
		self.solo_2_id_99["enc_first"] = 127
		self.solo_2_id_99["enc_second"] = 0
		self.solo_2_id_99["switch_type"] = "momentary"
		self.solo_2_id_99["LED_mapping_type_needs_feedback"] = "1"
		self.solo_2_id_99["LED_feedback"] = "default"
		self.solo_2_id_99["LED_feedback_active"] = "1"
		self.solo_2_id_99["LED_on"] = "127"
		self.solo_2_id_99["LED_off"] = "0"
		self.solo_2_id_99["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_9"]
		self.solo_2_id_99["json_id"] = 99
		self.solo_2_id_99["mapping_name"] = "Solo 2"
		self.solo_2_id_99["mapping_type"] = "Solo"
		self.solo_2_id_99["parent_json_id"] = 119
		self.solo_2_id_99["parent_name"] = "pan_8_id_144"
		self.mute_3_id_101 = {}
		self.mute_3_id_101["attached_to"] = "midi_note_ch_0_val_18"
		self.mute_3_id_101["track"] = self.track_num(2)
		self.mute_3_id_101["module"] = "self.relative_tracks_dict[2]"
		self.mute_3_id_101["element"] = "mute"
		self.mute_3_id_101["output_type"] = "bool"
		self.mute_3_id_101["ui_listener"] = "mute"
		self.mute_3_id_101["feedback_brain"] = "feedback_bool"
		self.mute_3_id_101["ctrl_type"] = "on/off"
		self.mute_3_id_101["enc_first"] = 127
		self.mute_3_id_101["enc_second"] = 0
		self.mute_3_id_101["switch_type"] = "momentary"
		self.mute_3_id_101["LED_mapping_type_needs_feedback"] = "1"
		self.mute_3_id_101["LED_feedback"] = "default"
		self.mute_3_id_101["LED_feedback_active"] = "1"
		self.mute_3_id_101["LED_on"] = "127"
		self.mute_3_id_101["LED_off"] = "0"
		self.mute_3_id_101["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_18"]
		self.mute_3_id_101["json_id"] = 101
		self.mute_3_id_101["mapping_name"] = "Mute 3"
		self.mute_3_id_101["mapping_type"] = "Mute"
		self.mute_3_id_101["parent_json_id"] = 120
		self.mute_3_id_101["parent_name"] = "pan_8_id_144"
		self.solo_3_id_102 = {}
		self.solo_3_id_102["attached_to"] = "midi_note_ch_0_val_10"
		self.solo_3_id_102["track"] = self.track_num(2)
		self.solo_3_id_102["module"] = "self.relative_tracks_dict[2]"
		self.solo_3_id_102["element"] = "solo"
		self.solo_3_id_102["output_type"] = "bool"
		self.solo_3_id_102["ui_listener"] = "solo"
		self.solo_3_id_102["feedback_brain"] = "feedback_bool"
		self.solo_3_id_102["ctrl_type"] = "on/off"
		self.solo_3_id_102["enc_first"] = 127
		self.solo_3_id_102["enc_second"] = 0
		self.solo_3_id_102["switch_type"] = "momentary"
		self.solo_3_id_102["LED_mapping_type_needs_feedback"] = "1"
		self.solo_3_id_102["LED_feedback"] = "default"
		self.solo_3_id_102["LED_feedback_active"] = "1"
		self.solo_3_id_102["LED_on"] = "127"
		self.solo_3_id_102["LED_off"] = "0"
		self.solo_3_id_102["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_10"]
		self.solo_3_id_102["json_id"] = 102
		self.solo_3_id_102["mapping_name"] = "Solo 3"
		self.solo_3_id_102["mapping_type"] = "Solo"
		self.solo_3_id_102["parent_json_id"] = 120
		self.solo_3_id_102["parent_name"] = "pan_8_id_144"
		self.mute_4_id_104 = {}
		self.mute_4_id_104["attached_to"] = "midi_note_ch_0_val_19"
		self.mute_4_id_104["track"] = self.track_num(2)
		self.mute_4_id_104["module"] = "self.relative_tracks_dict[3]"
		self.mute_4_id_104["element"] = "mute"
		self.mute_4_id_104["output_type"] = "bool"
		self.mute_4_id_104["ui_listener"] = "mute"
		self.mute_4_id_104["feedback_brain"] = "feedback_bool"
		self.mute_4_id_104["ctrl_type"] = "on/off"
		self.mute_4_id_104["enc_first"] = 127
		self.mute_4_id_104["enc_second"] = 0
		self.mute_4_id_104["switch_type"] = "momentary"
		self.mute_4_id_104["LED_mapping_type_needs_feedback"] = "1"
		self.mute_4_id_104["LED_feedback"] = "default"
		self.mute_4_id_104["LED_feedback_active"] = "1"
		self.mute_4_id_104["LED_on"] = "127"
		self.mute_4_id_104["LED_off"] = "0"
		self.mute_4_id_104["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_19"]
		self.mute_4_id_104["json_id"] = 104
		self.mute_4_id_104["mapping_name"] = "Mute 4"
		self.mute_4_id_104["mapping_type"] = "Mute"
		self.mute_4_id_104["parent_json_id"] = 121
		self.mute_4_id_104["parent_name"] = "pan_8_id_144"
		self.solo_4_id_105 = {}
		self.solo_4_id_105["attached_to"] = "midi_note_ch_0_val_11"
		self.solo_4_id_105["track"] = self.track_num(2)
		self.solo_4_id_105["module"] = "self.relative_tracks_dict[3]"
		self.solo_4_id_105["element"] = "solo"
		self.solo_4_id_105["output_type"] = "bool"
		self.solo_4_id_105["ui_listener"] = "solo"
		self.solo_4_id_105["feedback_brain"] = "feedback_bool"
		self.solo_4_id_105["ctrl_type"] = "on/off"
		self.solo_4_id_105["enc_first"] = 127
		self.solo_4_id_105["enc_second"] = 0
		self.solo_4_id_105["switch_type"] = "momentary"
		self.solo_4_id_105["LED_mapping_type_needs_feedback"] = "1"
		self.solo_4_id_105["LED_feedback"] = "default"
		self.solo_4_id_105["LED_feedback_active"] = "1"
		self.solo_4_id_105["LED_on"] = "127"
		self.solo_4_id_105["LED_off"] = "0"
		self.solo_4_id_105["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_11"]
		self.solo_4_id_105["json_id"] = 105
		self.solo_4_id_105["mapping_name"] = "Solo 4"
		self.solo_4_id_105["mapping_type"] = "Solo"
		self.solo_4_id_105["parent_json_id"] = 121
		self.solo_4_id_105["parent_name"] = "pan_8_id_144"
		self.mute_5_id_107 = {}
		self.mute_5_id_107["attached_to"] = "midi_note_ch_0_val_20"
		self.mute_5_id_107["track"] = self.track_num(2)
		self.mute_5_id_107["module"] = "self.relative_tracks_dict[4]"
		self.mute_5_id_107["element"] = "mute"
		self.mute_5_id_107["output_type"] = "bool"
		self.mute_5_id_107["ui_listener"] = "mute"
		self.mute_5_id_107["feedback_brain"] = "feedback_bool"
		self.mute_5_id_107["ctrl_type"] = "on/off"
		self.mute_5_id_107["enc_first"] = 127
		self.mute_5_id_107["enc_second"] = 0
		self.mute_5_id_107["switch_type"] = "momentary"
		self.mute_5_id_107["LED_mapping_type_needs_feedback"] = "1"
		self.mute_5_id_107["LED_feedback"] = "default"
		self.mute_5_id_107["LED_feedback_active"] = "1"
		self.mute_5_id_107["LED_on"] = "127"
		self.mute_5_id_107["LED_off"] = "0"
		self.mute_5_id_107["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_20"]
		self.mute_5_id_107["json_id"] = 107
		self.mute_5_id_107["mapping_name"] = "Mute 5"
		self.mute_5_id_107["mapping_type"] = "Mute"
		self.mute_5_id_107["parent_json_id"] = 122
		self.mute_5_id_107["parent_name"] = "pan_8_id_144"
		self.solo_5_id_108 = {}
		self.solo_5_id_108["attached_to"] = "midi_note_ch_0_val_12"
		self.solo_5_id_108["track"] = self.track_num(2)
		self.solo_5_id_108["module"] = "self.relative_tracks_dict[4]"
		self.solo_5_id_108["element"] = "solo"
		self.solo_5_id_108["output_type"] = "bool"
		self.solo_5_id_108["ui_listener"] = "solo"
		self.solo_5_id_108["feedback_brain"] = "feedback_bool"
		self.solo_5_id_108["ctrl_type"] = "on/off"
		self.solo_5_id_108["enc_first"] = 127
		self.solo_5_id_108["enc_second"] = 0
		self.solo_5_id_108["switch_type"] = "momentary"
		self.solo_5_id_108["LED_mapping_type_needs_feedback"] = "1"
		self.solo_5_id_108["LED_feedback"] = "default"
		self.solo_5_id_108["LED_feedback_active"] = "1"
		self.solo_5_id_108["LED_on"] = "127"
		self.solo_5_id_108["LED_off"] = "0"
		self.solo_5_id_108["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_12"]
		self.solo_5_id_108["json_id"] = 108
		self.solo_5_id_108["mapping_name"] = "Solo 5"
		self.solo_5_id_108["mapping_type"] = "Solo"
		self.solo_5_id_108["parent_json_id"] = 122
		self.solo_5_id_108["parent_name"] = "pan_8_id_144"
		self.mute_6_id_110 = {}
		self.mute_6_id_110["attached_to"] = "midi_note_ch_0_val_21"
		self.mute_6_id_110["track"] = self.track_num(2)
		self.mute_6_id_110["module"] = "self.relative_tracks_dict[5]"
		self.mute_6_id_110["element"] = "mute"
		self.mute_6_id_110["output_type"] = "bool"
		self.mute_6_id_110["ui_listener"] = "mute"
		self.mute_6_id_110["feedback_brain"] = "feedback_bool"
		self.mute_6_id_110["ctrl_type"] = "on/off"
		self.mute_6_id_110["enc_first"] = 127
		self.mute_6_id_110["enc_second"] = 0
		self.mute_6_id_110["switch_type"] = "momentary"
		self.mute_6_id_110["LED_mapping_type_needs_feedback"] = "1"
		self.mute_6_id_110["LED_feedback"] = "default"
		self.mute_6_id_110["LED_feedback_active"] = "1"
		self.mute_6_id_110["LED_on"] = "127"
		self.mute_6_id_110["LED_off"] = "0"
		self.mute_6_id_110["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_21"]
		self.mute_6_id_110["json_id"] = 110
		self.mute_6_id_110["mapping_name"] = "Mute 6"
		self.mute_6_id_110["mapping_type"] = "Mute"
		self.mute_6_id_110["parent_json_id"] = 123
		self.mute_6_id_110["parent_name"] = "pan_8_id_144"
		self.solo_6_id_111 = {}
		self.solo_6_id_111["attached_to"] = "midi_note_ch_0_val_13"
		self.solo_6_id_111["track"] = self.track_num(2)
		self.solo_6_id_111["module"] = "self.relative_tracks_dict[5]"
		self.solo_6_id_111["element"] = "solo"
		self.solo_6_id_111["output_type"] = "bool"
		self.solo_6_id_111["ui_listener"] = "solo"
		self.solo_6_id_111["feedback_brain"] = "feedback_bool"
		self.solo_6_id_111["ctrl_type"] = "on/off"
		self.solo_6_id_111["enc_first"] = 127
		self.solo_6_id_111["enc_second"] = 0
		self.solo_6_id_111["switch_type"] = "momentary"
		self.solo_6_id_111["LED_mapping_type_needs_feedback"] = "1"
		self.solo_6_id_111["LED_feedback"] = "default"
		self.solo_6_id_111["LED_feedback_active"] = "1"
		self.solo_6_id_111["LED_on"] = "127"
		self.solo_6_id_111["LED_off"] = "0"
		self.solo_6_id_111["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_13"]
		self.solo_6_id_111["json_id"] = 111
		self.solo_6_id_111["mapping_name"] = "Solo 6"
		self.solo_6_id_111["mapping_type"] = "Solo"
		self.solo_6_id_111["parent_json_id"] = 123
		self.solo_6_id_111["parent_name"] = "pan_8_id_144"
		self.mute_7_id_113 = {}
		self.mute_7_id_113["attached_to"] = "midi_note_ch_0_val_22"
		self.mute_7_id_113["track"] = self.track_num(2)
		self.mute_7_id_113["module"] = "self.relative_tracks_dict[6]"
		self.mute_7_id_113["element"] = "mute"
		self.mute_7_id_113["output_type"] = "bool"
		self.mute_7_id_113["ui_listener"] = "mute"
		self.mute_7_id_113["feedback_brain"] = "feedback_bool"
		self.mute_7_id_113["ctrl_type"] = "on/off"
		self.mute_7_id_113["enc_first"] = 127
		self.mute_7_id_113["enc_second"] = 0
		self.mute_7_id_113["switch_type"] = "momentary"
		self.mute_7_id_113["LED_mapping_type_needs_feedback"] = "1"
		self.mute_7_id_113["LED_feedback"] = "default"
		self.mute_7_id_113["LED_feedback_active"] = "1"
		self.mute_7_id_113["LED_on"] = "127"
		self.mute_7_id_113["LED_off"] = "0"
		self.mute_7_id_113["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_22"]
		self.mute_7_id_113["json_id"] = 113
		self.mute_7_id_113["mapping_name"] = "Mute 7"
		self.mute_7_id_113["mapping_type"] = "Mute"
		self.mute_7_id_113["parent_json_id"] = 124
		self.mute_7_id_113["parent_name"] = "pan_8_id_144"
		self.solo_7_id_114 = {}
		self.solo_7_id_114["attached_to"] = "midi_note_ch_0_val_14"
		self.solo_7_id_114["track"] = self.track_num(2)
		self.solo_7_id_114["module"] = "self.relative_tracks_dict[6]"
		self.solo_7_id_114["element"] = "solo"
		self.solo_7_id_114["output_type"] = "bool"
		self.solo_7_id_114["ui_listener"] = "solo"
		self.solo_7_id_114["feedback_brain"] = "feedback_bool"
		self.solo_7_id_114["ctrl_type"] = "on/off"
		self.solo_7_id_114["enc_first"] = 127
		self.solo_7_id_114["enc_second"] = 0
		self.solo_7_id_114["switch_type"] = "momentary"
		self.solo_7_id_114["LED_mapping_type_needs_feedback"] = "1"
		self.solo_7_id_114["LED_feedback"] = "default"
		self.solo_7_id_114["LED_feedback_active"] = "1"
		self.solo_7_id_114["LED_on"] = "127"
		self.solo_7_id_114["LED_off"] = "0"
		self.solo_7_id_114["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_14"]
		self.solo_7_id_114["json_id"] = 114
		self.solo_7_id_114["mapping_name"] = "Solo 7"
		self.solo_7_id_114["mapping_type"] = "Solo"
		self.solo_7_id_114["parent_json_id"] = 124
		self.solo_7_id_114["parent_name"] = "pan_8_id_144"
		self.mute_8_id_116 = {}
		self.mute_8_id_116["attached_to"] = "midi_note_ch_0_val_23"
		self.mute_8_id_116["track"] = self.track_num(2)
		self.mute_8_id_116["module"] = "self.relative_tracks_dict[6]"
		self.mute_8_id_116["element"] = "mute"
		self.mute_8_id_116["output_type"] = "bool"
		self.mute_8_id_116["ui_listener"] = "mute"
		self.mute_8_id_116["feedback_brain"] = "feedback_bool"
		self.mute_8_id_116["ctrl_type"] = "on/off"
		self.mute_8_id_116["enc_first"] = 127
		self.mute_8_id_116["enc_second"] = 0
		self.mute_8_id_116["switch_type"] = "momentary"
		self.mute_8_id_116["LED_mapping_type_needs_feedback"] = "1"
		self.mute_8_id_116["LED_feedback"] = "default"
		self.mute_8_id_116["LED_feedback_active"] = "1"
		self.mute_8_id_116["LED_on"] = "127"
		self.mute_8_id_116["LED_off"] = "0"
		self.mute_8_id_116["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_23"]
		self.mute_8_id_116["json_id"] = 116
		self.mute_8_id_116["mapping_name"] = "Mute 8"
		self.mute_8_id_116["mapping_type"] = "Mute"
		self.mute_8_id_116["parent_json_id"] = 125
		self.mute_8_id_116["parent_name"] = "pan_8_id_144"
		self.solo_8_id_117 = {}
		self.solo_8_id_117["attached_to"] = "midi_note_ch_0_val_15"
		self.solo_8_id_117["track"] = self.track_num(2)
		self.solo_8_id_117["module"] = "self.relative_tracks_dict[7]"
		self.solo_8_id_117["element"] = "solo"
		self.solo_8_id_117["output_type"] = "bool"
		self.solo_8_id_117["ui_listener"] = "solo"
		self.solo_8_id_117["feedback_brain"] = "feedback_bool"
		self.solo_8_id_117["ctrl_type"] = "on/off"
		self.solo_8_id_117["enc_first"] = 127
		self.solo_8_id_117["enc_second"] = 0
		self.solo_8_id_117["switch_type"] = "momentary"
		self.solo_8_id_117["LED_mapping_type_needs_feedback"] = "1"
		self.solo_8_id_117["LED_feedback"] = "default"
		self.solo_8_id_117["LED_feedback_active"] = "1"
		self.solo_8_id_117["LED_on"] = "127"
		self.solo_8_id_117["LED_off"] = "0"
		self.solo_8_id_117["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_15"]
		self.solo_8_id_117["json_id"] = 117
		self.solo_8_id_117["mapping_name"] = "Solo 8"
		self.solo_8_id_117["mapping_type"] = "Solo"
		self.solo_8_id_117["parent_json_id"] = 125
		self.solo_8_id_117["parent_name"] = "pan_8_id_144"
		self.play_1_id_127 = {}
		self.play_1_id_127["attached_to"] = "midi_note_ch_0_val_94"
		self.play_1_id_127["module"] = "self.song()"
		self.play_1_id_127["element"] = "start_playing"
		self.play_1_id_127["output_type"] = "func"
		self.play_1_id_127["func_arg"] = ""
		self.play_1_id_127["ui_listener"] = "is_playing"
		self.play_1_id_127["feedback_brain"] = "feedback_bool"
		self.play_1_id_127["ctrl_type"] = "on/off"
		self.play_1_id_127["enc_first"] = 127
		self.play_1_id_127["enc_second"] = 0
		self.play_1_id_127["switch_type"] = "momentary"
		self.play_1_id_127["LED_mapping_type_needs_feedback"] = "1"
		self.play_1_id_127["LED_feedback"] = "default"
		self.play_1_id_127["LED_feedback_active"] = "1"
		self.play_1_id_127["LED_on"] = "127"
		self.play_1_id_127["LED_off"] = "0"
		self.play_1_id_127["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_94"]
		self.play_1_id_127["json_id"] = 127
		self.play_1_id_127["mapping_name"] = "Play 1"
		self.play_1_id_127["mapping_type"] = "Play"
		self.play_1_id_127["parent_json_id"] = 93
		self.play_1_id_127["parent_name"] = "pan_8_id_144"
		self.stop_1_id_128 = {}
		self.stop_1_id_128["attached_to"] = "midi_note_ch_0_val_93"
		self.stop_1_id_128["module"] = "self.song()"
		self.stop_1_id_128["element"] = "stop_playing"
		self.stop_1_id_128["output_type"] = "func"
		self.stop_1_id_128["func_arg"] = ""
		self.stop_1_id_128["ui_listener"] = "is_playing"
		self.stop_1_id_128["feedback_brain"] = "feedback_bool"
		self.stop_1_id_128["ctrl_type"] = "on/off"
		self.stop_1_id_128["enc_first"] = 127
		self.stop_1_id_128["enc_second"] = 0
		self.stop_1_id_128["switch_type"] = "momentary"
		self.stop_1_id_128["LED_mapping_type_needs_feedback"] = "1"
		self.stop_1_id_128["LED_feedback"] = "default"
		self.stop_1_id_128["LED_feedback_active"] = "1"
		self.stop_1_id_128["LED_on"] = "127"
		self.stop_1_id_128["LED_off"] = "0"
		self.stop_1_id_128["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_93"]
		self.stop_1_id_128["json_id"] = 128
		self.stop_1_id_128["mapping_name"] = "Stop 1"
		self.stop_1_id_128["mapping_type"] = "Stop"
		self.stop_1_id_128["parent_json_id"] = 93
		self.stop_1_id_128["parent_name"] = "pan_8_id_144"
		self.undo_1_id_130 = {}
		self.undo_1_id_130["attached_to"] = "midi_note_ch_0_val_91"
		self.undo_1_id_130["module"] = "self.song()"
		self.undo_1_id_130["element"] = "undo"
		self.undo_1_id_130["output_type"] = "func"
		self.undo_1_id_130["func_arg"] = ""
		self.undo_1_id_130["ctrl_type"] = "on/off"
		self.undo_1_id_130["enc_first"] = 127
		self.undo_1_id_130["enc_second"] = 0
		self.undo_1_id_130["switch_type"] = "momentary"
		self.undo_1_id_130["json_id"] = 130
		self.undo_1_id_130["mapping_name"] = "Undo 1"
		self.undo_1_id_130["mapping_type"] = "Undo"
		self.undo_1_id_130["parent_json_id"] = 93
		self.undo_1_id_130["parent_name"] = "pan_8_id_144"
		self.pan_id_135 = {}
		self.pan_id_135["attached_to"] = "midi_note_ch_0_val_98"
		self.pan_id_135["module"] = "self"
		self.pan_id_135["element"] = "set_active_mode"
		self.pan_id_135["output_type"] = "func"
		self.pan_id_135["func_arg"] = "1"
		self.pan_id_135["ui_listener"] = "value"
		self.pan_id_135["feedback_brain"] = "feedback_scroll_mode_selector_select"
		self.pan_id_135["ctrl_type"] = "on/off"
		self.pan_id_135["enc_first"] = 127
		self.pan_id_135["enc_second"] = 0
		self.pan_id_135["switch_type"] = "momentary"
		self.pan_id_135["LED_mapping_type_needs_feedback"] = ""
		self.pan_id_135["LED_feedback"] = "default"
		self.pan_id_135["LED_feedback_active"] = "1"
		self.pan_id_135["LED_on"] = "127"
		self.pan_id_135["LED_off"] = "0"
		self.pan_id_135["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_98"]
		self.pan_id_135["json_id"] = 135
		self.pan_id_135["mapping_name"] = "pan"
		self.pan_id_135["mapping_type"] = "Mode Selector"
		self.pan_id_135["parent_json_id"] = 93
		self.pan_id_135["parent_name"] = "pan_8_id_144"
		self.aux_id_136 = {}
		self.aux_id_136["attached_to"] = "midi_note_ch_0_val_99"
		self.aux_id_136["module"] = "self"
		self.aux_id_136["element"] = "set_active_mode"
		self.aux_id_136["output_type"] = "func"
		self.aux_id_136["func_arg"] = "3"
		self.aux_id_136["ui_listener"] = "value"
		self.aux_id_136["feedback_brain"] = "feedback_scroll_mode_selector_select"
		self.aux_id_136["ctrl_type"] = "on/off"
		self.aux_id_136["enc_first"] = 127
		self.aux_id_136["enc_second"] = 0
		self.aux_id_136["switch_type"] = "momentary"
		self.aux_id_136["LED_mapping_type_needs_feedback"] = ""
		self.aux_id_136["LED_feedback"] = "default"
		self.aux_id_136["LED_feedback_active"] = "1"
		self.aux_id_136["LED_on"] = "127"
		self.aux_id_136["LED_off"] = "0"
		self.aux_id_136["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_99"]
		self.aux_id_136["json_id"] = 136
		self.aux_id_136["mapping_name"] = "aux"
		self.aux_id_136["mapping_type"] = "Mode Selector"
		self.aux_id_136["parent_json_id"] = 93
		self.aux_id_136["parent_name"] = "pan_8_id_144"
	def _mode49_configs(self):
		self.mode_49_configs_map = [
			"new_parameter_mapping_copy_304_id_304",
			"new_parameter_mapping_copy_300_copy_305_id_305",
			"new_parameter_mapping_copy_298_copy_306_id_306",
			"new_parameter_mapping_copy_298_copy_302_copy_307_id_307",
			"new_parameter_mapping_copy_297_copy_308_id_308",
			"new_parameter_mapping_copy_297_copy_301_copy_309_id_309",
			"new_parameter_mapping_copy_297_copy_299_copy_310_id_310",
			"new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311",
			"new_arm_mapping_copy_279_copy_358_id_358",
			"new_arm_mapping_copy_271_copy_278_copy_362_id_362",
			"new_arm_mapping_copy_277_copy_366_id_366",
			"new_arm_mapping_copy_270_copy_276_copy_370_id_370",
			"new_arm_mapping_copy_267_copy_275_copy_374_id_374",
			"new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378",
			"new_arm_mapping_copy_266_copy_273_copy_382_id_382",
			"new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386",
			"new_session_box_navigation_mapping_copy_253_copy_255_id_255",
			"new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256",
			"new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260",
			"mute_1_copy_222_id_222",
			"solo_1_copy_223_id_223",
			"mute_2_copy_224_id_224",
			"solo_2_copy_225_id_225",
			"mute_3_copy_226_id_226",
			"solo_3_copy_227_id_227",
			"mute_4_copy_228_id_228",
			"solo_4_copy_229_id_229",
			"mute_5_copy_230_id_230",
			"solo_5_copy_231_id_231",
			"mute_6_copy_232_id_232",
			"solo_6_copy_233_id_233",
			"mute_7_copy_234_id_234",
			"solo_7_copy_235_id_235",
			"mute_8_copy_236_id_236",
			"solo_8_copy_237_id_237",
			"play_1_copy_239_id_239",
			"stop_1_copy_240_id_240",
			"undo_1_copy_242_id_242",
			"pan_copy_247_id_247",
			"aux_copy_248_id_248",
			"pan_1_id_137",
			"pan_1_copy_251_id_251",
			"pan_3_id_139",
			"pan_4_id_140",
			"pan_5_id_141",
			"pan_6_id_142",
			"pan_7_id_143",
			"pan_8_id_144"]
		self.new_parameter_mapping_copy_304_id_304 = {}
		self.new_parameter_mapping_copy_304_id_304["attached_to"] = "midi_cc_ch_0_val_0"
		self.new_parameter_mapping_copy_304_id_304["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_304_id_304["module"] = "self.relative_tracks_dict[0].devices[0].parameters[1]"
		self.new_parameter_mapping_copy_304_id_304["element"] = "value"
		self.new_parameter_mapping_copy_304_id_304["output_type"] = "val"
		self.new_parameter_mapping_copy_304_id_304["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_304_id_304["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_304_id_304["decimal_places"] = 2
		self.new_parameter_mapping_copy_304_id_304["ui_listener"] = "value"
		self.new_parameter_mapping_copy_304_id_304["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_304_id_304["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_304_id_304["enc_first"] = 0
		self.new_parameter_mapping_copy_304_id_304["enc_second"] = 127
		self.new_parameter_mapping_copy_304_id_304["reverse_mode"] = False
		self.new_parameter_mapping_copy_304_id_304["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_304_id_304["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_304_id_304["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_304_id_304["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_304_id_304["LED_on"] = "127"
		self.new_parameter_mapping_copy_304_id_304["LED_off"] = "0"
		self.new_parameter_mapping_copy_304_id_304["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_0"]
		self.new_parameter_mapping_copy_304_id_304["snap_to"] = True
		self.new_parameter_mapping_copy_304_id_304["json_id"] = 304
		self.new_parameter_mapping_copy_304_id_304["mapping_name"] = "New Parameter mapping  copy 304"
		self.new_parameter_mapping_copy_304_id_304["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_300_copy_305_id_305 = {}
		self.new_parameter_mapping_copy_300_copy_305_id_305["attached_to"] = "midi_cc_ch_1_val_0"
		self.new_parameter_mapping_copy_300_copy_305_id_305["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_300_copy_305_id_305["module"] = "self.relative_tracks_dict[0].devices[0].parameters[2]"
		self.new_parameter_mapping_copy_300_copy_305_id_305["element"] = "value"
		self.new_parameter_mapping_copy_300_copy_305_id_305["output_type"] = "val"
		self.new_parameter_mapping_copy_300_copy_305_id_305["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_300_copy_305_id_305["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_300_copy_305_id_305["decimal_places"] = 2
		self.new_parameter_mapping_copy_300_copy_305_id_305["ui_listener"] = "value"
		self.new_parameter_mapping_copy_300_copy_305_id_305["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_300_copy_305_id_305["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_300_copy_305_id_305["enc_first"] = 0
		self.new_parameter_mapping_copy_300_copy_305_id_305["enc_second"] = 127
		self.new_parameter_mapping_copy_300_copy_305_id_305["reverse_mode"] = False
		self.new_parameter_mapping_copy_300_copy_305_id_305["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_300_copy_305_id_305["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_300_copy_305_id_305["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_300_copy_305_id_305["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_300_copy_305_id_305["LED_on"] = "127"
		self.new_parameter_mapping_copy_300_copy_305_id_305["LED_off"] = "0"
		self.new_parameter_mapping_copy_300_copy_305_id_305["LED_send_feedback_to_selected"] = ["midi_cc_ch_1_val_0"]
		self.new_parameter_mapping_copy_300_copy_305_id_305["snap_to"] = True
		self.new_parameter_mapping_copy_300_copy_305_id_305["json_id"] = 305
		self.new_parameter_mapping_copy_300_copy_305_id_305["mapping_name"] = "New Parameter mapping  copy 300 copy 305"
		self.new_parameter_mapping_copy_300_copy_305_id_305["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_298_copy_306_id_306 = {}
		self.new_parameter_mapping_copy_298_copy_306_id_306["attached_to"] = "midi_cc_ch_2_val_0"
		self.new_parameter_mapping_copy_298_copy_306_id_306["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_298_copy_306_id_306["module"] = "self.relative_tracks_dict[0].devices[0].parameters[3]"
		self.new_parameter_mapping_copy_298_copy_306_id_306["element"] = "value"
		self.new_parameter_mapping_copy_298_copy_306_id_306["output_type"] = "val"
		self.new_parameter_mapping_copy_298_copy_306_id_306["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_298_copy_306_id_306["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_298_copy_306_id_306["decimal_places"] = 2
		self.new_parameter_mapping_copy_298_copy_306_id_306["ui_listener"] = "value"
		self.new_parameter_mapping_copy_298_copy_306_id_306["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_298_copy_306_id_306["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_298_copy_306_id_306["enc_first"] = 0
		self.new_parameter_mapping_copy_298_copy_306_id_306["enc_second"] = 127
		self.new_parameter_mapping_copy_298_copy_306_id_306["reverse_mode"] = False
		self.new_parameter_mapping_copy_298_copy_306_id_306["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_298_copy_306_id_306["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_298_copy_306_id_306["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_298_copy_306_id_306["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_298_copy_306_id_306["LED_on"] = "127"
		self.new_parameter_mapping_copy_298_copy_306_id_306["LED_off"] = "0"
		self.new_parameter_mapping_copy_298_copy_306_id_306["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_0"]
		self.new_parameter_mapping_copy_298_copy_306_id_306["snap_to"] = True
		self.new_parameter_mapping_copy_298_copy_306_id_306["json_id"] = 306
		self.new_parameter_mapping_copy_298_copy_306_id_306["mapping_name"] = "New Parameter mapping  copy 298 copy 306"
		self.new_parameter_mapping_copy_298_copy_306_id_306["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307 = {}
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["attached_to"] = "midi_cc_ch_3_val_0"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["module"] = "self.relative_tracks_dict[0].devices[0].parameters[4]"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["element"] = "value"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["output_type"] = "val"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["decimal_places"] = 2
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["ui_listener"] = "value"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["enc_first"] = 0
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["enc_second"] = 127
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["reverse_mode"] = False
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["LED_on"] = "127"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["LED_off"] = "0"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["LED_send_feedback_to_selected"] = ["midi_cc_ch_3_val_0"]
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["snap_to"] = True
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["json_id"] = 307
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["mapping_name"] = "New Parameter mapping  copy 298 copy 302 copy 307"
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_308_id_308 = {}
		self.new_parameter_mapping_copy_297_copy_308_id_308["attached_to"] = "midi_cc_ch_4_val_0"
		self.new_parameter_mapping_copy_297_copy_308_id_308["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_308_id_308["module"] = "self.relative_tracks_dict[0].devices[0].parameters[5]"
		self.new_parameter_mapping_copy_297_copy_308_id_308["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_308_id_308["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_308_id_308["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_308_id_308["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_308_id_308["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_308_id_308["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_308_id_308["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_308_id_308["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_308_id_308["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_308_id_308["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_308_id_308["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_308_id_308["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_308_id_308["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_308_id_308["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_308_id_308["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_308_id_308["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_308_id_308["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_308_id_308["LED_send_feedback_to_selected"] = ["midi_cc_ch_4_val_0"]
		self.new_parameter_mapping_copy_297_copy_308_id_308["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_308_id_308["json_id"] = 308
		self.new_parameter_mapping_copy_297_copy_308_id_308["mapping_name"] = "New Parameter mapping  copy 297 copy 308"
		self.new_parameter_mapping_copy_297_copy_308_id_308["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309 = {}
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["attached_to"] = "midi_cc_ch_5_val_0"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["module"] = "self.relative_tracks_dict[0].devices[0].parameters[6]"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["LED_send_feedback_to_selected"] = ["midi_cc_ch_5_val_0"]
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["json_id"] = 309
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["mapping_name"] = "New Parameter mapping  copy 297 copy 301 copy 309"
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310 = {}
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["attached_to"] = "midi_cc_ch_6_val_0"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["module"] = "self.relative_tracks_dict[0].devices[0].parameters[7]"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["LED_send_feedback_to_selected"] = ["midi_cc_ch_6_val_0"]
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["json_id"] = 310
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["mapping_name"] = "New Parameter mapping  copy 297 copy 299 copy 310"
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["mapping_type"] = "Parameter"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311 = {}
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["attached_to"] = "midi_cc_ch_7_val_0"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["track"] = self.track_num(2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["module"] = "self.relative_tracks_dict[0].devices[0].parameters[8]"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["element"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["output_type"] = "val"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["minimum"] = round(0,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["maximum"] = round(100,2)
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["decimal_places"] = 2
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["ui_listener"] = "value"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["feedback_brain"] = "feedback_range"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["ctrl_type"] = "absolute"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["enc_first"] = 0
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["enc_second"] = 127
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["reverse_mode"] = False
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["takeover_mode"] = "None"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["LED_mapping_type_needs_feedback"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["LED_feedback"] = "default"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["LED_feedback_active"] = "1"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["LED_on"] = "127"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["LED_off"] = "0"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["LED_send_feedback_to_selected"] = ["midi_cc_ch_7_val_0"]
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["snap_to"] = True
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["json_id"] = 311
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["mapping_name"] = "New Parameter mapping  copy 297 copy 299 copy 303 copy 311"
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["mapping_type"] = "Parameter"
		self.new_arm_mapping_copy_279_copy_358_id_358 = {}
		self.new_arm_mapping_copy_279_copy_358_id_358["attached_to"] = "midi_note_ch_0_val_4"
		self.new_arm_mapping_copy_279_copy_358_id_358["track"] = self.track_num(2)
		self.new_arm_mapping_copy_279_copy_358_id_358["module"] = "self.relative_tracks_dict[4]"
		self.new_arm_mapping_copy_279_copy_358_id_358["element"] = "arm"
		self.new_arm_mapping_copy_279_copy_358_id_358["output_type"] = "bool"
		self.new_arm_mapping_copy_279_copy_358_id_358["ui_listener"] = "arm"
		self.new_arm_mapping_copy_279_copy_358_id_358["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_279_copy_358_id_358["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_279_copy_358_id_358["enc_first"] = 127
		self.new_arm_mapping_copy_279_copy_358_id_358["enc_second"] = 0
		self.new_arm_mapping_copy_279_copy_358_id_358["switch_type"] = "momentary"
		self.new_arm_mapping_copy_279_copy_358_id_358["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_279_copy_358_id_358["LED_feedback"] = "default"
		self.new_arm_mapping_copy_279_copy_358_id_358["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_279_copy_358_id_358["LED_on"] = "127"
		self.new_arm_mapping_copy_279_copy_358_id_358["LED_off"] = "0"
		self.new_arm_mapping_copy_279_copy_358_id_358["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_4"]
		self.new_arm_mapping_copy_279_copy_358_id_358["json_id"] = 358
		self.new_arm_mapping_copy_279_copy_358_id_358["mapping_name"] = "New Arm mapping  copy 279 copy 358"
		self.new_arm_mapping_copy_279_copy_358_id_358["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362 = {}
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["attached_to"] = "midi_note_ch_0_val_1"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["track"] = self.track_num(2)
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["module"] = "self.relative_tracks_dict[1]"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["element"] = "arm"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["output_type"] = "bool"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["ui_listener"] = "arm"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["enc_first"] = 127
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["enc_second"] = 0
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["switch_type"] = "momentary"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["LED_feedback"] = "default"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["LED_on"] = "127"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["LED_off"] = "0"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_1"]
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["json_id"] = 362
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["mapping_name"] = "New Arm mapping  copy 271 copy 278 copy 362"
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_277_copy_366_id_366 = {}
		self.new_arm_mapping_copy_277_copy_366_id_366["attached_to"] = "midi_note_ch_0_val_0"
		self.new_arm_mapping_copy_277_copy_366_id_366["track"] = self.track_num(2)
		self.new_arm_mapping_copy_277_copy_366_id_366["module"] = "self.relative_tracks_dict[0]"
		self.new_arm_mapping_copy_277_copy_366_id_366["element"] = "arm"
		self.new_arm_mapping_copy_277_copy_366_id_366["output_type"] = "bool"
		self.new_arm_mapping_copy_277_copy_366_id_366["ui_listener"] = "arm"
		self.new_arm_mapping_copy_277_copy_366_id_366["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_277_copy_366_id_366["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_277_copy_366_id_366["enc_first"] = 127
		self.new_arm_mapping_copy_277_copy_366_id_366["enc_second"] = 0
		self.new_arm_mapping_copy_277_copy_366_id_366["switch_type"] = "momentary"
		self.new_arm_mapping_copy_277_copy_366_id_366["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_277_copy_366_id_366["LED_feedback"] = "default"
		self.new_arm_mapping_copy_277_copy_366_id_366["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_277_copy_366_id_366["LED_on"] = "127"
		self.new_arm_mapping_copy_277_copy_366_id_366["LED_off"] = "0"
		self.new_arm_mapping_copy_277_copy_366_id_366["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_0"]
		self.new_arm_mapping_copy_277_copy_366_id_366["json_id"] = 366
		self.new_arm_mapping_copy_277_copy_366_id_366["mapping_name"] = "New Arm mapping  copy 277 copy 366"
		self.new_arm_mapping_copy_277_copy_366_id_366["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370 = {}
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["attached_to"] = "midi_note_ch_0_val_5"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["track"] = self.track_num(2)
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["module"] = "self.relative_tracks_dict[5]"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["element"] = "arm"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["output_type"] = "bool"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["ui_listener"] = "arm"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["enc_first"] = 127
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["enc_second"] = 0
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["switch_type"] = "momentary"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["LED_feedback"] = "default"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["LED_on"] = "127"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["LED_off"] = "0"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_5"]
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["json_id"] = 370
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["mapping_name"] = "New Arm mapping  copy 270 copy 276 copy 370"
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374 = {}
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["attached_to"] = "midi_note_ch_0_val_2"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["track"] = self.track_num(2)
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["module"] = "self.relative_tracks_dict[2]"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["element"] = "arm"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["output_type"] = "bool"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["ui_listener"] = "arm"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["enc_first"] = 127
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["enc_second"] = 0
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["switch_type"] = "momentary"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["LED_feedback"] = "default"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["LED_on"] = "127"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["LED_off"] = "0"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_2"]
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["json_id"] = 374
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["mapping_name"] = "New Arm mapping  copy 267 copy 275 copy 374"
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378 = {}
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["attached_to"] = "midi_note_ch_0_val_6"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["track"] = self.track_num(2)
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["module"] = "self.relative_tracks_dict[6]"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["element"] = "arm"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["output_type"] = "bool"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["ui_listener"] = "arm"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["enc_first"] = 127
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["enc_second"] = 0
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["switch_type"] = "momentary"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["LED_feedback"] = "default"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["LED_on"] = "127"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["LED_off"] = "0"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_6"]
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["json_id"] = 378
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["mapping_name"] = "New Arm mapping  copy 267 copy 269 copy 274 copy 378"
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382 = {}
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["attached_to"] = "midi_note_ch_0_val_3"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["track"] = self.track_num(2)
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["module"] = "self.relative_tracks_dict[3]"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["element"] = "arm"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["output_type"] = "bool"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["ui_listener"] = "arm"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["enc_first"] = 127
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["enc_second"] = 0
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["switch_type"] = "momentary"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["LED_feedback"] = "default"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["LED_on"] = "127"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["LED_off"] = "0"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_3"]
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["json_id"] = 382
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["mapping_name"] = "New Arm mapping  copy 266 copy 273 copy 382"
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["mapping_type"] = "Arm"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386 = {}
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["attached_to"] = "midi_note_ch_0_val_7"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["track"] = self.track_num(2)
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["module"] = "self.relative_tracks_dict[7]"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["element"] = "arm"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["output_type"] = "bool"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["ui_listener"] = "arm"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["feedback_brain"] = "feedback_bool"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["ctrl_type"] = "on/off"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["enc_first"] = 127
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["enc_second"] = 0
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["switch_type"] = "momentary"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["LED_mapping_type_needs_feedback"] = "1"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["LED_feedback"] = "default"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["LED_feedback_active"] = "1"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["LED_on"] = "127"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["LED_off"] = "0"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_7"]
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["json_id"] = 386
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["mapping_name"] = "New Arm mapping  copy 266 copy 268 copy 272 copy 386"
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["mapping_type"] = "Arm"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255 = {}
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["attached_to"] = "midi_note_ch_0_val_92"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["module"] = "self"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["highlight_number"] = 0
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_92"]
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["json_id"] = 255
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["mapping_name"] = "New Session Box Navigation mapping  copy 253 copy 255"
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256 = {}
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["attached_to"] = "midi_note_ch_0_val_46"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["module"] = "self"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["highlight_number"] = 8
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_46"]
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["json_id"] = 256
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["mapping_name"] = "New Session Box Navigation mapping  copy 253 copy 255 copy 256"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256["mapping_type"] = "Session Box Navigation"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260 = {}
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["attached_to"] = "midi_note_ch_0_val_47"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["module"] = "self"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["element"] = "select_sess_offset"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["output_type"] = "func"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["func_arg"] = "cnfg"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["tracks_scenes"] = "tracks"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["highlight_number"] = 16
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["ui_listener"] = "offset"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["feedback_brain"] = "feedback_sessbox_nav_select"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["ctrl_type"] = "on/off"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["enc_first"] = 127
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["enc_second"] = 0
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["switch_type"] = "momentary"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["LED_mapping_type_needs_feedback"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["LED_feedback"] = "default"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["LED_feedback_active"] = "1"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["LED_on"] = "127"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["LED_off"] = "0"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_47"]
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["json_id"] = 260
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["mapping_name"] = "New Session Box Navigation mapping  copy 253 copy 255 copy 260"
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260["mapping_type"] = "Session Box Navigation"
		self.mute_1_copy_222_id_222 = {}
		self.mute_1_copy_222_id_222["attached_to"] = "midi_note_ch_0_val_16"
		self.mute_1_copy_222_id_222["track"] = self.track_num(2)
		self.mute_1_copy_222_id_222["module"] = "self.relative_tracks_dict[0]"
		self.mute_1_copy_222_id_222["element"] = "mute"
		self.mute_1_copy_222_id_222["output_type"] = "bool"
		self.mute_1_copy_222_id_222["ui_listener"] = "mute"
		self.mute_1_copy_222_id_222["feedback_brain"] = "feedback_bool"
		self.mute_1_copy_222_id_222["ctrl_type"] = "on/off"
		self.mute_1_copy_222_id_222["enc_first"] = 127
		self.mute_1_copy_222_id_222["enc_second"] = 0
		self.mute_1_copy_222_id_222["switch_type"] = "momentary"
		self.mute_1_copy_222_id_222["LED_mapping_type_needs_feedback"] = "1"
		self.mute_1_copy_222_id_222["LED_feedback"] = "default"
		self.mute_1_copy_222_id_222["LED_feedback_active"] = "1"
		self.mute_1_copy_222_id_222["LED_on"] = "127"
		self.mute_1_copy_222_id_222["LED_off"] = "0"
		self.mute_1_copy_222_id_222["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_16"]
		self.mute_1_copy_222_id_222["json_id"] = 222
		self.mute_1_copy_222_id_222["mapping_name"] = "Mute 1 copy 222"
		self.mute_1_copy_222_id_222["mapping_type"] = "Mute"
		self.mute_1_copy_222_id_222["parent_json_id"] = 6
		self.mute_1_copy_222_id_222["parent_name"] = "pan_8_id_144"
		self.solo_1_copy_223_id_223 = {}
		self.solo_1_copy_223_id_223["attached_to"] = "midi_note_ch_0_val_8"
		self.solo_1_copy_223_id_223["track"] = self.track_num(2)
		self.solo_1_copy_223_id_223["module"] = "self.relative_tracks_dict[0]"
		self.solo_1_copy_223_id_223["element"] = "solo"
		self.solo_1_copy_223_id_223["output_type"] = "bool"
		self.solo_1_copy_223_id_223["ui_listener"] = "solo"
		self.solo_1_copy_223_id_223["feedback_brain"] = "feedback_bool"
		self.solo_1_copy_223_id_223["ctrl_type"] = "on/off"
		self.solo_1_copy_223_id_223["enc_first"] = 127
		self.solo_1_copy_223_id_223["enc_second"] = 0
		self.solo_1_copy_223_id_223["switch_type"] = "momentary"
		self.solo_1_copy_223_id_223["LED_mapping_type_needs_feedback"] = "1"
		self.solo_1_copy_223_id_223["LED_feedback"] = "default"
		self.solo_1_copy_223_id_223["LED_feedback_active"] = "1"
		self.solo_1_copy_223_id_223["LED_on"] = "127"
		self.solo_1_copy_223_id_223["LED_off"] = "0"
		self.solo_1_copy_223_id_223["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_8"]
		self.solo_1_copy_223_id_223["json_id"] = 223
		self.solo_1_copy_223_id_223["mapping_name"] = "Solo 1 copy 223"
		self.solo_1_copy_223_id_223["mapping_type"] = "Solo"
		self.solo_1_copy_223_id_223["parent_json_id"] = 6
		self.solo_1_copy_223_id_223["parent_name"] = "pan_8_id_144"
		self.mute_2_copy_224_id_224 = {}
		self.mute_2_copy_224_id_224["attached_to"] = "midi_note_ch_0_val_17"
		self.mute_2_copy_224_id_224["track"] = self.track_num(2)
		self.mute_2_copy_224_id_224["module"] = "self.relative_tracks_dict[1]"
		self.mute_2_copy_224_id_224["element"] = "mute"
		self.mute_2_copy_224_id_224["output_type"] = "bool"
		self.mute_2_copy_224_id_224["ui_listener"] = "mute"
		self.mute_2_copy_224_id_224["feedback_brain"] = "feedback_bool"
		self.mute_2_copy_224_id_224["ctrl_type"] = "on/off"
		self.mute_2_copy_224_id_224["enc_first"] = 127
		self.mute_2_copy_224_id_224["enc_second"] = 0
		self.mute_2_copy_224_id_224["switch_type"] = "momentary"
		self.mute_2_copy_224_id_224["LED_mapping_type_needs_feedback"] = "1"
		self.mute_2_copy_224_id_224["LED_feedback"] = "default"
		self.mute_2_copy_224_id_224["LED_feedback_active"] = "1"
		self.mute_2_copy_224_id_224["LED_on"] = "127"
		self.mute_2_copy_224_id_224["LED_off"] = "0"
		self.mute_2_copy_224_id_224["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_17"]
		self.mute_2_copy_224_id_224["json_id"] = 224
		self.mute_2_copy_224_id_224["mapping_name"] = "Mute 2 copy 224"
		self.mute_2_copy_224_id_224["mapping_type"] = "Mute"
		self.mute_2_copy_224_id_224["parent_json_id"] = 8
		self.mute_2_copy_224_id_224["parent_name"] = "pan_8_id_144"
		self.solo_2_copy_225_id_225 = {}
		self.solo_2_copy_225_id_225["attached_to"] = "midi_note_ch_0_val_9"
		self.solo_2_copy_225_id_225["track"] = self.track_num(2)
		self.solo_2_copy_225_id_225["module"] = "self.relative_tracks_dict[1]"
		self.solo_2_copy_225_id_225["element"] = "solo"
		self.solo_2_copy_225_id_225["output_type"] = "bool"
		self.solo_2_copy_225_id_225["ui_listener"] = "solo"
		self.solo_2_copy_225_id_225["feedback_brain"] = "feedback_bool"
		self.solo_2_copy_225_id_225["ctrl_type"] = "on/off"
		self.solo_2_copy_225_id_225["enc_first"] = 127
		self.solo_2_copy_225_id_225["enc_second"] = 0
		self.solo_2_copy_225_id_225["switch_type"] = "momentary"
		self.solo_2_copy_225_id_225["LED_mapping_type_needs_feedback"] = "1"
		self.solo_2_copy_225_id_225["LED_feedback"] = "default"
		self.solo_2_copy_225_id_225["LED_feedback_active"] = "1"
		self.solo_2_copy_225_id_225["LED_on"] = "127"
		self.solo_2_copy_225_id_225["LED_off"] = "0"
		self.solo_2_copy_225_id_225["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_9"]
		self.solo_2_copy_225_id_225["json_id"] = 225
		self.solo_2_copy_225_id_225["mapping_name"] = "Solo 2 copy 225"
		self.solo_2_copy_225_id_225["mapping_type"] = "Solo"
		self.solo_2_copy_225_id_225["parent_json_id"] = 8
		self.solo_2_copy_225_id_225["parent_name"] = "pan_8_id_144"
		self.mute_3_copy_226_id_226 = {}
		self.mute_3_copy_226_id_226["attached_to"] = "midi_note_ch_0_val_18"
		self.mute_3_copy_226_id_226["track"] = self.track_num(2)
		self.mute_3_copy_226_id_226["module"] = "self.relative_tracks_dict[2]"
		self.mute_3_copy_226_id_226["element"] = "mute"
		self.mute_3_copy_226_id_226["output_type"] = "bool"
		self.mute_3_copy_226_id_226["ui_listener"] = "mute"
		self.mute_3_copy_226_id_226["feedback_brain"] = "feedback_bool"
		self.mute_3_copy_226_id_226["ctrl_type"] = "on/off"
		self.mute_3_copy_226_id_226["enc_first"] = 127
		self.mute_3_copy_226_id_226["enc_second"] = 0
		self.mute_3_copy_226_id_226["switch_type"] = "momentary"
		self.mute_3_copy_226_id_226["LED_mapping_type_needs_feedback"] = "1"
		self.mute_3_copy_226_id_226["LED_feedback"] = "default"
		self.mute_3_copy_226_id_226["LED_feedback_active"] = "1"
		self.mute_3_copy_226_id_226["LED_on"] = "127"
		self.mute_3_copy_226_id_226["LED_off"] = "0"
		self.mute_3_copy_226_id_226["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_18"]
		self.mute_3_copy_226_id_226["json_id"] = 226
		self.mute_3_copy_226_id_226["mapping_name"] = "Mute 3 copy 226"
		self.mute_3_copy_226_id_226["mapping_type"] = "Mute"
		self.mute_3_copy_226_id_226["parent_json_id"] = 10
		self.mute_3_copy_226_id_226["parent_name"] = "pan_8_id_144"
		self.solo_3_copy_227_id_227 = {}
		self.solo_3_copy_227_id_227["attached_to"] = "midi_note_ch_0_val_10"
		self.solo_3_copy_227_id_227["track"] = self.track_num(2)
		self.solo_3_copy_227_id_227["module"] = "self.relative_tracks_dict[2]"
		self.solo_3_copy_227_id_227["element"] = "solo"
		self.solo_3_copy_227_id_227["output_type"] = "bool"
		self.solo_3_copy_227_id_227["ui_listener"] = "solo"
		self.solo_3_copy_227_id_227["feedback_brain"] = "feedback_bool"
		self.solo_3_copy_227_id_227["ctrl_type"] = "on/off"
		self.solo_3_copy_227_id_227["enc_first"] = 127
		self.solo_3_copy_227_id_227["enc_second"] = 0
		self.solo_3_copy_227_id_227["switch_type"] = "momentary"
		self.solo_3_copy_227_id_227["LED_mapping_type_needs_feedback"] = "1"
		self.solo_3_copy_227_id_227["LED_feedback"] = "default"
		self.solo_3_copy_227_id_227["LED_feedback_active"] = "1"
		self.solo_3_copy_227_id_227["LED_on"] = "127"
		self.solo_3_copy_227_id_227["LED_off"] = "0"
		self.solo_3_copy_227_id_227["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_10"]
		self.solo_3_copy_227_id_227["json_id"] = 227
		self.solo_3_copy_227_id_227["mapping_name"] = "Solo 3 copy 227"
		self.solo_3_copy_227_id_227["mapping_type"] = "Solo"
		self.solo_3_copy_227_id_227["parent_json_id"] = 10
		self.solo_3_copy_227_id_227["parent_name"] = "pan_8_id_144"
		self.mute_4_copy_228_id_228 = {}
		self.mute_4_copy_228_id_228["attached_to"] = "midi_note_ch_0_val_19"
		self.mute_4_copy_228_id_228["track"] = self.track_num(2)
		self.mute_4_copy_228_id_228["module"] = "self.relative_tracks_dict[3]"
		self.mute_4_copy_228_id_228["element"] = "mute"
		self.mute_4_copy_228_id_228["output_type"] = "bool"
		self.mute_4_copy_228_id_228["ui_listener"] = "mute"
		self.mute_4_copy_228_id_228["feedback_brain"] = "feedback_bool"
		self.mute_4_copy_228_id_228["ctrl_type"] = "on/off"
		self.mute_4_copy_228_id_228["enc_first"] = 127
		self.mute_4_copy_228_id_228["enc_second"] = 0
		self.mute_4_copy_228_id_228["switch_type"] = "momentary"
		self.mute_4_copy_228_id_228["LED_mapping_type_needs_feedback"] = "1"
		self.mute_4_copy_228_id_228["LED_feedback"] = "default"
		self.mute_4_copy_228_id_228["LED_feedback_active"] = "1"
		self.mute_4_copy_228_id_228["LED_on"] = "127"
		self.mute_4_copy_228_id_228["LED_off"] = "0"
		self.mute_4_copy_228_id_228["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_19"]
		self.mute_4_copy_228_id_228["json_id"] = 228
		self.mute_4_copy_228_id_228["mapping_name"] = "Mute 4 copy 228"
		self.mute_4_copy_228_id_228["mapping_type"] = "Mute"
		self.mute_4_copy_228_id_228["parent_json_id"] = 12
		self.mute_4_copy_228_id_228["parent_name"] = "pan_8_id_144"
		self.solo_4_copy_229_id_229 = {}
		self.solo_4_copy_229_id_229["attached_to"] = "midi_note_ch_0_val_11"
		self.solo_4_copy_229_id_229["track"] = self.track_num(2)
		self.solo_4_copy_229_id_229["module"] = "self.relative_tracks_dict[3]"
		self.solo_4_copy_229_id_229["element"] = "solo"
		self.solo_4_copy_229_id_229["output_type"] = "bool"
		self.solo_4_copy_229_id_229["ui_listener"] = "solo"
		self.solo_4_copy_229_id_229["feedback_brain"] = "feedback_bool"
		self.solo_4_copy_229_id_229["ctrl_type"] = "on/off"
		self.solo_4_copy_229_id_229["enc_first"] = 127
		self.solo_4_copy_229_id_229["enc_second"] = 0
		self.solo_4_copy_229_id_229["switch_type"] = "momentary"
		self.solo_4_copy_229_id_229["LED_mapping_type_needs_feedback"] = "1"
		self.solo_4_copy_229_id_229["LED_feedback"] = "default"
		self.solo_4_copy_229_id_229["LED_feedback_active"] = "1"
		self.solo_4_copy_229_id_229["LED_on"] = "127"
		self.solo_4_copy_229_id_229["LED_off"] = "0"
		self.solo_4_copy_229_id_229["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_11"]
		self.solo_4_copy_229_id_229["json_id"] = 229
		self.solo_4_copy_229_id_229["mapping_name"] = "Solo 4 copy 229"
		self.solo_4_copy_229_id_229["mapping_type"] = "Solo"
		self.solo_4_copy_229_id_229["parent_json_id"] = 12
		self.solo_4_copy_229_id_229["parent_name"] = "pan_8_id_144"
		self.mute_5_copy_230_id_230 = {}
		self.mute_5_copy_230_id_230["attached_to"] = "midi_note_ch_0_val_20"
		self.mute_5_copy_230_id_230["track"] = self.track_num(2)
		self.mute_5_copy_230_id_230["module"] = "self.relative_tracks_dict[4]"
		self.mute_5_copy_230_id_230["element"] = "mute"
		self.mute_5_copy_230_id_230["output_type"] = "bool"
		self.mute_5_copy_230_id_230["ui_listener"] = "mute"
		self.mute_5_copy_230_id_230["feedback_brain"] = "feedback_bool"
		self.mute_5_copy_230_id_230["ctrl_type"] = "on/off"
		self.mute_5_copy_230_id_230["enc_first"] = 127
		self.mute_5_copy_230_id_230["enc_second"] = 0
		self.mute_5_copy_230_id_230["switch_type"] = "momentary"
		self.mute_5_copy_230_id_230["LED_mapping_type_needs_feedback"] = "1"
		self.mute_5_copy_230_id_230["LED_feedback"] = "default"
		self.mute_5_copy_230_id_230["LED_feedback_active"] = "1"
		self.mute_5_copy_230_id_230["LED_on"] = "127"
		self.mute_5_copy_230_id_230["LED_off"] = "0"
		self.mute_5_copy_230_id_230["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_20"]
		self.mute_5_copy_230_id_230["json_id"] = 230
		self.mute_5_copy_230_id_230["mapping_name"] = "Mute 5 copy 230"
		self.mute_5_copy_230_id_230["mapping_type"] = "Mute"
		self.mute_5_copy_230_id_230["parent_json_id"] = 14
		self.mute_5_copy_230_id_230["parent_name"] = "pan_8_id_144"
		self.solo_5_copy_231_id_231 = {}
		self.solo_5_copy_231_id_231["attached_to"] = "midi_note_ch_0_val_12"
		self.solo_5_copy_231_id_231["track"] = self.track_num(2)
		self.solo_5_copy_231_id_231["module"] = "self.relative_tracks_dict[4]"
		self.solo_5_copy_231_id_231["element"] = "solo"
		self.solo_5_copy_231_id_231["output_type"] = "bool"
		self.solo_5_copy_231_id_231["ui_listener"] = "solo"
		self.solo_5_copy_231_id_231["feedback_brain"] = "feedback_bool"
		self.solo_5_copy_231_id_231["ctrl_type"] = "on/off"
		self.solo_5_copy_231_id_231["enc_first"] = 127
		self.solo_5_copy_231_id_231["enc_second"] = 0
		self.solo_5_copy_231_id_231["switch_type"] = "momentary"
		self.solo_5_copy_231_id_231["LED_mapping_type_needs_feedback"] = "1"
		self.solo_5_copy_231_id_231["LED_feedback"] = "default"
		self.solo_5_copy_231_id_231["LED_feedback_active"] = "1"
		self.solo_5_copy_231_id_231["LED_on"] = "127"
		self.solo_5_copy_231_id_231["LED_off"] = "0"
		self.solo_5_copy_231_id_231["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_12"]
		self.solo_5_copy_231_id_231["json_id"] = 231
		self.solo_5_copy_231_id_231["mapping_name"] = "Solo 5 copy 231"
		self.solo_5_copy_231_id_231["mapping_type"] = "Solo"
		self.solo_5_copy_231_id_231["parent_json_id"] = 14
		self.solo_5_copy_231_id_231["parent_name"] = "pan_8_id_144"
		self.mute_6_copy_232_id_232 = {}
		self.mute_6_copy_232_id_232["attached_to"] = "midi_note_ch_0_val_21"
		self.mute_6_copy_232_id_232["track"] = self.track_num(2)
		self.mute_6_copy_232_id_232["module"] = "self.relative_tracks_dict[5]"
		self.mute_6_copy_232_id_232["element"] = "mute"
		self.mute_6_copy_232_id_232["output_type"] = "bool"
		self.mute_6_copy_232_id_232["ui_listener"] = "mute"
		self.mute_6_copy_232_id_232["feedback_brain"] = "feedback_bool"
		self.mute_6_copy_232_id_232["ctrl_type"] = "on/off"
		self.mute_6_copy_232_id_232["enc_first"] = 127
		self.mute_6_copy_232_id_232["enc_second"] = 0
		self.mute_6_copy_232_id_232["switch_type"] = "momentary"
		self.mute_6_copy_232_id_232["LED_mapping_type_needs_feedback"] = "1"
		self.mute_6_copy_232_id_232["LED_feedback"] = "default"
		self.mute_6_copy_232_id_232["LED_feedback_active"] = "1"
		self.mute_6_copy_232_id_232["LED_on"] = "127"
		self.mute_6_copy_232_id_232["LED_off"] = "0"
		self.mute_6_copy_232_id_232["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_21"]
		self.mute_6_copy_232_id_232["json_id"] = 232
		self.mute_6_copy_232_id_232["mapping_name"] = "Mute 6 copy 232"
		self.mute_6_copy_232_id_232["mapping_type"] = "Mute"
		self.mute_6_copy_232_id_232["parent_json_id"] = 16
		self.mute_6_copy_232_id_232["parent_name"] = "pan_8_id_144"
		self.solo_6_copy_233_id_233 = {}
		self.solo_6_copy_233_id_233["attached_to"] = "midi_note_ch_0_val_13"
		self.solo_6_copy_233_id_233["track"] = self.track_num(2)
		self.solo_6_copy_233_id_233["module"] = "self.relative_tracks_dict[5]"
		self.solo_6_copy_233_id_233["element"] = "solo"
		self.solo_6_copy_233_id_233["output_type"] = "bool"
		self.solo_6_copy_233_id_233["ui_listener"] = "solo"
		self.solo_6_copy_233_id_233["feedback_brain"] = "feedback_bool"
		self.solo_6_copy_233_id_233["ctrl_type"] = "on/off"
		self.solo_6_copy_233_id_233["enc_first"] = 127
		self.solo_6_copy_233_id_233["enc_second"] = 0
		self.solo_6_copy_233_id_233["switch_type"] = "momentary"
		self.solo_6_copy_233_id_233["LED_mapping_type_needs_feedback"] = "1"
		self.solo_6_copy_233_id_233["LED_feedback"] = "default"
		self.solo_6_copy_233_id_233["LED_feedback_active"] = "1"
		self.solo_6_copy_233_id_233["LED_on"] = "127"
		self.solo_6_copy_233_id_233["LED_off"] = "0"
		self.solo_6_copy_233_id_233["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_13"]
		self.solo_6_copy_233_id_233["json_id"] = 233
		self.solo_6_copy_233_id_233["mapping_name"] = "Solo 6 copy 233"
		self.solo_6_copy_233_id_233["mapping_type"] = "Solo"
		self.solo_6_copy_233_id_233["parent_json_id"] = 16
		self.solo_6_copy_233_id_233["parent_name"] = "pan_8_id_144"
		self.mute_7_copy_234_id_234 = {}
		self.mute_7_copy_234_id_234["attached_to"] = "midi_note_ch_0_val_22"
		self.mute_7_copy_234_id_234["track"] = self.track_num(2)
		self.mute_7_copy_234_id_234["module"] = "self.relative_tracks_dict[6]"
		self.mute_7_copy_234_id_234["element"] = "mute"
		self.mute_7_copy_234_id_234["output_type"] = "bool"
		self.mute_7_copy_234_id_234["ui_listener"] = "mute"
		self.mute_7_copy_234_id_234["feedback_brain"] = "feedback_bool"
		self.mute_7_copy_234_id_234["ctrl_type"] = "on/off"
		self.mute_7_copy_234_id_234["enc_first"] = 127
		self.mute_7_copy_234_id_234["enc_second"] = 0
		self.mute_7_copy_234_id_234["switch_type"] = "momentary"
		self.mute_7_copy_234_id_234["LED_mapping_type_needs_feedback"] = "1"
		self.mute_7_copy_234_id_234["LED_feedback"] = "default"
		self.mute_7_copy_234_id_234["LED_feedback_active"] = "1"
		self.mute_7_copy_234_id_234["LED_on"] = "127"
		self.mute_7_copy_234_id_234["LED_off"] = "0"
		self.mute_7_copy_234_id_234["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_22"]
		self.mute_7_copy_234_id_234["json_id"] = 234
		self.mute_7_copy_234_id_234["mapping_name"] = "Mute 7 copy 234"
		self.mute_7_copy_234_id_234["mapping_type"] = "Mute"
		self.mute_7_copy_234_id_234["parent_json_id"] = 18
		self.mute_7_copy_234_id_234["parent_name"] = "pan_8_id_144"
		self.solo_7_copy_235_id_235 = {}
		self.solo_7_copy_235_id_235["attached_to"] = "midi_note_ch_0_val_14"
		self.solo_7_copy_235_id_235["track"] = self.track_num(2)
		self.solo_7_copy_235_id_235["module"] = "self.relative_tracks_dict[6]"
		self.solo_7_copy_235_id_235["element"] = "solo"
		self.solo_7_copy_235_id_235["output_type"] = "bool"
		self.solo_7_copy_235_id_235["ui_listener"] = "solo"
		self.solo_7_copy_235_id_235["feedback_brain"] = "feedback_bool"
		self.solo_7_copy_235_id_235["ctrl_type"] = "on/off"
		self.solo_7_copy_235_id_235["enc_first"] = 127
		self.solo_7_copy_235_id_235["enc_second"] = 0
		self.solo_7_copy_235_id_235["switch_type"] = "momentary"
		self.solo_7_copy_235_id_235["LED_mapping_type_needs_feedback"] = "1"
		self.solo_7_copy_235_id_235["LED_feedback"] = "default"
		self.solo_7_copy_235_id_235["LED_feedback_active"] = "1"
		self.solo_7_copy_235_id_235["LED_on"] = "127"
		self.solo_7_copy_235_id_235["LED_off"] = "0"
		self.solo_7_copy_235_id_235["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_14"]
		self.solo_7_copy_235_id_235["json_id"] = 235
		self.solo_7_copy_235_id_235["mapping_name"] = "Solo 7 copy 235"
		self.solo_7_copy_235_id_235["mapping_type"] = "Solo"
		self.solo_7_copy_235_id_235["parent_json_id"] = 18
		self.solo_7_copy_235_id_235["parent_name"] = "pan_8_id_144"
		self.mute_8_copy_236_id_236 = {}
		self.mute_8_copy_236_id_236["attached_to"] = "midi_note_ch_0_val_23"
		self.mute_8_copy_236_id_236["track"] = self.track_num(2)
		self.mute_8_copy_236_id_236["module"] = "self.relative_tracks_dict[7]"
		self.mute_8_copy_236_id_236["element"] = "mute"
		self.mute_8_copy_236_id_236["output_type"] = "bool"
		self.mute_8_copy_236_id_236["ui_listener"] = "mute"
		self.mute_8_copy_236_id_236["feedback_brain"] = "feedback_bool"
		self.mute_8_copy_236_id_236["ctrl_type"] = "on/off"
		self.mute_8_copy_236_id_236["enc_first"] = 127
		self.mute_8_copy_236_id_236["enc_second"] = 0
		self.mute_8_copy_236_id_236["switch_type"] = "momentary"
		self.mute_8_copy_236_id_236["LED_mapping_type_needs_feedback"] = "1"
		self.mute_8_copy_236_id_236["LED_feedback"] = "default"
		self.mute_8_copy_236_id_236["LED_feedback_active"] = "1"
		self.mute_8_copy_236_id_236["LED_on"] = "127"
		self.mute_8_copy_236_id_236["LED_off"] = "0"
		self.mute_8_copy_236_id_236["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_23"]
		self.mute_8_copy_236_id_236["json_id"] = 236
		self.mute_8_copy_236_id_236["mapping_name"] = "Mute 8 copy 236"
		self.mute_8_copy_236_id_236["mapping_type"] = "Mute"
		self.mute_8_copy_236_id_236["parent_json_id"] = 20
		self.mute_8_copy_236_id_236["parent_name"] = "pan_8_id_144"
		self.solo_8_copy_237_id_237 = {}
		self.solo_8_copy_237_id_237["attached_to"] = "midi_note_ch_0_val_15"
		self.solo_8_copy_237_id_237["track"] = self.track_num(2)
		self.solo_8_copy_237_id_237["module"] = "self.relative_tracks_dict[7]"
		self.solo_8_copy_237_id_237["element"] = "solo"
		self.solo_8_copy_237_id_237["output_type"] = "bool"
		self.solo_8_copy_237_id_237["ui_listener"] = "solo"
		self.solo_8_copy_237_id_237["feedback_brain"] = "feedback_bool"
		self.solo_8_copy_237_id_237["ctrl_type"] = "on/off"
		self.solo_8_copy_237_id_237["enc_first"] = 127
		self.solo_8_copy_237_id_237["enc_second"] = 0
		self.solo_8_copy_237_id_237["switch_type"] = "momentary"
		self.solo_8_copy_237_id_237["LED_mapping_type_needs_feedback"] = "1"
		self.solo_8_copy_237_id_237["LED_feedback"] = "default"
		self.solo_8_copy_237_id_237["LED_feedback_active"] = "1"
		self.solo_8_copy_237_id_237["LED_on"] = "127"
		self.solo_8_copy_237_id_237["LED_off"] = "0"
		self.solo_8_copy_237_id_237["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_15"]
		self.solo_8_copy_237_id_237["json_id"] = 237
		self.solo_8_copy_237_id_237["mapping_name"] = "Solo 8 copy 237"
		self.solo_8_copy_237_id_237["mapping_type"] = "Solo"
		self.solo_8_copy_237_id_237["parent_json_id"] = 20
		self.solo_8_copy_237_id_237["parent_name"] = "pan_8_id_144"
		self.play_1_copy_239_id_239 = {}
		self.play_1_copy_239_id_239["attached_to"] = "midi_note_ch_0_val_94"
		self.play_1_copy_239_id_239["module"] = "self.song()"
		self.play_1_copy_239_id_239["element"] = "start_playing"
		self.play_1_copy_239_id_239["output_type"] = "func"
		self.play_1_copy_239_id_239["func_arg"] = ""
		self.play_1_copy_239_id_239["ui_listener"] = "is_playing"
		self.play_1_copy_239_id_239["feedback_brain"] = "feedback_bool"
		self.play_1_copy_239_id_239["ctrl_type"] = "on/off"
		self.play_1_copy_239_id_239["enc_first"] = 127
		self.play_1_copy_239_id_239["enc_second"] = 0
		self.play_1_copy_239_id_239["switch_type"] = "momentary"
		self.play_1_copy_239_id_239["LED_mapping_type_needs_feedback"] = "1"
		self.play_1_copy_239_id_239["LED_feedback"] = "default"
		self.play_1_copy_239_id_239["LED_feedback_active"] = "1"
		self.play_1_copy_239_id_239["LED_on"] = "127"
		self.play_1_copy_239_id_239["LED_off"] = "0"
		self.play_1_copy_239_id_239["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_94"]
		self.play_1_copy_239_id_239["json_id"] = 239
		self.play_1_copy_239_id_239["mapping_name"] = "Play 1 copy 239"
		self.play_1_copy_239_id_239["mapping_type"] = "Play"
		self.play_1_copy_239_id_239["parent_json_id"] = 1
		self.play_1_copy_239_id_239["parent_name"] = "volume_id_1"
		self.stop_1_copy_240_id_240 = {}
		self.stop_1_copy_240_id_240["attached_to"] = "midi_note_ch_0_val_93"
		self.stop_1_copy_240_id_240["module"] = "self.song()"
		self.stop_1_copy_240_id_240["element"] = "stop_playing"
		self.stop_1_copy_240_id_240["output_type"] = "func"
		self.stop_1_copy_240_id_240["func_arg"] = ""
		self.stop_1_copy_240_id_240["ui_listener"] = "is_playing"
		self.stop_1_copy_240_id_240["feedback_brain"] = "feedback_bool"
		self.stop_1_copy_240_id_240["ctrl_type"] = "on/off"
		self.stop_1_copy_240_id_240["enc_first"] = 127
		self.stop_1_copy_240_id_240["enc_second"] = 0
		self.stop_1_copy_240_id_240["switch_type"] = "momentary"
		self.stop_1_copy_240_id_240["LED_mapping_type_needs_feedback"] = "1"
		self.stop_1_copy_240_id_240["LED_feedback"] = "default"
		self.stop_1_copy_240_id_240["LED_feedback_active"] = "1"
		self.stop_1_copy_240_id_240["LED_on"] = "127"
		self.stop_1_copy_240_id_240["LED_off"] = "0"
		self.stop_1_copy_240_id_240["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_93"]
		self.stop_1_copy_240_id_240["json_id"] = 240
		self.stop_1_copy_240_id_240["mapping_name"] = "Stop 1 copy 240"
		self.stop_1_copy_240_id_240["mapping_type"] = "Stop"
		self.stop_1_copy_240_id_240["parent_json_id"] = 1
		self.stop_1_copy_240_id_240["parent_name"] = "volume_id_1"
		self.undo_1_copy_242_id_242 = {}
		self.undo_1_copy_242_id_242["attached_to"] = "midi_note_ch_0_val_91"
		self.undo_1_copy_242_id_242["module"] = "self.song()"
		self.undo_1_copy_242_id_242["element"] = "undo"
		self.undo_1_copy_242_id_242["output_type"] = "func"
		self.undo_1_copy_242_id_242["func_arg"] = ""
		self.undo_1_copy_242_id_242["ctrl_type"] = "on/off"
		self.undo_1_copy_242_id_242["enc_first"] = 127
		self.undo_1_copy_242_id_242["enc_second"] = 0
		self.undo_1_copy_242_id_242["switch_type"] = "momentary"
		self.undo_1_copy_242_id_242["json_id"] = 242
		self.undo_1_copy_242_id_242["mapping_name"] = "Undo 1 copy 242"
		self.undo_1_copy_242_id_242["mapping_type"] = "Undo"
		self.undo_1_copy_242_id_242["parent_json_id"] = 1
		self.undo_1_copy_242_id_242["parent_name"] = "volume_id_1"
		self.pan_copy_247_id_247 = {}
		self.pan_copy_247_id_247["attached_to"] = "midi_note_ch_0_val_98"
		self.pan_copy_247_id_247["module"] = "self"
		self.pan_copy_247_id_247["element"] = "set_active_mode"
		self.pan_copy_247_id_247["output_type"] = "func"
		self.pan_copy_247_id_247["func_arg"] = "1"
		self.pan_copy_247_id_247["ui_listener"] = "value"
		self.pan_copy_247_id_247["feedback_brain"] = "feedback_scroll_mode_selector_select"
		self.pan_copy_247_id_247["ctrl_type"] = "on/off"
		self.pan_copy_247_id_247["enc_first"] = 127
		self.pan_copy_247_id_247["enc_second"] = 0
		self.pan_copy_247_id_247["switch_type"] = "momentary"
		self.pan_copy_247_id_247["LED_mapping_type_needs_feedback"] = ""
		self.pan_copy_247_id_247["LED_feedback"] = "default"
		self.pan_copy_247_id_247["LED_feedback_active"] = "1"
		self.pan_copy_247_id_247["LED_on"] = "127"
		self.pan_copy_247_id_247["LED_off"] = "0"
		self.pan_copy_247_id_247["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_98"]
		self.pan_copy_247_id_247["json_id"] = 247
		self.pan_copy_247_id_247["mapping_name"] = "pan copy 247"
		self.pan_copy_247_id_247["mapping_type"] = "Mode Selector"
		self.pan_copy_247_id_247["parent_json_id"] = 1
		self.pan_copy_247_id_247["parent_name"] = "volume_id_1"
		self.aux_copy_248_id_248 = {}
		self.aux_copy_248_id_248["attached_to"] = "midi_note_ch_0_val_99"
		self.aux_copy_248_id_248["module"] = "self"
		self.aux_copy_248_id_248["element"] = "set_active_mode"
		self.aux_copy_248_id_248["output_type"] = "func"
		self.aux_copy_248_id_248["func_arg"] = "3"
		self.aux_copy_248_id_248["ui_listener"] = "value"
		self.aux_copy_248_id_248["feedback_brain"] = "feedback_scroll_mode_selector_select"
		self.aux_copy_248_id_248["ctrl_type"] = "on/off"
		self.aux_copy_248_id_248["enc_first"] = 127
		self.aux_copy_248_id_248["enc_second"] = 0
		self.aux_copy_248_id_248["switch_type"] = "momentary"
		self.aux_copy_248_id_248["LED_mapping_type_needs_feedback"] = ""
		self.aux_copy_248_id_248["LED_feedback"] = "default"
		self.aux_copy_248_id_248["LED_feedback_active"] = "1"
		self.aux_copy_248_id_248["LED_on"] = "127"
		self.aux_copy_248_id_248["LED_off"] = "0"
		self.aux_copy_248_id_248["LED_send_feedback_to_selected"] = ["midi_note_ch_0_val_99"]
		self.aux_copy_248_id_248["json_id"] = 248
		self.aux_copy_248_id_248["mapping_name"] = "aux copy 248"
		self.aux_copy_248_id_248["mapping_type"] = "Mode Selector"
		self.aux_copy_248_id_248["parent_json_id"] = 1
		self.aux_copy_248_id_248["parent_name"] = "volume_id_1"
		self.pan_1_id_137 = {}
		self.pan_1_id_137["attached_to"] = "midi_cc_ch_0_val_16"
		self.pan_1_id_137["track"] = self.track_num(2)
		self.pan_1_id_137["module"] = "self.relative_tracks_dict[0].mixer_device.panning"
		self.pan_1_id_137["element"] = "value"
		self.pan_1_id_137["output_type"] = "val"
		self.pan_1_id_137["minimum"] = round(0,2)
		self.pan_1_id_137["maximum"] = round(100,2)
		self.pan_1_id_137["decimal_places"] = 2
		self.pan_1_id_137["ui_listener"] = "value"
		self.pan_1_id_137["feedback_brain"] = "feedback_range"
		self.pan_1_id_137["ctrl_type"] = "relative"
		self.pan_1_id_137["enc_first"] = 65
		self.pan_1_id_137["enc_second"] = 1
		self.pan_1_id_137["steps"] = 127
		self.pan_1_id_137["LED_mapping_type_needs_feedback"] = "1"
		self.pan_1_id_137["LED_feedback"] = "default"
		self.pan_1_id_137["LED_feedback_active"] = "1"
		self.pan_1_id_137["LED_on"] = "127"
		self.pan_1_id_137["LED_off"] = "0"
		self.pan_1_id_137["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_16"]
		self.pan_1_id_137["snap_to"] = True
		self.pan_1_id_137["json_id"] = 137
		self.pan_1_id_137["mapping_name"] = "Pan 1"
		self.pan_1_id_137["mapping_type"] = "Pan"
		self.pan_1_id_137["parent_json_id"] = 74
		self.pan_1_id_137["parent_name"] = "pan_8_id_144"
		self.pan_1_copy_251_id_251 = {}
		self.pan_1_copy_251_id_251["attached_to"] = "midi_cc_ch_0_val_17"
		self.pan_1_copy_251_id_251["track"] = self.track_num(2)
		self.pan_1_copy_251_id_251["module"] = "self.relative_tracks_dict[1].mixer_device.panning"
		self.pan_1_copy_251_id_251["element"] = "value"
		self.pan_1_copy_251_id_251["output_type"] = "val"
		self.pan_1_copy_251_id_251["minimum"] = round(0,2)
		self.pan_1_copy_251_id_251["maximum"] = round(100,2)
		self.pan_1_copy_251_id_251["decimal_places"] = 2
		self.pan_1_copy_251_id_251["ui_listener"] = "value"
		self.pan_1_copy_251_id_251["feedback_brain"] = "feedback_range"
		self.pan_1_copy_251_id_251["ctrl_type"] = "relative"
		self.pan_1_copy_251_id_251["enc_first"] = 65
		self.pan_1_copy_251_id_251["enc_second"] = 1
		self.pan_1_copy_251_id_251["steps"] = 127
		self.pan_1_copy_251_id_251["LED_mapping_type_needs_feedback"] = "1"
		self.pan_1_copy_251_id_251["LED_feedback"] = "default"
		self.pan_1_copy_251_id_251["LED_feedback_active"] = "1"
		self.pan_1_copy_251_id_251["LED_on"] = "127"
		self.pan_1_copy_251_id_251["LED_off"] = "0"
		self.pan_1_copy_251_id_251["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_17"]
		self.pan_1_copy_251_id_251["snap_to"] = True
		self.pan_1_copy_251_id_251["json_id"] = 251
		self.pan_1_copy_251_id_251["mapping_name"] = "Pan 1 copy 251"
		self.pan_1_copy_251_id_251["mapping_type"] = "Pan"
		self.pan_1_copy_251_id_251["parent_json_id"] = 74
		self.pan_1_copy_251_id_251["parent_name"] = "pan_8_id_144"
		self.pan_3_id_139 = {}
		self.pan_3_id_139["attached_to"] = "midi_cc_ch_0_val_18"
		self.pan_3_id_139["track"] = self.track_num(2)
		self.pan_3_id_139["module"] = "self.relative_tracks_dict[2].mixer_device.panning"
		self.pan_3_id_139["element"] = "value"
		self.pan_3_id_139["output_type"] = "val"
		self.pan_3_id_139["minimum"] = round(0,2)
		self.pan_3_id_139["maximum"] = round(100,2)
		self.pan_3_id_139["decimal_places"] = 2
		self.pan_3_id_139["ui_listener"] = "value"
		self.pan_3_id_139["feedback_brain"] = "feedback_range"
		self.pan_3_id_139["ctrl_type"] = "relative"
		self.pan_3_id_139["enc_first"] = 65
		self.pan_3_id_139["enc_second"] = 1
		self.pan_3_id_139["steps"] = 127
		self.pan_3_id_139["LED_mapping_type_needs_feedback"] = "1"
		self.pan_3_id_139["LED_feedback"] = "default"
		self.pan_3_id_139["LED_feedback_active"] = "1"
		self.pan_3_id_139["LED_on"] = "127"
		self.pan_3_id_139["LED_off"] = "0"
		self.pan_3_id_139["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_18"]
		self.pan_3_id_139["snap_to"] = True
		self.pan_3_id_139["json_id"] = 139
		self.pan_3_id_139["mapping_name"] = "Pan 3"
		self.pan_3_id_139["mapping_type"] = "Pan"
		self.pan_3_id_139["parent_json_id"] = 76
		self.pan_3_id_139["parent_name"] = "pan_8_id_144"
		self.pan_4_id_140 = {}
		self.pan_4_id_140["attached_to"] = "midi_cc_ch_0_val_19"
		self.pan_4_id_140["track"] = self.track_num(2)
		self.pan_4_id_140["module"] = "self.relative_tracks_dict[3].mixer_device.panning"
		self.pan_4_id_140["element"] = "value"
		self.pan_4_id_140["output_type"] = "val"
		self.pan_4_id_140["minimum"] = round(0,2)
		self.pan_4_id_140["maximum"] = round(100,2)
		self.pan_4_id_140["decimal_places"] = 2
		self.pan_4_id_140["ui_listener"] = "value"
		self.pan_4_id_140["feedback_brain"] = "feedback_range"
		self.pan_4_id_140["ctrl_type"] = "relative"
		self.pan_4_id_140["enc_first"] = 65
		self.pan_4_id_140["enc_second"] = 1
		self.pan_4_id_140["steps"] = 127
		self.pan_4_id_140["LED_mapping_type_needs_feedback"] = "1"
		self.pan_4_id_140["LED_feedback"] = "default"
		self.pan_4_id_140["LED_feedback_active"] = "1"
		self.pan_4_id_140["LED_on"] = "127"
		self.pan_4_id_140["LED_off"] = "0"
		self.pan_4_id_140["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_19"]
		self.pan_4_id_140["snap_to"] = True
		self.pan_4_id_140["json_id"] = 140
		self.pan_4_id_140["mapping_name"] = "Pan 4"
		self.pan_4_id_140["mapping_type"] = "Pan"
		self.pan_4_id_140["parent_json_id"] = 77
		self.pan_4_id_140["parent_name"] = "pan_8_id_144"
		self.pan_5_id_141 = {}
		self.pan_5_id_141["attached_to"] = "midi_cc_ch_0_val_20"
		self.pan_5_id_141["track"] = self.track_num(2)
		self.pan_5_id_141["module"] = "self.relative_tracks_dict[4].mixer_device.panning"
		self.pan_5_id_141["element"] = "value"
		self.pan_5_id_141["output_type"] = "val"
		self.pan_5_id_141["minimum"] = round(0,2)
		self.pan_5_id_141["maximum"] = round(100,2)
		self.pan_5_id_141["decimal_places"] = 2
		self.pan_5_id_141["ui_listener"] = "value"
		self.pan_5_id_141["feedback_brain"] = "feedback_range"
		self.pan_5_id_141["ctrl_type"] = "relative"
		self.pan_5_id_141["enc_first"] = 65
		self.pan_5_id_141["enc_second"] = 1
		self.pan_5_id_141["steps"] = 127
		self.pan_5_id_141["LED_mapping_type_needs_feedback"] = "1"
		self.pan_5_id_141["LED_feedback"] = "default"
		self.pan_5_id_141["LED_feedback_active"] = "1"
		self.pan_5_id_141["LED_on"] = "127"
		self.pan_5_id_141["LED_off"] = "0"
		self.pan_5_id_141["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_20"]
		self.pan_5_id_141["snap_to"] = True
		self.pan_5_id_141["json_id"] = 141
		self.pan_5_id_141["mapping_name"] = "Pan 5"
		self.pan_5_id_141["mapping_type"] = "Pan"
		self.pan_5_id_141["parent_json_id"] = 78
		self.pan_5_id_141["parent_name"] = "pan_8_id_144"
		self.pan_6_id_142 = {}
		self.pan_6_id_142["attached_to"] = "midi_cc_ch_0_val_21"
		self.pan_6_id_142["track"] = self.track_num(2)
		self.pan_6_id_142["module"] = "self.relative_tracks_dict[5].mixer_device.panning"
		self.pan_6_id_142["element"] = "value"
		self.pan_6_id_142["output_type"] = "val"
		self.pan_6_id_142["minimum"] = round(0,2)
		self.pan_6_id_142["maximum"] = round(100,2)
		self.pan_6_id_142["decimal_places"] = 2
		self.pan_6_id_142["ui_listener"] = "value"
		self.pan_6_id_142["feedback_brain"] = "feedback_range"
		self.pan_6_id_142["ctrl_type"] = "relative"
		self.pan_6_id_142["enc_first"] = 65
		self.pan_6_id_142["enc_second"] = 1
		self.pan_6_id_142["steps"] = 127
		self.pan_6_id_142["LED_mapping_type_needs_feedback"] = "1"
		self.pan_6_id_142["LED_feedback"] = "default"
		self.pan_6_id_142["LED_feedback_active"] = "1"
		self.pan_6_id_142["LED_on"] = "127"
		self.pan_6_id_142["LED_off"] = "0"
		self.pan_6_id_142["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_21"]
		self.pan_6_id_142["snap_to"] = True
		self.pan_6_id_142["json_id"] = 142
		self.pan_6_id_142["mapping_name"] = "Pan 6"
		self.pan_6_id_142["mapping_type"] = "Pan"
		self.pan_6_id_142["parent_json_id"] = 79
		self.pan_6_id_142["parent_name"] = "pan_8_id_144"
		self.pan_7_id_143 = {}
		self.pan_7_id_143["attached_to"] = "midi_cc_ch_0_val_22"
		self.pan_7_id_143["track"] = self.track_num(2)
		self.pan_7_id_143["module"] = "self.relative_tracks_dict[6].mixer_device.panning"
		self.pan_7_id_143["element"] = "value"
		self.pan_7_id_143["output_type"] = "val"
		self.pan_7_id_143["minimum"] = round(0,2)
		self.pan_7_id_143["maximum"] = round(100,2)
		self.pan_7_id_143["decimal_places"] = 2
		self.pan_7_id_143["ui_listener"] = "value"
		self.pan_7_id_143["feedback_brain"] = "feedback_range"
		self.pan_7_id_143["ctrl_type"] = "relative"
		self.pan_7_id_143["enc_first"] = 65
		self.pan_7_id_143["enc_second"] = 1
		self.pan_7_id_143["steps"] = 127
		self.pan_7_id_143["LED_mapping_type_needs_feedback"] = "1"
		self.pan_7_id_143["LED_feedback"] = "default"
		self.pan_7_id_143["LED_feedback_active"] = "1"
		self.pan_7_id_143["LED_on"] = "127"
		self.pan_7_id_143["LED_off"] = "0"
		self.pan_7_id_143["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_22"]
		self.pan_7_id_143["snap_to"] = True
		self.pan_7_id_143["json_id"] = 143
		self.pan_7_id_143["mapping_name"] = "Pan 7"
		self.pan_7_id_143["mapping_type"] = "Pan"
		self.pan_7_id_143["parent_json_id"] = 80
		self.pan_7_id_143["parent_name"] = "pan_8_id_144"
		self.pan_8_id_144 = {}
		self.pan_8_id_144["attached_to"] = "midi_cc_ch_0_val_23"
		self.pan_8_id_144["track"] = self.track_num(2)
		self.pan_8_id_144["module"] = "self.relative_tracks_dict[7].mixer_device.panning"
		self.pan_8_id_144["element"] = "value"
		self.pan_8_id_144["output_type"] = "val"
		self.pan_8_id_144["minimum"] = round(0,2)
		self.pan_8_id_144["maximum"] = round(100,2)
		self.pan_8_id_144["decimal_places"] = 2
		self.pan_8_id_144["ui_listener"] = "value"
		self.pan_8_id_144["feedback_brain"] = "feedback_range"
		self.pan_8_id_144["ctrl_type"] = "relative"
		self.pan_8_id_144["enc_first"] = 65
		self.pan_8_id_144["enc_second"] = 1
		self.pan_8_id_144["steps"] = 127
		self.pan_8_id_144["LED_mapping_type_needs_feedback"] = "1"
		self.pan_8_id_144["LED_feedback"] = "default"
		self.pan_8_id_144["LED_feedback_active"] = "1"
		self.pan_8_id_144["LED_on"] = "127"
		self.pan_8_id_144["LED_off"] = "0"
		self.pan_8_id_144["LED_send_feedback_to_selected"] = ["midi_cc_ch_0_val_23"]
		self.pan_8_id_144["snap_to"] = True
		self.pan_8_id_144["json_id"] = 144
		self.pan_8_id_144["mapping_name"] = "Pan 8"
		self.pan_8_id_144["mapping_type"] = "Pan"
		self.pan_8_id_144["parent_json_id"] = 81
		self.pan_8_id_144["parent_name"] = "pan_8_id_144"
	def _mode1_led_listeners(self):
		try:
			self._mode1_fire_all_feedback()
		except:
			self.log("_mode1_led_listeners tried to call _mode1_fire_all_feedback but it does not exist")
		try:
			self.song().add_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_mode1_led_listeners tried to call add_tracks_listener but it does not exist")
		try:
			self.all_track_device_listeners()
		except:
			self.log("_mode1_led_listeners tried to call all_track_device_listeners but it does not exist")
		try:
			self._mode1_ui_listeners()
		except:
			self.log("_mode1_led_listeners tried to call _mode1_ui_listeners but it does not exist")
		self.track_feedback(1)
		self.device_feedback(1)
		self.mode_device_bank_leds(1)
	def _mode3_led_listeners(self):
		try:
			self._mode3_fire_all_feedback()
		except:
			self.log("_mode3_led_listeners tried to call _mode3_fire_all_feedback but it does not exist")
		try:
			self.song().add_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_mode3_led_listeners tried to call add_tracks_listener but it does not exist")
		try:
			self.all_track_device_listeners()
		except:
			self.log("_mode3_led_listeners tried to call all_track_device_listeners but it does not exist")
		try:
			self._mode3_ui_listeners()
		except:
			self.log("_mode3_led_listeners tried to call _mode3_ui_listeners but it does not exist")
		self.track_feedback(3)
		self.device_feedback(3)
		self.mode_device_bank_leds(3)
	def _mode4_led_listeners(self):
		try:
			self._mode4_fire_all_feedback()
		except:
			self.log("_mode4_led_listeners tried to call _mode4_fire_all_feedback but it does not exist")
		try:
			self.song().add_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_mode4_led_listeners tried to call add_tracks_listener but it does not exist")
		try:
			self.all_track_device_listeners()
		except:
			self.log("_mode4_led_listeners tried to call all_track_device_listeners but it does not exist")
		try:
			self._mode4_ui_listeners()
		except:
			self.log("_mode4_led_listeners tried to call _mode4_ui_listeners but it does not exist")
		self.track_feedback(4)
		self.device_feedback(4)
		self.mode_device_bank_leds(4)
	def _mode49_led_listeners(self):
		try:
			self._mode49_fire_all_feedback()
		except:
			self.log("_mode49_led_listeners tried to call _mode49_fire_all_feedback but it does not exist")
		try:
			self.song().add_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_mode49_led_listeners tried to call add_tracks_listener but it does not exist")
		try:
			self.all_track_device_listeners()
		except:
			self.log("_mode49_led_listeners tried to call all_track_device_listeners but it does not exist")
		try:
			self._mode49_ui_listeners()
		except:
			self.log("_mode49_led_listeners tried to call _mode49_ui_listeners but it does not exist")
		self.track_feedback(49)
		self.device_feedback(49)
		self.mode_device_bank_leds(49)
	def _remove_mode1_led_listeners(self):
		try:
			self.song().remove_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_remove_mode1_led_listeners tried to call remove_tracks_listener but it does not exist")
		try:
			self._remove_all_track_device_listeners()
		except:
			self.log("_remove_mode1_led_listeners tried to call _remove_all_track_device_listeners but it does not exist")
		try:
			self._remove_mode1_ui_listeners()
		except:
			self.log("_remove_mode1_led_listeners tried to call _remove_mode1_ui_listeners but it does not exist")
	def _remove_mode3_led_listeners(self):
		try:
			self.song().remove_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_remove_mode3_led_listeners tried to call remove_tracks_listener but it does not exist")
		try:
			self._remove_all_track_device_listeners()
		except:
			self.log("_remove_mode3_led_listeners tried to call _remove_all_track_device_listeners but it does not exist")
		try:
			self._remove_mode3_ui_listeners()
		except:
			self.log("_remove_mode3_led_listeners tried to call _remove_mode3_ui_listeners but it does not exist")
	def _remove_mode4_led_listeners(self):
		try:
			self.song().remove_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_remove_mode4_led_listeners tried to call remove_tracks_listener but it does not exist")
		try:
			self._remove_all_track_device_listeners()
		except:
			self.log("_remove_mode4_led_listeners tried to call _remove_all_track_device_listeners but it does not exist")
		try:
			self._remove_mode4_ui_listeners()
		except:
			self.log("_remove_mode4_led_listeners tried to call _remove_mode4_ui_listeners but it does not exist")
	def _remove_mode49_led_listeners(self):
		try:
			self.song().remove_tracks_listener(self._all_tracks_listener)
		except:
			self.log("_remove_mode49_led_listeners tried to call remove_tracks_listener but it does not exist")
		try:
			self._remove_all_track_device_listeners()
		except:
			self.log("_remove_mode49_led_listeners tried to call _remove_all_track_device_listeners but it does not exist")
		try:
			self._remove_mode49_ui_listeners()
		except:
			self.log("_remove_mode49_led_listeners tried to call _remove_mode49_ui_listeners but it does not exist")
	def _mode1_ui_listeners(self):
		try:
			self.new_session_record_mapping_id_353_led = eval(self.new_session_record_mapping_id_353["module"])
			self.new_session_record_mapping_id_353_led.add_session_record_listener(self.new_session_record_mapping_id_353_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_session_record_mapping_id_353["element"]) + " does not exist")
		try:
			self.change_drum1_id_351_led = eval(self.change_drum1_id_351["module"])
			self.change_drum1_id_351_led.add_mute_listener(self.change_drum1_id_351_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.change_drum1_id_351["element"]) + " does not exist")
		try:
			self.change_drum1_copy_352_id_352_led = eval(self.change_drum1_copy_352_id_352["module"])
			self.change_drum1_copy_352_id_352_led.add_mute_listener(self.change_drum1_copy_352_id_352_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.change_drum1_copy_352_id_352["element"]) + " does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_id_348_led_listener)
		except:
			self.log("_mode1_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_349_id_349_led_listener)
		except:
			self.log("_mode1_ui_listeners: self._session does not exist")
		try:
			self.new_parameter_mapping_id_296_led = eval(self.new_parameter_mapping_id_296["module"])
			self.new_parameter_mapping_id_296_led.add_value_listener(self.new_parameter_mapping_id_296_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_parameter_mapping_id_296["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_300_id_300_led = eval(self.new_parameter_mapping_copy_300_id_300["module"])
			self.new_parameter_mapping_copy_300_id_300_led.add_value_listener(self.new_parameter_mapping_copy_300_id_300_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_300_id_300["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_id_298_led = eval(self.new_parameter_mapping_copy_298_id_298["module"])
			self.new_parameter_mapping_copy_298_id_298_led.add_value_listener(self.new_parameter_mapping_copy_298_id_298_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_298_id_298["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_302_id_302_led = eval(self.new_parameter_mapping_copy_298_copy_302_id_302["module"])
			self.new_parameter_mapping_copy_298_copy_302_id_302_led.add_value_listener(self.new_parameter_mapping_copy_298_copy_302_id_302_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_302_id_302["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_id_297_led = eval(self.new_parameter_mapping_copy_297_id_297["module"])
			self.new_parameter_mapping_copy_297_id_297_led.add_value_listener(self.new_parameter_mapping_copy_297_id_297_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_297_id_297["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_301_id_301_led = eval(self.new_parameter_mapping_copy_297_copy_301_id_301["module"])
			self.new_parameter_mapping_copy_297_copy_301_id_301_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_301_id_301_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_301_id_301["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_id_299_led = eval(self.new_parameter_mapping_copy_297_copy_299_id_299["module"])
			self.new_parameter_mapping_copy_297_copy_299_id_299_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_299_id_299_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_id_299["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303_led = eval(self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["module"])
			self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_355_id_355_led = eval(self.new_arm_mapping_copy_355_id_355["module"])
			self.new_arm_mapping_copy_355_id_355_led.add_arm_listener(self.new_arm_mapping_copy_355_id_355_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_arm_mapping_copy_355_id_355["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_271_copy_359_id_359_led = eval(self.new_arm_mapping_copy_271_copy_359_id_359["module"])
			self.new_arm_mapping_copy_271_copy_359_id_359_led.add_arm_listener(self.new_arm_mapping_copy_271_copy_359_id_359_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_arm_mapping_copy_271_copy_359_id_359["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_363_id_363_led = eval(self.new_arm_mapping_copy_363_id_363["module"])
			self.new_arm_mapping_copy_363_id_363_led.add_arm_listener(self.new_arm_mapping_copy_363_id_363_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_arm_mapping_copy_363_id_363["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_270_copy_367_id_367_led = eval(self.new_arm_mapping_copy_270_copy_367_id_367["module"])
			self.new_arm_mapping_copy_270_copy_367_id_367_led.add_arm_listener(self.new_arm_mapping_copy_270_copy_367_id_367_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_arm_mapping_copy_270_copy_367_id_367["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_371_id_371_led = eval(self.new_arm_mapping_copy_267_copy_371_id_371["module"])
			self.new_arm_mapping_copy_267_copy_371_id_371_led.add_arm_listener(self.new_arm_mapping_copy_267_copy_371_id_371_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_371_id_371["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_269_copy_375_id_375_led = eval(self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["module"])
			self.new_arm_mapping_copy_267_copy_269_copy_375_id_375_led.add_arm_listener(self.new_arm_mapping_copy_267_copy_269_copy_375_id_375_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_379_id_379_led = eval(self.new_arm_mapping_copy_266_copy_379_id_379["module"])
			self.new_arm_mapping_copy_266_copy_379_id_379_led.add_arm_listener(self.new_arm_mapping_copy_266_copy_379_id_379_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_379_id_379["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_268_copy_383_id_383_led = eval(self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["module"])
			self.new_arm_mapping_copy_266_copy_268_copy_383_id_383_led.add_arm_listener(self.new_arm_mapping_copy_266_copy_268_copy_383_id_383_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["element"]) + " does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_id_252_led_listener)
		except:
			self.log("_mode1_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_263_id_263_led_listener)
		except:
			self.log("_mode1_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_259_id_259_led_listener)
		except:
			self.log("_mode1_ui_listeners: self._session does not exist")
		try:
			self.volume_1_id_7_led = eval(self.volume_1_id_7["module"])
			self.volume_1_id_7_led.add_value_listener(self.volume_1_id_7_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.volume_1_id_7["element"]) + " does not exist")
		try:
			self.volume_1_id_9_led = eval(self.volume_1_id_9["module"])
			self.volume_1_id_9_led.add_value_listener(self.volume_1_id_9_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.volume_1_id_9["element"]) + " does not exist")
		try:
			self.volume_1_id_11_led = eval(self.volume_1_id_11["module"])
			self.volume_1_id_11_led.add_value_listener(self.volume_1_id_11_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.volume_1_id_11["element"]) + " does not exist")
		try:
			self.volume_1_id_13_led = eval(self.volume_1_id_13["module"])
			self.volume_1_id_13_led.add_value_listener(self.volume_1_id_13_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.volume_1_id_13["element"]) + " does not exist")
		try:
			self.volume_1_id_15_led = eval(self.volume_1_id_15["module"])
			self.volume_1_id_15_led.add_value_listener(self.volume_1_id_15_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.volume_1_id_15["element"]) + " does not exist")
		try:
			self.volume_1_id_17_led = eval(self.volume_1_id_17["module"])
			self.volume_1_id_17_led.add_value_listener(self.volume_1_id_17_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.volume_1_id_17["element"]) + " does not exist")
		try:
			self.volume_1_id_19_led = eval(self.volume_1_id_19["module"])
			self.volume_1_id_19_led.add_value_listener(self.volume_1_id_19_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.volume_1_id_19["element"]) + " does not exist")
		try:
			self.volume_1_id_21_led = eval(self.volume_1_id_21["module"])
			self.volume_1_id_21_led.add_value_listener(self.volume_1_id_21_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.volume_1_id_21["element"]) + " does not exist")
		try:
			self.mute_1_id_22_led = eval(self.mute_1_id_22["module"])
			self.mute_1_id_22_led.add_mute_listener(self.mute_1_id_22_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.mute_1_id_22["element"]) + " does not exist")
		try:
			self.mute_2_id_24_led = eval(self.mute_2_id_24["module"])
			self.mute_2_id_24_led.add_mute_listener(self.mute_2_id_24_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.mute_2_id_24["element"]) + " does not exist")
		try:
			self.mute_3_id_26_led = eval(self.mute_3_id_26["module"])
			self.mute_3_id_26_led.add_mute_listener(self.mute_3_id_26_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.mute_3_id_26["element"]) + " does not exist")
		try:
			self.mute_4_id_28_led = eval(self.mute_4_id_28["module"])
			self.mute_4_id_28_led.add_mute_listener(self.mute_4_id_28_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.mute_4_id_28["element"]) + " does not exist")
		try:
			self.mute_5_id_30_led = eval(self.mute_5_id_30["module"])
			self.mute_5_id_30_led.add_mute_listener(self.mute_5_id_30_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.mute_5_id_30["element"]) + " does not exist")
		try:
			self.mute_6_id_32_led = eval(self.mute_6_id_32["module"])
			self.mute_6_id_32_led.add_mute_listener(self.mute_6_id_32_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.mute_6_id_32["element"]) + " does not exist")
		try:
			self.mute_7_id_34_led = eval(self.mute_7_id_34["module"])
			self.mute_7_id_34_led.add_mute_listener(self.mute_7_id_34_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.mute_7_id_34["element"]) + " does not exist")
		try:
			self.mute_8_id_36_led = eval(self.mute_8_id_36["module"])
			self.mute_8_id_36_led.add_mute_listener(self.mute_8_id_36_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.mute_8_id_36["element"]) + " does not exist")
		try:
			self.play_1_id_39_led = eval(self.play_1_id_39["module"])
			self.play_1_id_39_led.add_is_playing_listener(self.play_1_id_39_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.play_1_id_39["element"]) + " does not exist")
		try:
			self.stop_1_id_40_led = eval(self.stop_1_id_40["module"])
			self.stop_1_id_40_led.add_is_playing_listener(self.stop_1_id_40_led_listener)
		except:
			self.log("_mode1_ui_listeners: " + str(self.stop_1_id_40["element"]) + " does not exist")
	def _mode3_ui_listeners(self):
		try:
			self.new_parameter_mapping_copy_320_id_320_led = eval(self.new_parameter_mapping_copy_320_id_320["module"])
			self.new_parameter_mapping_copy_320_id_320_led.add_value_listener(self.new_parameter_mapping_copy_320_id_320_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_320_id_320["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_300_copy_321_id_321_led = eval(self.new_parameter_mapping_copy_300_copy_321_id_321["module"])
			self.new_parameter_mapping_copy_300_copy_321_id_321_led.add_value_listener(self.new_parameter_mapping_copy_300_copy_321_id_321_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_300_copy_321_id_321["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_322_id_322_led = eval(self.new_parameter_mapping_copy_298_copy_322_id_322["module"])
			self.new_parameter_mapping_copy_298_copy_322_id_322_led.add_value_listener(self.new_parameter_mapping_copy_298_copy_322_id_322_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_322_id_322["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323_led = eval(self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["module"])
			self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323_led.add_value_listener(self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_324_id_324_led = eval(self.new_parameter_mapping_copy_297_copy_324_id_324["module"])
			self.new_parameter_mapping_copy_297_copy_324_id_324_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_324_id_324_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_324_id_324["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325_led = eval(self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["module"])
			self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326_led = eval(self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["module"])
			self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327_led = eval(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["module"])
			self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_295_copy_356_id_356_led = eval(self.new_arm_mapping_copy_295_copy_356_id_356["module"])
			self.new_arm_mapping_copy_295_copy_356_id_356_led.add_arm_listener(self.new_arm_mapping_copy_295_copy_356_id_356_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_arm_mapping_copy_295_copy_356_id_356["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_271_copy_294_copy_360_id_360_led = eval(self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["module"])
			self.new_arm_mapping_copy_271_copy_294_copy_360_id_360_led.add_arm_listener(self.new_arm_mapping_copy_271_copy_294_copy_360_id_360_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_293_copy_364_id_364_led = eval(self.new_arm_mapping_copy_293_copy_364_id_364["module"])
			self.new_arm_mapping_copy_293_copy_364_id_364_led.add_arm_listener(self.new_arm_mapping_copy_293_copy_364_id_364_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_arm_mapping_copy_293_copy_364_id_364["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_270_copy_292_copy_368_id_368_led = eval(self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["module"])
			self.new_arm_mapping_copy_270_copy_292_copy_368_id_368_led.add_arm_listener(self.new_arm_mapping_copy_270_copy_292_copy_368_id_368_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_291_copy_372_id_372_led = eval(self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["module"])
			self.new_arm_mapping_copy_267_copy_291_copy_372_id_372_led.add_arm_listener(self.new_arm_mapping_copy_267_copy_291_copy_372_id_372_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376_led = eval(self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["module"])
			self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376_led.add_arm_listener(self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_289_copy_380_id_380_led = eval(self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["module"])
			self.new_arm_mapping_copy_266_copy_289_copy_380_id_380_led.add_arm_listener(self.new_arm_mapping_copy_266_copy_289_copy_380_id_380_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384_led = eval(self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["module"])
			self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384_led.add_arm_listener(self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["element"]) + " does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_254_id_254_led_listener)
		except:
			self.log("_mode3_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_254_copy_262_id_262_led_listener)
		except:
			self.log("_mode3_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_254_copy_258_id_258_led_listener)
		except:
			self.log("_mode3_ui_listeners: self._session does not exist")
		try:
			self.new_send_mapping_id_173_led = eval(self.new_send_mapping_id_173["module"])
			self.new_send_mapping_id_173_led.add_value_listener(self.new_send_mapping_id_173_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_send_mapping_id_173["element"]) + " does not exist")
		try:
			self.new_send_mapping_id_172_led = eval(self.new_send_mapping_id_172["module"])
			self.new_send_mapping_id_172_led.add_value_listener(self.new_send_mapping_id_172_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_send_mapping_id_172["element"]) + " does not exist")
		try:
			self.new_send_mapping_6_id_171_led = eval(self.new_send_mapping_6_id_171["module"])
			self.new_send_mapping_6_id_171_led.add_value_listener(self.new_send_mapping_6_id_171_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_send_mapping_6_id_171["element"]) + " does not exist")
		try:
			self.new_send_mapping_5_id_170_led = eval(self.new_send_mapping_5_id_170["module"])
			self.new_send_mapping_5_id_170_led.add_value_listener(self.new_send_mapping_5_id_170_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_send_mapping_5_id_170["element"]) + " does not exist")
		try:
			self.new_send_mapping_4_id_169_led = eval(self.new_send_mapping_4_id_169["module"])
			self.new_send_mapping_4_id_169_led.add_value_listener(self.new_send_mapping_4_id_169_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_send_mapping_4_id_169["element"]) + " does not exist")
		try:
			self.new_send_mapping_3_id_168_led = eval(self.new_send_mapping_3_id_168["module"])
			self.new_send_mapping_3_id_168_led.add_value_listener(self.new_send_mapping_3_id_168_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_send_mapping_3_id_168["element"]) + " does not exist")
		try:
			self.new_send_mapping_id_167_led = eval(self.new_send_mapping_id_167["module"])
			self.new_send_mapping_id_167_led.add_value_listener(self.new_send_mapping_id_167_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_send_mapping_id_167["element"]) + " does not exist")
		try:
			self.new_send_mapping_id_166_led = eval(self.new_send_mapping_id_166["module"])
			self.new_send_mapping_id_166_led.add_value_listener(self.new_send_mapping_id_166_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.new_send_mapping_id_166["element"]) + " does not exist")
		try:
			self.mute_1_id_51_led = eval(self.mute_1_id_51["module"])
			self.mute_1_id_51_led.add_mute_listener(self.mute_1_id_51_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.mute_1_id_51["element"]) + " does not exist")
		try:
			self.solo_1_id_52_led = eval(self.solo_1_id_52["module"])
			self.solo_1_id_52_led.add_solo_listener(self.solo_1_id_52_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.solo_1_id_52["element"]) + " does not exist")
		try:
			self.mute_2_id_54_led = eval(self.mute_2_id_54["module"])
			self.mute_2_id_54_led.add_mute_listener(self.mute_2_id_54_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.mute_2_id_54["element"]) + " does not exist")
		try:
			self.solo_2_id_55_led = eval(self.solo_2_id_55["module"])
			self.solo_2_id_55_led.add_solo_listener(self.solo_2_id_55_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.solo_2_id_55["element"]) + " does not exist")
		try:
			self.mute_3_id_57_led = eval(self.mute_3_id_57["module"])
			self.mute_3_id_57_led.add_mute_listener(self.mute_3_id_57_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.mute_3_id_57["element"]) + " does not exist")
		try:
			self.solo_3_id_58_led = eval(self.solo_3_id_58["module"])
			self.solo_3_id_58_led.add_solo_listener(self.solo_3_id_58_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.solo_3_id_58["element"]) + " does not exist")
		try:
			self.mute_4_id_60_led = eval(self.mute_4_id_60["module"])
			self.mute_4_id_60_led.add_mute_listener(self.mute_4_id_60_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.mute_4_id_60["element"]) + " does not exist")
		try:
			self.solo_4_id_61_led = eval(self.solo_4_id_61["module"])
			self.solo_4_id_61_led.add_solo_listener(self.solo_4_id_61_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.solo_4_id_61["element"]) + " does not exist")
		try:
			self.mute_5_id_63_led = eval(self.mute_5_id_63["module"])
			self.mute_5_id_63_led.add_mute_listener(self.mute_5_id_63_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.mute_5_id_63["element"]) + " does not exist")
		try:
			self.solo_5_id_64_led = eval(self.solo_5_id_64["module"])
			self.solo_5_id_64_led.add_solo_listener(self.solo_5_id_64_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.solo_5_id_64["element"]) + " does not exist")
		try:
			self.mute_6_id_66_led = eval(self.mute_6_id_66["module"])
			self.mute_6_id_66_led.add_mute_listener(self.mute_6_id_66_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.mute_6_id_66["element"]) + " does not exist")
		try:
			self.solo_6_id_67_led = eval(self.solo_6_id_67["module"])
			self.solo_6_id_67_led.add_solo_listener(self.solo_6_id_67_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.solo_6_id_67["element"]) + " does not exist")
		try:
			self.mute_7_id_69_led = eval(self.mute_7_id_69["module"])
			self.mute_7_id_69_led.add_mute_listener(self.mute_7_id_69_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.mute_7_id_69["element"]) + " does not exist")
		try:
			self.solo_7_id_70_led = eval(self.solo_7_id_70["module"])
			self.solo_7_id_70_led.add_solo_listener(self.solo_7_id_70_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.solo_7_id_70["element"]) + " does not exist")
		try:
			self.mute_8_id_72_led = eval(self.mute_8_id_72["module"])
			self.mute_8_id_72_led.add_mute_listener(self.mute_8_id_72_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.mute_8_id_72["element"]) + " does not exist")
		try:
			self.solo_8_id_73_led = eval(self.solo_8_id_73["module"])
			self.solo_8_id_73_led.add_solo_listener(self.solo_8_id_73_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.solo_8_id_73["element"]) + " does not exist")
		try:
			self.play_1_id_83_led = eval(self.play_1_id_83["module"])
			self.play_1_id_83_led.add_is_playing_listener(self.play_1_id_83_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.play_1_id_83["element"]) + " does not exist")
		try:
			self.stop_1_id_84_led = eval(self.stop_1_id_84["module"])
			self.stop_1_id_84_led.add_is_playing_listener(self.stop_1_id_84_led_listener)
		except:
			self.log("_mode3_ui_listeners: " + str(self.stop_1_id_84["element"]) + " does not exist")
	def _mode4_ui_listeners(self):
		try:
			self.new_parameter_mapping_copy_312_id_312_led = eval(self.new_parameter_mapping_copy_312_id_312["module"])
			self.new_parameter_mapping_copy_312_id_312_led.add_value_listener(self.new_parameter_mapping_copy_312_id_312_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_312_id_312["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_300_copy_313_id_313_led = eval(self.new_parameter_mapping_copy_300_copy_313_id_313["module"])
			self.new_parameter_mapping_copy_300_copy_313_id_313_led.add_value_listener(self.new_parameter_mapping_copy_300_copy_313_id_313_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_300_copy_313_id_313["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_314_id_314_led = eval(self.new_parameter_mapping_copy_298_copy_314_id_314["module"])
			self.new_parameter_mapping_copy_298_copy_314_id_314_led.add_value_listener(self.new_parameter_mapping_copy_298_copy_314_id_314_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_314_id_314["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315_led = eval(self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["module"])
			self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315_led.add_value_listener(self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_316_id_316_led = eval(self.new_parameter_mapping_copy_297_copy_316_id_316["module"])
			self.new_parameter_mapping_copy_297_copy_316_id_316_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_316_id_316_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_316_id_316["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317_led = eval(self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["module"])
			self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318_led = eval(self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["module"])
			self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319_led = eval(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["module"])
			self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_287_copy_357_id_357_led = eval(self.new_arm_mapping_copy_287_copy_357_id_357["module"])
			self.new_arm_mapping_copy_287_copy_357_id_357_led.add_arm_listener(self.new_arm_mapping_copy_287_copy_357_id_357_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_arm_mapping_copy_287_copy_357_id_357["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_271_copy_286_copy_361_id_361_led = eval(self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["module"])
			self.new_arm_mapping_copy_271_copy_286_copy_361_id_361_led.add_arm_listener(self.new_arm_mapping_copy_271_copy_286_copy_361_id_361_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_285_copy_365_id_365_led = eval(self.new_arm_mapping_copy_285_copy_365_id_365["module"])
			self.new_arm_mapping_copy_285_copy_365_id_365_led.add_arm_listener(self.new_arm_mapping_copy_285_copy_365_id_365_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_arm_mapping_copy_285_copy_365_id_365["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_270_copy_284_copy_369_id_369_led = eval(self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["module"])
			self.new_arm_mapping_copy_270_copy_284_copy_369_id_369_led.add_arm_listener(self.new_arm_mapping_copy_270_copy_284_copy_369_id_369_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_283_copy_373_id_373_led = eval(self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["module"])
			self.new_arm_mapping_copy_267_copy_283_copy_373_id_373_led.add_arm_listener(self.new_arm_mapping_copy_267_copy_283_copy_373_id_373_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377_led = eval(self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["module"])
			self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377_led.add_arm_listener(self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_281_copy_381_id_381_led = eval(self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["module"])
			self.new_arm_mapping_copy_266_copy_281_copy_381_id_381_led.add_arm_listener(self.new_arm_mapping_copy_266_copy_281_copy_381_id_381_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385_led = eval(self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["module"])
			self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385_led.add_arm_listener(self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["element"]) + " does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_253_id_253_led_listener)
		except:
			self.log("_mode4_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_261_id_261_led_listener)
		except:
			self.log("_mode4_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_257_id_257_led_listener)
		except:
			self.log("_mode4_ui_listeners: self._session does not exist")
		try:
			self.new_send_mapping_copy_182_id_182_led = eval(self.new_send_mapping_copy_182_id_182["module"])
			self.new_send_mapping_copy_182_id_182_led.add_value_listener(self.new_send_mapping_copy_182_id_182_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_send_mapping_copy_182_id_182["element"]) + " does not exist")
		try:
			self.new_send_mapping_copy_183_id_183_led = eval(self.new_send_mapping_copy_183_id_183["module"])
			self.new_send_mapping_copy_183_id_183_led.add_value_listener(self.new_send_mapping_copy_183_id_183_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_send_mapping_copy_183_id_183["element"]) + " does not exist")
		try:
			self.new_send_mapping_6_copy_184_id_184_led = eval(self.new_send_mapping_6_copy_184_id_184["module"])
			self.new_send_mapping_6_copy_184_id_184_led.add_value_listener(self.new_send_mapping_6_copy_184_id_184_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_send_mapping_6_copy_184_id_184["element"]) + " does not exist")
		try:
			self.new_send_mapping_5_copy_185_id_185_led = eval(self.new_send_mapping_5_copy_185_id_185["module"])
			self.new_send_mapping_5_copy_185_id_185_led.add_value_listener(self.new_send_mapping_5_copy_185_id_185_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_send_mapping_5_copy_185_id_185["element"]) + " does not exist")
		try:
			self.new_send_mapping_4_copy_186_id_186_led = eval(self.new_send_mapping_4_copy_186_id_186["module"])
			self.new_send_mapping_4_copy_186_id_186_led.add_value_listener(self.new_send_mapping_4_copy_186_id_186_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_send_mapping_4_copy_186_id_186["element"]) + " does not exist")
		try:
			self.new_send_mapping_3_copy_187_id_187_led = eval(self.new_send_mapping_3_copy_187_id_187["module"])
			self.new_send_mapping_3_copy_187_id_187_led.add_value_listener(self.new_send_mapping_3_copy_187_id_187_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_send_mapping_3_copy_187_id_187["element"]) + " does not exist")
		try:
			self.new_send_mapping_copy_188_id_188_led = eval(self.new_send_mapping_copy_188_id_188["module"])
			self.new_send_mapping_copy_188_id_188_led.add_value_listener(self.new_send_mapping_copy_188_id_188_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_send_mapping_copy_188_id_188["element"]) + " does not exist")
		try:
			self.new_send_mapping_copy_189_id_189_led = eval(self.new_send_mapping_copy_189_id_189["module"])
			self.new_send_mapping_copy_189_id_189_led.add_value_listener(self.new_send_mapping_copy_189_id_189_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.new_send_mapping_copy_189_id_189["element"]) + " does not exist")
		try:
			self.mute_1_id_95_led = eval(self.mute_1_id_95["module"])
			self.mute_1_id_95_led.add_mute_listener(self.mute_1_id_95_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.mute_1_id_95["element"]) + " does not exist")
		try:
			self.solo_1_id_96_led = eval(self.solo_1_id_96["module"])
			self.solo_1_id_96_led.add_solo_listener(self.solo_1_id_96_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.solo_1_id_96["element"]) + " does not exist")
		try:
			self.mute_2_id_98_led = eval(self.mute_2_id_98["module"])
			self.mute_2_id_98_led.add_mute_listener(self.mute_2_id_98_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.mute_2_id_98["element"]) + " does not exist")
		try:
			self.solo_2_id_99_led = eval(self.solo_2_id_99["module"])
			self.solo_2_id_99_led.add_solo_listener(self.solo_2_id_99_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.solo_2_id_99["element"]) + " does not exist")
		try:
			self.mute_3_id_101_led = eval(self.mute_3_id_101["module"])
			self.mute_3_id_101_led.add_mute_listener(self.mute_3_id_101_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.mute_3_id_101["element"]) + " does not exist")
		try:
			self.solo_3_id_102_led = eval(self.solo_3_id_102["module"])
			self.solo_3_id_102_led.add_solo_listener(self.solo_3_id_102_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.solo_3_id_102["element"]) + " does not exist")
		try:
			self.mute_4_id_104_led = eval(self.mute_4_id_104["module"])
			self.mute_4_id_104_led.add_mute_listener(self.mute_4_id_104_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.mute_4_id_104["element"]) + " does not exist")
		try:
			self.solo_4_id_105_led = eval(self.solo_4_id_105["module"])
			self.solo_4_id_105_led.add_solo_listener(self.solo_4_id_105_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.solo_4_id_105["element"]) + " does not exist")
		try:
			self.mute_5_id_107_led = eval(self.mute_5_id_107["module"])
			self.mute_5_id_107_led.add_mute_listener(self.mute_5_id_107_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.mute_5_id_107["element"]) + " does not exist")
		try:
			self.solo_5_id_108_led = eval(self.solo_5_id_108["module"])
			self.solo_5_id_108_led.add_solo_listener(self.solo_5_id_108_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.solo_5_id_108["element"]) + " does not exist")
		try:
			self.mute_6_id_110_led = eval(self.mute_6_id_110["module"])
			self.mute_6_id_110_led.add_mute_listener(self.mute_6_id_110_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.mute_6_id_110["element"]) + " does not exist")
		try:
			self.solo_6_id_111_led = eval(self.solo_6_id_111["module"])
			self.solo_6_id_111_led.add_solo_listener(self.solo_6_id_111_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.solo_6_id_111["element"]) + " does not exist")
		try:
			self.mute_7_id_113_led = eval(self.mute_7_id_113["module"])
			self.mute_7_id_113_led.add_mute_listener(self.mute_7_id_113_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.mute_7_id_113["element"]) + " does not exist")
		try:
			self.solo_7_id_114_led = eval(self.solo_7_id_114["module"])
			self.solo_7_id_114_led.add_solo_listener(self.solo_7_id_114_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.solo_7_id_114["element"]) + " does not exist")
		try:
			self.mute_8_id_116_led = eval(self.mute_8_id_116["module"])
			self.mute_8_id_116_led.add_mute_listener(self.mute_8_id_116_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.mute_8_id_116["element"]) + " does not exist")
		try:
			self.solo_8_id_117_led = eval(self.solo_8_id_117["module"])
			self.solo_8_id_117_led.add_solo_listener(self.solo_8_id_117_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.solo_8_id_117["element"]) + " does not exist")
		try:
			self.play_1_id_127_led = eval(self.play_1_id_127["module"])
			self.play_1_id_127_led.add_is_playing_listener(self.play_1_id_127_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.play_1_id_127["element"]) + " does not exist")
		try:
			self.stop_1_id_128_led = eval(self.stop_1_id_128["module"])
			self.stop_1_id_128_led.add_is_playing_listener(self.stop_1_id_128_led_listener)
		except:
			self.log("_mode4_ui_listeners: " + str(self.stop_1_id_128["element"]) + " does not exist")
	def _mode49_ui_listeners(self):
		try:
			self.new_parameter_mapping_copy_304_id_304_led = eval(self.new_parameter_mapping_copy_304_id_304["module"])
			self.new_parameter_mapping_copy_304_id_304_led.add_value_listener(self.new_parameter_mapping_copy_304_id_304_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_304_id_304["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_300_copy_305_id_305_led = eval(self.new_parameter_mapping_copy_300_copy_305_id_305["module"])
			self.new_parameter_mapping_copy_300_copy_305_id_305_led.add_value_listener(self.new_parameter_mapping_copy_300_copy_305_id_305_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_300_copy_305_id_305["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_306_id_306_led = eval(self.new_parameter_mapping_copy_298_copy_306_id_306["module"])
			self.new_parameter_mapping_copy_298_copy_306_id_306_led.add_value_listener(self.new_parameter_mapping_copy_298_copy_306_id_306_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_306_id_306["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307_led = eval(self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["module"])
			self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307_led.add_value_listener(self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_308_id_308_led = eval(self.new_parameter_mapping_copy_297_copy_308_id_308["module"])
			self.new_parameter_mapping_copy_297_copy_308_id_308_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_308_id_308_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_308_id_308["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309_led = eval(self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["module"])
			self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310_led = eval(self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["module"])
			self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311_led = eval(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["module"])
			self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311_led.add_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_279_copy_358_id_358_led = eval(self.new_arm_mapping_copy_279_copy_358_id_358["module"])
			self.new_arm_mapping_copy_279_copy_358_id_358_led.add_arm_listener(self.new_arm_mapping_copy_279_copy_358_id_358_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_arm_mapping_copy_279_copy_358_id_358["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_271_copy_278_copy_362_id_362_led = eval(self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["module"])
			self.new_arm_mapping_copy_271_copy_278_copy_362_id_362_led.add_arm_listener(self.new_arm_mapping_copy_271_copy_278_copy_362_id_362_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_277_copy_366_id_366_led = eval(self.new_arm_mapping_copy_277_copy_366_id_366["module"])
			self.new_arm_mapping_copy_277_copy_366_id_366_led.add_arm_listener(self.new_arm_mapping_copy_277_copy_366_id_366_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_arm_mapping_copy_277_copy_366_id_366["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_270_copy_276_copy_370_id_370_led = eval(self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["module"])
			self.new_arm_mapping_copy_270_copy_276_copy_370_id_370_led.add_arm_listener(self.new_arm_mapping_copy_270_copy_276_copy_370_id_370_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_275_copy_374_id_374_led = eval(self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["module"])
			self.new_arm_mapping_copy_267_copy_275_copy_374_id_374_led.add_arm_listener(self.new_arm_mapping_copy_267_copy_275_copy_374_id_374_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378_led = eval(self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["module"])
			self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378_led.add_arm_listener(self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_273_copy_382_id_382_led = eval(self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["module"])
			self.new_arm_mapping_copy_266_copy_273_copy_382_id_382_led.add_arm_listener(self.new_arm_mapping_copy_266_copy_273_copy_382_id_382_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386_led = eval(self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["module"])
			self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386_led.add_arm_listener(self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["element"]) + " does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_255_id_255_led_listener)
		except:
			self.log("_mode49_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256_led_listener)
		except:
			self.log("_mode49_ui_listeners: self._session does not exist")
		try:
			self._session.add_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260_led_listener)
		except:
			self.log("_mode49_ui_listeners: self._session does not exist")
		try:
			self.mute_1_copy_222_id_222_led = eval(self.mute_1_copy_222_id_222["module"])
			self.mute_1_copy_222_id_222_led.add_mute_listener(self.mute_1_copy_222_id_222_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.mute_1_copy_222_id_222["element"]) + " does not exist")
		try:
			self.solo_1_copy_223_id_223_led = eval(self.solo_1_copy_223_id_223["module"])
			self.solo_1_copy_223_id_223_led.add_solo_listener(self.solo_1_copy_223_id_223_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.solo_1_copy_223_id_223["element"]) + " does not exist")
		try:
			self.mute_2_copy_224_id_224_led = eval(self.mute_2_copy_224_id_224["module"])
			self.mute_2_copy_224_id_224_led.add_mute_listener(self.mute_2_copy_224_id_224_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.mute_2_copy_224_id_224["element"]) + " does not exist")
		try:
			self.solo_2_copy_225_id_225_led = eval(self.solo_2_copy_225_id_225["module"])
			self.solo_2_copy_225_id_225_led.add_solo_listener(self.solo_2_copy_225_id_225_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.solo_2_copy_225_id_225["element"]) + " does not exist")
		try:
			self.mute_3_copy_226_id_226_led = eval(self.mute_3_copy_226_id_226["module"])
			self.mute_3_copy_226_id_226_led.add_mute_listener(self.mute_3_copy_226_id_226_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.mute_3_copy_226_id_226["element"]) + " does not exist")
		try:
			self.solo_3_copy_227_id_227_led = eval(self.solo_3_copy_227_id_227["module"])
			self.solo_3_copy_227_id_227_led.add_solo_listener(self.solo_3_copy_227_id_227_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.solo_3_copy_227_id_227["element"]) + " does not exist")
		try:
			self.mute_4_copy_228_id_228_led = eval(self.mute_4_copy_228_id_228["module"])
			self.mute_4_copy_228_id_228_led.add_mute_listener(self.mute_4_copy_228_id_228_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.mute_4_copy_228_id_228["element"]) + " does not exist")
		try:
			self.solo_4_copy_229_id_229_led = eval(self.solo_4_copy_229_id_229["module"])
			self.solo_4_copy_229_id_229_led.add_solo_listener(self.solo_4_copy_229_id_229_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.solo_4_copy_229_id_229["element"]) + " does not exist")
		try:
			self.mute_5_copy_230_id_230_led = eval(self.mute_5_copy_230_id_230["module"])
			self.mute_5_copy_230_id_230_led.add_mute_listener(self.mute_5_copy_230_id_230_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.mute_5_copy_230_id_230["element"]) + " does not exist")
		try:
			self.solo_5_copy_231_id_231_led = eval(self.solo_5_copy_231_id_231["module"])
			self.solo_5_copy_231_id_231_led.add_solo_listener(self.solo_5_copy_231_id_231_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.solo_5_copy_231_id_231["element"]) + " does not exist")
		try:
			self.mute_6_copy_232_id_232_led = eval(self.mute_6_copy_232_id_232["module"])
			self.mute_6_copy_232_id_232_led.add_mute_listener(self.mute_6_copy_232_id_232_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.mute_6_copy_232_id_232["element"]) + " does not exist")
		try:
			self.solo_6_copy_233_id_233_led = eval(self.solo_6_copy_233_id_233["module"])
			self.solo_6_copy_233_id_233_led.add_solo_listener(self.solo_6_copy_233_id_233_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.solo_6_copy_233_id_233["element"]) + " does not exist")
		try:
			self.mute_7_copy_234_id_234_led = eval(self.mute_7_copy_234_id_234["module"])
			self.mute_7_copy_234_id_234_led.add_mute_listener(self.mute_7_copy_234_id_234_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.mute_7_copy_234_id_234["element"]) + " does not exist")
		try:
			self.solo_7_copy_235_id_235_led = eval(self.solo_7_copy_235_id_235["module"])
			self.solo_7_copy_235_id_235_led.add_solo_listener(self.solo_7_copy_235_id_235_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.solo_7_copy_235_id_235["element"]) + " does not exist")
		try:
			self.mute_8_copy_236_id_236_led = eval(self.mute_8_copy_236_id_236["module"])
			self.mute_8_copy_236_id_236_led.add_mute_listener(self.mute_8_copy_236_id_236_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.mute_8_copy_236_id_236["element"]) + " does not exist")
		try:
			self.solo_8_copy_237_id_237_led = eval(self.solo_8_copy_237_id_237["module"])
			self.solo_8_copy_237_id_237_led.add_solo_listener(self.solo_8_copy_237_id_237_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.solo_8_copy_237_id_237["element"]) + " does not exist")
		try:
			self.play_1_copy_239_id_239_led = eval(self.play_1_copy_239_id_239["module"])
			self.play_1_copy_239_id_239_led.add_is_playing_listener(self.play_1_copy_239_id_239_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.play_1_copy_239_id_239["element"]) + " does not exist")
		try:
			self.stop_1_copy_240_id_240_led = eval(self.stop_1_copy_240_id_240["module"])
			self.stop_1_copy_240_id_240_led.add_is_playing_listener(self.stop_1_copy_240_id_240_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.stop_1_copy_240_id_240["element"]) + " does not exist")
		try:
			self.pan_1_id_137_led = eval(self.pan_1_id_137["module"])
			self.pan_1_id_137_led.add_value_listener(self.pan_1_id_137_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.pan_1_id_137["element"]) + " does not exist")
		try:
			self.pan_1_copy_251_id_251_led = eval(self.pan_1_copy_251_id_251["module"])
			self.pan_1_copy_251_id_251_led.add_value_listener(self.pan_1_copy_251_id_251_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.pan_1_copy_251_id_251["element"]) + " does not exist")
		try:
			self.pan_3_id_139_led = eval(self.pan_3_id_139["module"])
			self.pan_3_id_139_led.add_value_listener(self.pan_3_id_139_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.pan_3_id_139["element"]) + " does not exist")
		try:
			self.pan_4_id_140_led = eval(self.pan_4_id_140["module"])
			self.pan_4_id_140_led.add_value_listener(self.pan_4_id_140_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.pan_4_id_140["element"]) + " does not exist")
		try:
			self.pan_5_id_141_led = eval(self.pan_5_id_141["module"])
			self.pan_5_id_141_led.add_value_listener(self.pan_5_id_141_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.pan_5_id_141["element"]) + " does not exist")
		try:
			self.pan_6_id_142_led = eval(self.pan_6_id_142["module"])
			self.pan_6_id_142_led.add_value_listener(self.pan_6_id_142_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.pan_6_id_142["element"]) + " does not exist")
		try:
			self.pan_7_id_143_led = eval(self.pan_7_id_143["module"])
			self.pan_7_id_143_led.add_value_listener(self.pan_7_id_143_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.pan_7_id_143["element"]) + " does not exist")
		try:
			self.pan_8_id_144_led = eval(self.pan_8_id_144["module"])
			self.pan_8_id_144_led.add_value_listener(self.pan_8_id_144_led_listener)
		except:
			self.log("_mode49_ui_listeners: " + str(self.pan_8_id_144["element"]) + " does not exist")
	def _remove_mode1_ui_listeners(self):
		try:
			self.new_session_record_mapping_id_353_led.remove_session_record_listener(self.new_session_record_mapping_id_353_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_session_record_mapping_id_353["element"]) + " does not exist")
		try:
			self.change_drum1_id_351_led.remove_mute_listener(self.change_drum1_id_351_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.change_drum1_id_351["element"]) + " does not exist")
		try:
			self.change_drum1_copy_352_id_352_led.remove_mute_listener(self.change_drum1_copy_352_id_352_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.change_drum1_copy_352_id_352["element"]) + " does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_id_348_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_349_id_349_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: self._session does not exist")
		try:
			self.new_parameter_mapping_id_296_led.remove_value_listener(self.new_parameter_mapping_id_296_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_parameter_mapping_id_296["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_300_id_300_led.remove_value_listener(self.new_parameter_mapping_copy_300_id_300_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_300_id_300["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_id_298_led.remove_value_listener(self.new_parameter_mapping_copy_298_id_298_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_298_id_298["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_302_id_302_led.remove_value_listener(self.new_parameter_mapping_copy_298_copy_302_id_302_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_302_id_302["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_id_297_led.remove_value_listener(self.new_parameter_mapping_copy_297_id_297_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_297_id_297["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_301_id_301_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_301_id_301_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_301_id_301["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_id_299_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_299_id_299_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_id_299["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_355_id_355_led.remove_arm_listener(self.new_arm_mapping_copy_355_id_355_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_arm_mapping_copy_355_id_355["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_271_copy_359_id_359_led.remove_arm_listener(self.new_arm_mapping_copy_271_copy_359_id_359_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_arm_mapping_copy_271_copy_359_id_359["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_363_id_363_led.remove_arm_listener(self.new_arm_mapping_copy_363_id_363_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_arm_mapping_copy_363_id_363["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_270_copy_367_id_367_led.remove_arm_listener(self.new_arm_mapping_copy_270_copy_367_id_367_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_arm_mapping_copy_270_copy_367_id_367["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_371_id_371_led.remove_arm_listener(self.new_arm_mapping_copy_267_copy_371_id_371_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_371_id_371["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_269_copy_375_id_375_led.remove_arm_listener(self.new_arm_mapping_copy_267_copy_269_copy_375_id_375_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_269_copy_375_id_375["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_379_id_379_led.remove_arm_listener(self.new_arm_mapping_copy_266_copy_379_id_379_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_379_id_379["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_268_copy_383_id_383_led.remove_arm_listener(self.new_arm_mapping_copy_266_copy_268_copy_383_id_383_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_268_copy_383_id_383["element"]) + " does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_id_252_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_263_id_263_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_259_id_259_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: self._session does not exist")
		try:
			self.volume_1_id_7_led.remove_value_listener(self.volume_1_id_7_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.volume_1_id_7["element"]) + " does not exist")
		try:
			self.volume_1_id_9_led.remove_value_listener(self.volume_1_id_9_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.volume_1_id_9["element"]) + " does not exist")
		try:
			self.volume_1_id_11_led.remove_value_listener(self.volume_1_id_11_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.volume_1_id_11["element"]) + " does not exist")
		try:
			self.volume_1_id_13_led.remove_value_listener(self.volume_1_id_13_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.volume_1_id_13["element"]) + " does not exist")
		try:
			self.volume_1_id_15_led.remove_value_listener(self.volume_1_id_15_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.volume_1_id_15["element"]) + " does not exist")
		try:
			self.volume_1_id_17_led.remove_value_listener(self.volume_1_id_17_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.volume_1_id_17["element"]) + " does not exist")
		try:
			self.volume_1_id_19_led.remove_value_listener(self.volume_1_id_19_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.volume_1_id_19["element"]) + " does not exist")
		try:
			self.volume_1_id_21_led.remove_value_listener(self.volume_1_id_21_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.volume_1_id_21["element"]) + " does not exist")
		try:
			self.mute_1_id_22_led.remove_mute_listener(self.mute_1_id_22_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.mute_1_id_22["element"]) + " does not exist")
		try:
			self.mute_2_id_24_led.remove_mute_listener(self.mute_2_id_24_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.mute_2_id_24["element"]) + " does not exist")
		try:
			self.mute_3_id_26_led.remove_mute_listener(self.mute_3_id_26_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.mute_3_id_26["element"]) + " does not exist")
		try:
			self.mute_4_id_28_led.remove_mute_listener(self.mute_4_id_28_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.mute_4_id_28["element"]) + " does not exist")
		try:
			self.mute_5_id_30_led.remove_mute_listener(self.mute_5_id_30_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.mute_5_id_30["element"]) + " does not exist")
		try:
			self.mute_6_id_32_led.remove_mute_listener(self.mute_6_id_32_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.mute_6_id_32["element"]) + " does not exist")
		try:
			self.mute_7_id_34_led.remove_mute_listener(self.mute_7_id_34_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.mute_7_id_34["element"]) + " does not exist")
		try:
			self.mute_8_id_36_led.remove_mute_listener(self.mute_8_id_36_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.mute_8_id_36["element"]) + " does not exist")
		try:
			self.play_1_id_39_led.remove_is_playing_listener(self.play_1_id_39_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.play_1_id_39["element"]) + " does not exist")
		try:
			self.stop_1_id_40_led.remove_is_playing_listener(self.stop_1_id_40_led_listener)
		except:
			self.log("remove__mode1_ui_listeners: " + str(self.stop_1_id_40["element"]) + " does not exist")
	def _remove_mode3_ui_listeners(self):
		try:
			self.new_parameter_mapping_copy_320_id_320_led.remove_value_listener(self.new_parameter_mapping_copy_320_id_320_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_320_id_320["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_300_copy_321_id_321_led.remove_value_listener(self.new_parameter_mapping_copy_300_copy_321_id_321_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_300_copy_321_id_321["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_322_id_322_led.remove_value_listener(self.new_parameter_mapping_copy_298_copy_322_id_322_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_322_id_322["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323_led.remove_value_listener(self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_324_id_324_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_324_id_324_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_324_id_324["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_295_copy_356_id_356_led.remove_arm_listener(self.new_arm_mapping_copy_295_copy_356_id_356_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_arm_mapping_copy_295_copy_356_id_356["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_271_copy_294_copy_360_id_360_led.remove_arm_listener(self.new_arm_mapping_copy_271_copy_294_copy_360_id_360_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_arm_mapping_copy_271_copy_294_copy_360_id_360["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_293_copy_364_id_364_led.remove_arm_listener(self.new_arm_mapping_copy_293_copy_364_id_364_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_arm_mapping_copy_293_copy_364_id_364["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_270_copy_292_copy_368_id_368_led.remove_arm_listener(self.new_arm_mapping_copy_270_copy_292_copy_368_id_368_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_arm_mapping_copy_270_copy_292_copy_368_id_368["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_291_copy_372_id_372_led.remove_arm_listener(self.new_arm_mapping_copy_267_copy_291_copy_372_id_372_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_291_copy_372_id_372["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376_led.remove_arm_listener(self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_289_copy_380_id_380_led.remove_arm_listener(self.new_arm_mapping_copy_266_copy_289_copy_380_id_380_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_289_copy_380_id_380["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384_led.remove_arm_listener(self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384["element"]) + " does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_254_id_254_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_254_copy_262_id_262_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_254_copy_258_id_258_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: self._session does not exist")
		try:
			self.new_send_mapping_id_173_led.remove_value_listener(self.new_send_mapping_id_173_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_send_mapping_id_173["element"]) + " does not exist")
		try:
			self.new_send_mapping_id_172_led.remove_value_listener(self.new_send_mapping_id_172_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_send_mapping_id_172["element"]) + " does not exist")
		try:
			self.new_send_mapping_6_id_171_led.remove_value_listener(self.new_send_mapping_6_id_171_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_send_mapping_6_id_171["element"]) + " does not exist")
		try:
			self.new_send_mapping_5_id_170_led.remove_value_listener(self.new_send_mapping_5_id_170_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_send_mapping_5_id_170["element"]) + " does not exist")
		try:
			self.new_send_mapping_4_id_169_led.remove_value_listener(self.new_send_mapping_4_id_169_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_send_mapping_4_id_169["element"]) + " does not exist")
		try:
			self.new_send_mapping_3_id_168_led.remove_value_listener(self.new_send_mapping_3_id_168_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_send_mapping_3_id_168["element"]) + " does not exist")
		try:
			self.new_send_mapping_id_167_led.remove_value_listener(self.new_send_mapping_id_167_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_send_mapping_id_167["element"]) + " does not exist")
		try:
			self.new_send_mapping_id_166_led.remove_value_listener(self.new_send_mapping_id_166_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.new_send_mapping_id_166["element"]) + " does not exist")
		try:
			self.mute_1_id_51_led.remove_mute_listener(self.mute_1_id_51_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.mute_1_id_51["element"]) + " does not exist")
		try:
			self.solo_1_id_52_led.remove_solo_listener(self.solo_1_id_52_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.solo_1_id_52["element"]) + " does not exist")
		try:
			self.mute_2_id_54_led.remove_mute_listener(self.mute_2_id_54_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.mute_2_id_54["element"]) + " does not exist")
		try:
			self.solo_2_id_55_led.remove_solo_listener(self.solo_2_id_55_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.solo_2_id_55["element"]) + " does not exist")
		try:
			self.mute_3_id_57_led.remove_mute_listener(self.mute_3_id_57_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.mute_3_id_57["element"]) + " does not exist")
		try:
			self.solo_3_id_58_led.remove_solo_listener(self.solo_3_id_58_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.solo_3_id_58["element"]) + " does not exist")
		try:
			self.mute_4_id_60_led.remove_mute_listener(self.mute_4_id_60_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.mute_4_id_60["element"]) + " does not exist")
		try:
			self.solo_4_id_61_led.remove_solo_listener(self.solo_4_id_61_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.solo_4_id_61["element"]) + " does not exist")
		try:
			self.mute_5_id_63_led.remove_mute_listener(self.mute_5_id_63_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.mute_5_id_63["element"]) + " does not exist")
		try:
			self.solo_5_id_64_led.remove_solo_listener(self.solo_5_id_64_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.solo_5_id_64["element"]) + " does not exist")
		try:
			self.mute_6_id_66_led.remove_mute_listener(self.mute_6_id_66_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.mute_6_id_66["element"]) + " does not exist")
		try:
			self.solo_6_id_67_led.remove_solo_listener(self.solo_6_id_67_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.solo_6_id_67["element"]) + " does not exist")
		try:
			self.mute_7_id_69_led.remove_mute_listener(self.mute_7_id_69_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.mute_7_id_69["element"]) + " does not exist")
		try:
			self.solo_7_id_70_led.remove_solo_listener(self.solo_7_id_70_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.solo_7_id_70["element"]) + " does not exist")
		try:
			self.mute_8_id_72_led.remove_mute_listener(self.mute_8_id_72_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.mute_8_id_72["element"]) + " does not exist")
		try:
			self.solo_8_id_73_led.remove_solo_listener(self.solo_8_id_73_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.solo_8_id_73["element"]) + " does not exist")
		try:
			self.play_1_id_83_led.remove_is_playing_listener(self.play_1_id_83_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.play_1_id_83["element"]) + " does not exist")
		try:
			self.stop_1_id_84_led.remove_is_playing_listener(self.stop_1_id_84_led_listener)
		except:
			self.log("remove__mode3_ui_listeners: " + str(self.stop_1_id_84["element"]) + " does not exist")
	def _remove_mode4_ui_listeners(self):
		try:
			self.new_parameter_mapping_copy_312_id_312_led.remove_value_listener(self.new_parameter_mapping_copy_312_id_312_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_312_id_312["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_300_copy_313_id_313_led.remove_value_listener(self.new_parameter_mapping_copy_300_copy_313_id_313_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_300_copy_313_id_313["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_314_id_314_led.remove_value_listener(self.new_parameter_mapping_copy_298_copy_314_id_314_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_314_id_314["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315_led.remove_value_listener(self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_316_id_316_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_316_id_316_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_316_id_316["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_287_copy_357_id_357_led.remove_arm_listener(self.new_arm_mapping_copy_287_copy_357_id_357_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_arm_mapping_copy_287_copy_357_id_357["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_271_copy_286_copy_361_id_361_led.remove_arm_listener(self.new_arm_mapping_copy_271_copy_286_copy_361_id_361_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_arm_mapping_copy_271_copy_286_copy_361_id_361["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_285_copy_365_id_365_led.remove_arm_listener(self.new_arm_mapping_copy_285_copy_365_id_365_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_arm_mapping_copy_285_copy_365_id_365["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_270_copy_284_copy_369_id_369_led.remove_arm_listener(self.new_arm_mapping_copy_270_copy_284_copy_369_id_369_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_arm_mapping_copy_270_copy_284_copy_369_id_369["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_283_copy_373_id_373_led.remove_arm_listener(self.new_arm_mapping_copy_267_copy_283_copy_373_id_373_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_283_copy_373_id_373["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377_led.remove_arm_listener(self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_281_copy_381_id_381_led.remove_arm_listener(self.new_arm_mapping_copy_266_copy_281_copy_381_id_381_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_281_copy_381_id_381["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385_led.remove_arm_listener(self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385["element"]) + " does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_253_id_253_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_261_id_261_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_257_id_257_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: self._session does not exist")
		try:
			self.new_send_mapping_copy_182_id_182_led.remove_value_listener(self.new_send_mapping_copy_182_id_182_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_send_mapping_copy_182_id_182["element"]) + " does not exist")
		try:
			self.new_send_mapping_copy_183_id_183_led.remove_value_listener(self.new_send_mapping_copy_183_id_183_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_send_mapping_copy_183_id_183["element"]) + " does not exist")
		try:
			self.new_send_mapping_6_copy_184_id_184_led.remove_value_listener(self.new_send_mapping_6_copy_184_id_184_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_send_mapping_6_copy_184_id_184["element"]) + " does not exist")
		try:
			self.new_send_mapping_5_copy_185_id_185_led.remove_value_listener(self.new_send_mapping_5_copy_185_id_185_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_send_mapping_5_copy_185_id_185["element"]) + " does not exist")
		try:
			self.new_send_mapping_4_copy_186_id_186_led.remove_value_listener(self.new_send_mapping_4_copy_186_id_186_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_send_mapping_4_copy_186_id_186["element"]) + " does not exist")
		try:
			self.new_send_mapping_3_copy_187_id_187_led.remove_value_listener(self.new_send_mapping_3_copy_187_id_187_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_send_mapping_3_copy_187_id_187["element"]) + " does not exist")
		try:
			self.new_send_mapping_copy_188_id_188_led.remove_value_listener(self.new_send_mapping_copy_188_id_188_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_send_mapping_copy_188_id_188["element"]) + " does not exist")
		try:
			self.new_send_mapping_copy_189_id_189_led.remove_value_listener(self.new_send_mapping_copy_189_id_189_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.new_send_mapping_copy_189_id_189["element"]) + " does not exist")
		try:
			self.mute_1_id_95_led.remove_mute_listener(self.mute_1_id_95_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.mute_1_id_95["element"]) + " does not exist")
		try:
			self.solo_1_id_96_led.remove_solo_listener(self.solo_1_id_96_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.solo_1_id_96["element"]) + " does not exist")
		try:
			self.mute_2_id_98_led.remove_mute_listener(self.mute_2_id_98_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.mute_2_id_98["element"]) + " does not exist")
		try:
			self.solo_2_id_99_led.remove_solo_listener(self.solo_2_id_99_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.solo_2_id_99["element"]) + " does not exist")
		try:
			self.mute_3_id_101_led.remove_mute_listener(self.mute_3_id_101_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.mute_3_id_101["element"]) + " does not exist")
		try:
			self.solo_3_id_102_led.remove_solo_listener(self.solo_3_id_102_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.solo_3_id_102["element"]) + " does not exist")
		try:
			self.mute_4_id_104_led.remove_mute_listener(self.mute_4_id_104_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.mute_4_id_104["element"]) + " does not exist")
		try:
			self.solo_4_id_105_led.remove_solo_listener(self.solo_4_id_105_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.solo_4_id_105["element"]) + " does not exist")
		try:
			self.mute_5_id_107_led.remove_mute_listener(self.mute_5_id_107_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.mute_5_id_107["element"]) + " does not exist")
		try:
			self.solo_5_id_108_led.remove_solo_listener(self.solo_5_id_108_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.solo_5_id_108["element"]) + " does not exist")
		try:
			self.mute_6_id_110_led.remove_mute_listener(self.mute_6_id_110_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.mute_6_id_110["element"]) + " does not exist")
		try:
			self.solo_6_id_111_led.remove_solo_listener(self.solo_6_id_111_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.solo_6_id_111["element"]) + " does not exist")
		try:
			self.mute_7_id_113_led.remove_mute_listener(self.mute_7_id_113_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.mute_7_id_113["element"]) + " does not exist")
		try:
			self.solo_7_id_114_led.remove_solo_listener(self.solo_7_id_114_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.solo_7_id_114["element"]) + " does not exist")
		try:
			self.mute_8_id_116_led.remove_mute_listener(self.mute_8_id_116_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.mute_8_id_116["element"]) + " does not exist")
		try:
			self.solo_8_id_117_led.remove_solo_listener(self.solo_8_id_117_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.solo_8_id_117["element"]) + " does not exist")
		try:
			self.play_1_id_127_led.remove_is_playing_listener(self.play_1_id_127_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.play_1_id_127["element"]) + " does not exist")
		try:
			self.stop_1_id_128_led.remove_is_playing_listener(self.stop_1_id_128_led_listener)
		except:
			self.log("remove__mode4_ui_listeners: " + str(self.stop_1_id_128["element"]) + " does not exist")
	def _remove_mode49_ui_listeners(self):
		try:
			self.new_parameter_mapping_copy_304_id_304_led.remove_value_listener(self.new_parameter_mapping_copy_304_id_304_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_304_id_304["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_300_copy_305_id_305_led.remove_value_listener(self.new_parameter_mapping_copy_300_copy_305_id_305_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_300_copy_305_id_305["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_306_id_306_led.remove_value_listener(self.new_parameter_mapping_copy_298_copy_306_id_306_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_306_id_306["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307_led.remove_value_listener(self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_308_id_308_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_308_id_308_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_308_id_308["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310["element"]) + " does not exist")
		try:
			self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311_led.remove_value_listener(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_279_copy_358_id_358_led.remove_arm_listener(self.new_arm_mapping_copy_279_copy_358_id_358_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_arm_mapping_copy_279_copy_358_id_358["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_271_copy_278_copy_362_id_362_led.remove_arm_listener(self.new_arm_mapping_copy_271_copy_278_copy_362_id_362_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_arm_mapping_copy_271_copy_278_copy_362_id_362["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_277_copy_366_id_366_led.remove_arm_listener(self.new_arm_mapping_copy_277_copy_366_id_366_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_arm_mapping_copy_277_copy_366_id_366["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_270_copy_276_copy_370_id_370_led.remove_arm_listener(self.new_arm_mapping_copy_270_copy_276_copy_370_id_370_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_arm_mapping_copy_270_copy_276_copy_370_id_370["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_275_copy_374_id_374_led.remove_arm_listener(self.new_arm_mapping_copy_267_copy_275_copy_374_id_374_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_275_copy_374_id_374["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378_led.remove_arm_listener(self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_273_copy_382_id_382_led.remove_arm_listener(self.new_arm_mapping_copy_266_copy_273_copy_382_id_382_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_273_copy_382_id_382["element"]) + " does not exist")
		try:
			self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386_led.remove_arm_listener(self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386["element"]) + " does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_255_id_255_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: self._session does not exist")
		try:
			self._session.remove_offset_listener(self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: self._session does not exist")
		try:
			self.mute_1_copy_222_id_222_led.remove_mute_listener(self.mute_1_copy_222_id_222_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.mute_1_copy_222_id_222["element"]) + " does not exist")
		try:
			self.solo_1_copy_223_id_223_led.remove_solo_listener(self.solo_1_copy_223_id_223_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.solo_1_copy_223_id_223["element"]) + " does not exist")
		try:
			self.mute_2_copy_224_id_224_led.remove_mute_listener(self.mute_2_copy_224_id_224_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.mute_2_copy_224_id_224["element"]) + " does not exist")
		try:
			self.solo_2_copy_225_id_225_led.remove_solo_listener(self.solo_2_copy_225_id_225_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.solo_2_copy_225_id_225["element"]) + " does not exist")
		try:
			self.mute_3_copy_226_id_226_led.remove_mute_listener(self.mute_3_copy_226_id_226_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.mute_3_copy_226_id_226["element"]) + " does not exist")
		try:
			self.solo_3_copy_227_id_227_led.remove_solo_listener(self.solo_3_copy_227_id_227_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.solo_3_copy_227_id_227["element"]) + " does not exist")
		try:
			self.mute_4_copy_228_id_228_led.remove_mute_listener(self.mute_4_copy_228_id_228_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.mute_4_copy_228_id_228["element"]) + " does not exist")
		try:
			self.solo_4_copy_229_id_229_led.remove_solo_listener(self.solo_4_copy_229_id_229_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.solo_4_copy_229_id_229["element"]) + " does not exist")
		try:
			self.mute_5_copy_230_id_230_led.remove_mute_listener(self.mute_5_copy_230_id_230_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.mute_5_copy_230_id_230["element"]) + " does not exist")
		try:
			self.solo_5_copy_231_id_231_led.remove_solo_listener(self.solo_5_copy_231_id_231_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.solo_5_copy_231_id_231["element"]) + " does not exist")
		try:
			self.mute_6_copy_232_id_232_led.remove_mute_listener(self.mute_6_copy_232_id_232_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.mute_6_copy_232_id_232["element"]) + " does not exist")
		try:
			self.solo_6_copy_233_id_233_led.remove_solo_listener(self.solo_6_copy_233_id_233_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.solo_6_copy_233_id_233["element"]) + " does not exist")
		try:
			self.mute_7_copy_234_id_234_led.remove_mute_listener(self.mute_7_copy_234_id_234_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.mute_7_copy_234_id_234["element"]) + " does not exist")
		try:
			self.solo_7_copy_235_id_235_led.remove_solo_listener(self.solo_7_copy_235_id_235_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.solo_7_copy_235_id_235["element"]) + " does not exist")
		try:
			self.mute_8_copy_236_id_236_led.remove_mute_listener(self.mute_8_copy_236_id_236_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.mute_8_copy_236_id_236["element"]) + " does not exist")
		try:
			self.solo_8_copy_237_id_237_led.remove_solo_listener(self.solo_8_copy_237_id_237_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.solo_8_copy_237_id_237["element"]) + " does not exist")
		try:
			self.play_1_copy_239_id_239_led.remove_is_playing_listener(self.play_1_copy_239_id_239_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.play_1_copy_239_id_239["element"]) + " does not exist")
		try:
			self.stop_1_copy_240_id_240_led.remove_is_playing_listener(self.stop_1_copy_240_id_240_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.stop_1_copy_240_id_240["element"]) + " does not exist")
		try:
			self.pan_1_id_137_led.remove_value_listener(self.pan_1_id_137_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.pan_1_id_137["element"]) + " does not exist")
		try:
			self.pan_1_copy_251_id_251_led.remove_value_listener(self.pan_1_copy_251_id_251_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.pan_1_copy_251_id_251["element"]) + " does not exist")
		try:
			self.pan_3_id_139_led.remove_value_listener(self.pan_3_id_139_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.pan_3_id_139["element"]) + " does not exist")
		try:
			self.pan_4_id_140_led.remove_value_listener(self.pan_4_id_140_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.pan_4_id_140["element"]) + " does not exist")
		try:
			self.pan_5_id_141_led.remove_value_listener(self.pan_5_id_141_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.pan_5_id_141["element"]) + " does not exist")
		try:
			self.pan_6_id_142_led.remove_value_listener(self.pan_6_id_142_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.pan_6_id_142["element"]) + " does not exist")
		try:
			self.pan_7_id_143_led.remove_value_listener(self.pan_7_id_143_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.pan_7_id_143["element"]) + " does not exist")
		try:
			self.pan_8_id_144_led.remove_value_listener(self.pan_8_id_144_led_listener)
		except:
			self.log("remove__mode49_ui_listeners: " + str(self.pan_8_id_144["element"]) + " does not exist")
	def _mode1_fire_all_feedback(self):
		self.new_session_record_mapping_id_353_led_listener()
		self.change_drum1_id_351_led_listener()
		self.change_drum1_copy_352_id_352_led_listener()
		self.new_session_box_navigation_mapping_id_348_led_listener()
		self.new_session_box_navigation_mapping_copy_349_id_349_led_listener()
		self.new_parameter_mapping_id_296_led_listener()
		self.new_parameter_mapping_copy_300_id_300_led_listener()
		self.new_parameter_mapping_copy_298_id_298_led_listener()
		self.new_parameter_mapping_copy_298_copy_302_id_302_led_listener()
		self.new_parameter_mapping_copy_297_id_297_led_listener()
		self.new_parameter_mapping_copy_297_copy_301_id_301_led_listener()
		self.new_parameter_mapping_copy_297_copy_299_id_299_led_listener()
		self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303_led_listener()
		self.new_arm_mapping_copy_355_id_355_led_listener()
		self.new_arm_mapping_copy_271_copy_359_id_359_led_listener()
		self.new_arm_mapping_copy_363_id_363_led_listener()
		self.new_arm_mapping_copy_270_copy_367_id_367_led_listener()
		self.new_arm_mapping_copy_267_copy_371_id_371_led_listener()
		self.new_arm_mapping_copy_267_copy_269_copy_375_id_375_led_listener()
		self.new_arm_mapping_copy_266_copy_379_id_379_led_listener()
		self.new_arm_mapping_copy_266_copy_268_copy_383_id_383_led_listener()
		self.new_session_box_navigation_mapping_id_252_led_listener()
		self.new_session_box_navigation_mapping_copy_263_id_263_led_listener()
		self.new_session_box_navigation_mapping_copy_259_id_259_led_listener()
		self.volume_1_id_7_led_listener()
		self.volume_1_id_9_led_listener()
		self.volume_1_id_11_led_listener()
		self.volume_1_id_13_led_listener()
		self.volume_1_id_15_led_listener()
		self.volume_1_id_17_led_listener()
		self.volume_1_id_19_led_listener()
		self.volume_1_id_21_led_listener()
		self.mute_1_id_22_led_listener()
		self.mute_2_id_24_led_listener()
		self.mute_3_id_26_led_listener()
		self.mute_4_id_28_led_listener()
		self.mute_5_id_30_led_listener()
		self.mute_6_id_32_led_listener()
		self.mute_7_id_34_led_listener()
		self.mute_8_id_36_led_listener()
		self.play_1_id_39_led_listener()
		self.stop_1_id_40_led_listener()
		self.pan_id_47_led_listener()
		self.aux_id_48_led_listener()
	def _mode3_fire_all_feedback(self):
		self.new_parameter_mapping_copy_320_id_320_led_listener()
		self.new_parameter_mapping_copy_300_copy_321_id_321_led_listener()
		self.new_parameter_mapping_copy_298_copy_322_id_322_led_listener()
		self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323_led_listener()
		self.new_parameter_mapping_copy_297_copy_324_id_324_led_listener()
		self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325_led_listener()
		self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326_led_listener()
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327_led_listener()
		self.new_arm_mapping_copy_295_copy_356_id_356_led_listener()
		self.new_arm_mapping_copy_271_copy_294_copy_360_id_360_led_listener()
		self.new_arm_mapping_copy_293_copy_364_id_364_led_listener()
		self.new_arm_mapping_copy_270_copy_292_copy_368_id_368_led_listener()
		self.new_arm_mapping_copy_267_copy_291_copy_372_id_372_led_listener()
		self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376_led_listener()
		self.new_arm_mapping_copy_266_copy_289_copy_380_id_380_led_listener()
		self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384_led_listener()
		self.new_session_box_navigation_mapping_copy_254_id_254_led_listener()
		self.new_session_box_navigation_mapping_copy_254_copy_262_id_262_led_listener()
		self.new_session_box_navigation_mapping_copy_254_copy_258_id_258_led_listener()
		self.new_send_mapping_id_173_led_listener()
		self.new_send_mapping_id_172_led_listener()
		self.new_send_mapping_6_id_171_led_listener()
		self.new_send_mapping_5_id_170_led_listener()
		self.new_send_mapping_4_id_169_led_listener()
		self.new_send_mapping_3_id_168_led_listener()
		self.new_send_mapping_id_167_led_listener()
		self.new_send_mapping_id_166_led_listener()
		self.mute_1_id_51_led_listener()
		self.solo_1_id_52_led_listener()
		self.mute_2_id_54_led_listener()
		self.solo_2_id_55_led_listener()
		self.mute_3_id_57_led_listener()
		self.solo_3_id_58_led_listener()
		self.mute_4_id_60_led_listener()
		self.solo_4_id_61_led_listener()
		self.mute_5_id_63_led_listener()
		self.solo_5_id_64_led_listener()
		self.mute_6_id_66_led_listener()
		self.solo_6_id_67_led_listener()
		self.mute_7_id_69_led_listener()
		self.solo_7_id_70_led_listener()
		self.mute_8_id_72_led_listener()
		self.solo_8_id_73_led_listener()
		self.play_1_id_83_led_listener()
		self.stop_1_id_84_led_listener()
		self.pan_id_91_led_listener()
		self.aux_id_92_led_listener()
	def _mode4_fire_all_feedback(self):
		self.new_parameter_mapping_copy_312_id_312_led_listener()
		self.new_parameter_mapping_copy_300_copy_313_id_313_led_listener()
		self.new_parameter_mapping_copy_298_copy_314_id_314_led_listener()
		self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315_led_listener()
		self.new_parameter_mapping_copy_297_copy_316_id_316_led_listener()
		self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317_led_listener()
		self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318_led_listener()
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319_led_listener()
		self.new_arm_mapping_copy_287_copy_357_id_357_led_listener()
		self.new_arm_mapping_copy_271_copy_286_copy_361_id_361_led_listener()
		self.new_arm_mapping_copy_285_copy_365_id_365_led_listener()
		self.new_arm_mapping_copy_270_copy_284_copy_369_id_369_led_listener()
		self.new_arm_mapping_copy_267_copy_283_copy_373_id_373_led_listener()
		self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377_led_listener()
		self.new_arm_mapping_copy_266_copy_281_copy_381_id_381_led_listener()
		self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385_led_listener()
		self.new_session_box_navigation_mapping_copy_253_id_253_led_listener()
		self.new_session_box_navigation_mapping_copy_253_copy_261_id_261_led_listener()
		self.new_session_box_navigation_mapping_copy_253_copy_257_id_257_led_listener()
		self.new_send_mapping_copy_182_id_182_led_listener()
		self.new_send_mapping_copy_183_id_183_led_listener()
		self.new_send_mapping_6_copy_184_id_184_led_listener()
		self.new_send_mapping_5_copy_185_id_185_led_listener()
		self.new_send_mapping_4_copy_186_id_186_led_listener()
		self.new_send_mapping_3_copy_187_id_187_led_listener()
		self.new_send_mapping_copy_188_id_188_led_listener()
		self.new_send_mapping_copy_189_id_189_led_listener()
		self.mute_1_id_95_led_listener()
		self.solo_1_id_96_led_listener()
		self.mute_2_id_98_led_listener()
		self.solo_2_id_99_led_listener()
		self.mute_3_id_101_led_listener()
		self.solo_3_id_102_led_listener()
		self.mute_4_id_104_led_listener()
		self.solo_4_id_105_led_listener()
		self.mute_5_id_107_led_listener()
		self.solo_5_id_108_led_listener()
		self.mute_6_id_110_led_listener()
		self.solo_6_id_111_led_listener()
		self.mute_7_id_113_led_listener()
		self.solo_7_id_114_led_listener()
		self.mute_8_id_116_led_listener()
		self.solo_8_id_117_led_listener()
		self.play_1_id_127_led_listener()
		self.stop_1_id_128_led_listener()
		self.pan_id_135_led_listener()
		self.aux_id_136_led_listener()
	def _mode49_fire_all_feedback(self):
		self.new_parameter_mapping_copy_304_id_304_led_listener()
		self.new_parameter_mapping_copy_300_copy_305_id_305_led_listener()
		self.new_parameter_mapping_copy_298_copy_306_id_306_led_listener()
		self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307_led_listener()
		self.new_parameter_mapping_copy_297_copy_308_id_308_led_listener()
		self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309_led_listener()
		self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310_led_listener()
		self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311_led_listener()
		self.new_arm_mapping_copy_279_copy_358_id_358_led_listener()
		self.new_arm_mapping_copy_271_copy_278_copy_362_id_362_led_listener()
		self.new_arm_mapping_copy_277_copy_366_id_366_led_listener()
		self.new_arm_mapping_copy_270_copy_276_copy_370_id_370_led_listener()
		self.new_arm_mapping_copy_267_copy_275_copy_374_id_374_led_listener()
		self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378_led_listener()
		self.new_arm_mapping_copy_266_copy_273_copy_382_id_382_led_listener()
		self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386_led_listener()
		self.new_session_box_navigation_mapping_copy_253_copy_255_id_255_led_listener()
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256_led_listener()
		self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260_led_listener()
		self.mute_1_copy_222_id_222_led_listener()
		self.solo_1_copy_223_id_223_led_listener()
		self.mute_2_copy_224_id_224_led_listener()
		self.solo_2_copy_225_id_225_led_listener()
		self.mute_3_copy_226_id_226_led_listener()
		self.solo_3_copy_227_id_227_led_listener()
		self.mute_4_copy_228_id_228_led_listener()
		self.solo_4_copy_229_id_229_led_listener()
		self.mute_5_copy_230_id_230_led_listener()
		self.solo_5_copy_231_id_231_led_listener()
		self.mute_6_copy_232_id_232_led_listener()
		self.solo_6_copy_233_id_233_led_listener()
		self.mute_7_copy_234_id_234_led_listener()
		self.solo_7_copy_235_id_235_led_listener()
		self.mute_8_copy_236_id_236_led_listener()
		self.solo_8_copy_237_id_237_led_listener()
		self.play_1_copy_239_id_239_led_listener()
		self.stop_1_copy_240_id_240_led_listener()
		self.pan_copy_247_id_247_led_listener()
		self.aux_copy_248_id_248_led_listener()
		self.pan_1_id_137_led_listener()
		self.pan_1_copy_251_id_251_led_listener()
		self.pan_3_id_139_led_listener()
		self.pan_4_id_140_led_listener()
		self.pan_5_id_141_led_listener()
		self.pan_6_id_142_led_listener()
		self.pan_7_id_143_led_listener()
		self.pan_8_id_144_led_listener()
	def new_session_record_mapping_id_353_led_listener(self):
		self.feedback_brain(self.new_session_record_mapping_id_353)
	def change_drum1_id_351_led_listener(self):
		self.feedback_brain(self.change_drum1_id_351)
	def change_drum1_copy_352_id_352_led_listener(self):
		self.feedback_brain(self.change_drum1_copy_352_id_352)
	def new_session_box_navigation_mapping_id_348_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_id_348)
	def new_session_box_navigation_mapping_copy_349_id_349_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_349_id_349)
	def new_parameter_mapping_id_296_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_id_296)
	def new_parameter_mapping_copy_320_id_320_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_320_id_320)
	def new_parameter_mapping_copy_312_id_312_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_312_id_312)
	def new_parameter_mapping_copy_304_id_304_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_304_id_304)
	def new_parameter_mapping_copy_300_id_300_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_300_id_300)
	def new_parameter_mapping_copy_300_copy_321_id_321_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_300_copy_321_id_321)
	def new_parameter_mapping_copy_300_copy_313_id_313_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_300_copy_313_id_313)
	def new_parameter_mapping_copy_300_copy_305_id_305_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_300_copy_305_id_305)
	def new_parameter_mapping_copy_298_id_298_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_298_id_298)
	def new_parameter_mapping_copy_298_copy_322_id_322_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_298_copy_322_id_322)
	def new_parameter_mapping_copy_298_copy_314_id_314_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_298_copy_314_id_314)
	def new_parameter_mapping_copy_298_copy_306_id_306_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_298_copy_306_id_306)
	def new_parameter_mapping_copy_298_copy_302_id_302_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_298_copy_302_id_302)
	def new_parameter_mapping_copy_298_copy_302_copy_323_id_323_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_298_copy_302_copy_323_id_323)
	def new_parameter_mapping_copy_298_copy_302_copy_315_id_315_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_298_copy_302_copy_315_id_315)
	def new_parameter_mapping_copy_298_copy_302_copy_307_id_307_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_298_copy_302_copy_307_id_307)
	def new_parameter_mapping_copy_297_id_297_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_id_297)
	def new_parameter_mapping_copy_297_copy_324_id_324_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_324_id_324)
	def new_parameter_mapping_copy_297_copy_316_id_316_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_316_id_316)
	def new_parameter_mapping_copy_297_copy_308_id_308_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_308_id_308)
	def new_parameter_mapping_copy_297_copy_301_id_301_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_301_id_301)
	def new_parameter_mapping_copy_297_copy_301_copy_325_id_325_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_301_copy_325_id_325)
	def new_parameter_mapping_copy_297_copy_301_copy_317_id_317_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_301_copy_317_id_317)
	def new_parameter_mapping_copy_297_copy_301_copy_309_id_309_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_301_copy_309_id_309)
	def new_parameter_mapping_copy_297_copy_299_id_299_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_299_id_299)
	def new_parameter_mapping_copy_297_copy_299_copy_326_id_326_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_299_copy_326_id_326)
	def new_parameter_mapping_copy_297_copy_299_copy_318_id_318_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_299_copy_318_id_318)
	def new_parameter_mapping_copy_297_copy_299_copy_310_id_310_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_299_copy_310_id_310)
	def new_parameter_mapping_copy_297_copy_299_copy_303_id_303_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_299_copy_303_id_303)
	def new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_327_id_327)
	def new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_319_id_319)
	def new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311_led_listener(self):
		self.feedback_brain(self.new_parameter_mapping_copy_297_copy_299_copy_303_copy_311_id_311)
	def new_arm_mapping_copy_355_id_355_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_355_id_355)
	def new_arm_mapping_copy_295_copy_356_id_356_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_295_copy_356_id_356)
	def new_arm_mapping_copy_287_copy_357_id_357_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_287_copy_357_id_357)
	def new_arm_mapping_copy_279_copy_358_id_358_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_279_copy_358_id_358)
	def new_arm_mapping_copy_271_copy_359_id_359_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_271_copy_359_id_359)
	def new_arm_mapping_copy_271_copy_294_copy_360_id_360_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_271_copy_294_copy_360_id_360)
	def new_arm_mapping_copy_271_copy_286_copy_361_id_361_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_271_copy_286_copy_361_id_361)
	def new_arm_mapping_copy_271_copy_278_copy_362_id_362_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_271_copy_278_copy_362_id_362)
	def new_arm_mapping_copy_363_id_363_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_363_id_363)
	def new_arm_mapping_copy_293_copy_364_id_364_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_293_copy_364_id_364)
	def new_arm_mapping_copy_285_copy_365_id_365_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_285_copy_365_id_365)
	def new_arm_mapping_copy_277_copy_366_id_366_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_277_copy_366_id_366)
	def new_arm_mapping_copy_270_copy_367_id_367_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_270_copy_367_id_367)
	def new_arm_mapping_copy_270_copy_292_copy_368_id_368_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_270_copy_292_copy_368_id_368)
	def new_arm_mapping_copy_270_copy_284_copy_369_id_369_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_270_copy_284_copy_369_id_369)
	def new_arm_mapping_copy_270_copy_276_copy_370_id_370_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_270_copy_276_copy_370_id_370)
	def new_arm_mapping_copy_267_copy_371_id_371_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_267_copy_371_id_371)
	def new_arm_mapping_copy_267_copy_291_copy_372_id_372_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_267_copy_291_copy_372_id_372)
	def new_arm_mapping_copy_267_copy_283_copy_373_id_373_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_267_copy_283_copy_373_id_373)
	def new_arm_mapping_copy_267_copy_275_copy_374_id_374_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_267_copy_275_copy_374_id_374)
	def new_arm_mapping_copy_267_copy_269_copy_375_id_375_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_267_copy_269_copy_375_id_375)
	def new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_267_copy_269_copy_290_copy_376_id_376)
	def new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_267_copy_269_copy_282_copy_377_id_377)
	def new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_267_copy_269_copy_274_copy_378_id_378)
	def new_arm_mapping_copy_266_copy_379_id_379_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_266_copy_379_id_379)
	def new_arm_mapping_copy_266_copy_289_copy_380_id_380_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_266_copy_289_copy_380_id_380)
	def new_arm_mapping_copy_266_copy_281_copy_381_id_381_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_266_copy_281_copy_381_id_381)
	def new_arm_mapping_copy_266_copy_273_copy_382_id_382_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_266_copy_273_copy_382_id_382)
	def new_arm_mapping_copy_266_copy_268_copy_383_id_383_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_266_copy_268_copy_383_id_383)
	def new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_266_copy_268_copy_288_copy_384_id_384)
	def new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_266_copy_268_copy_280_copy_385_id_385)
	def new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386_led_listener(self):
		self.feedback_brain(self.new_arm_mapping_copy_266_copy_268_copy_272_copy_386_id_386)
	def new_session_box_navigation_mapping_id_252_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_id_252)
	def new_session_box_navigation_mapping_copy_263_id_263_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_263_id_263)
	def new_session_box_navigation_mapping_copy_259_id_259_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_259_id_259)
	def new_session_box_navigation_mapping_copy_254_id_254_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_254_id_254)
	def new_session_box_navigation_mapping_copy_254_copy_262_id_262_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_254_copy_262_id_262)
	def new_session_box_navigation_mapping_copy_254_copy_258_id_258_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_254_copy_258_id_258)
	def new_session_box_navigation_mapping_copy_253_id_253_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_253_id_253)
	def new_session_box_navigation_mapping_copy_253_copy_261_id_261_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_253_copy_261_id_261)
	def new_session_box_navigation_mapping_copy_253_copy_257_id_257_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_253_copy_257_id_257)
	def new_session_box_navigation_mapping_copy_253_copy_255_id_255_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_253_copy_255_id_255)
	def new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_253_copy_255_copy_256_id_256)
	def new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260_led_listener(self):
		self.feedback_brain(self.new_session_box_navigation_mapping_copy_253_copy_255_copy_260_id_260)
	def new_send_mapping_id_173_led_listener(self):
		self.feedback_brain(self.new_send_mapping_id_173)
	def new_send_mapping_copy_182_id_182_led_listener(self):
		self.feedback_brain(self.new_send_mapping_copy_182_id_182)
	def new_send_mapping_id_172_led_listener(self):
		self.feedback_brain(self.new_send_mapping_id_172)
	def new_send_mapping_copy_183_id_183_led_listener(self):
		self.feedback_brain(self.new_send_mapping_copy_183_id_183)
	def new_send_mapping_6_id_171_led_listener(self):
		self.feedback_brain(self.new_send_mapping_6_id_171)
	def new_send_mapping_6_copy_184_id_184_led_listener(self):
		self.feedback_brain(self.new_send_mapping_6_copy_184_id_184)
	def new_send_mapping_5_id_170_led_listener(self):
		self.feedback_brain(self.new_send_mapping_5_id_170)
	def new_send_mapping_5_copy_185_id_185_led_listener(self):
		self.feedback_brain(self.new_send_mapping_5_copy_185_id_185)
	def new_send_mapping_4_id_169_led_listener(self):
		self.feedback_brain(self.new_send_mapping_4_id_169)
	def new_send_mapping_4_copy_186_id_186_led_listener(self):
		self.feedback_brain(self.new_send_mapping_4_copy_186_id_186)
	def new_send_mapping_3_id_168_led_listener(self):
		self.feedback_brain(self.new_send_mapping_3_id_168)
	def new_send_mapping_3_copy_187_id_187_led_listener(self):
		self.feedback_brain(self.new_send_mapping_3_copy_187_id_187)
	def new_send_mapping_id_167_led_listener(self):
		self.feedback_brain(self.new_send_mapping_id_167)
	def new_send_mapping_copy_188_id_188_led_listener(self):
		self.feedback_brain(self.new_send_mapping_copy_188_id_188)
	def new_send_mapping_id_166_led_listener(self):
		self.feedback_brain(self.new_send_mapping_id_166)
	def new_send_mapping_copy_189_id_189_led_listener(self):
		self.feedback_brain(self.new_send_mapping_copy_189_id_189)
	def volume_1_id_7_led_listener(self):
		self.feedback_brain(self.volume_1_id_7)
	def volume_1_id_9_led_listener(self):
		self.feedback_brain(self.volume_1_id_9)
	def volume_1_id_11_led_listener(self):
		self.feedback_brain(self.volume_1_id_11)
	def volume_1_id_13_led_listener(self):
		self.feedback_brain(self.volume_1_id_13)
	def volume_1_id_15_led_listener(self):
		self.feedback_brain(self.volume_1_id_15)
	def volume_1_id_17_led_listener(self):
		self.feedback_brain(self.volume_1_id_17)
	def volume_1_id_19_led_listener(self):
		self.feedback_brain(self.volume_1_id_19)
	def volume_1_id_21_led_listener(self):
		self.feedback_brain(self.volume_1_id_21)
	def mute_1_id_22_led_listener(self):
		self.feedback_brain(self.mute_1_id_22)
	def mute_1_copy_222_id_222_led_listener(self):
		self.feedback_brain(self.mute_1_copy_222_id_222)
	def solo_1_copy_223_id_223_led_listener(self):
		self.feedback_brain(self.solo_1_copy_223_id_223)
	def mute_2_id_24_led_listener(self):
		self.feedback_brain(self.mute_2_id_24)
	def mute_2_copy_224_id_224_led_listener(self):
		self.feedback_brain(self.mute_2_copy_224_id_224)
	def solo_2_copy_225_id_225_led_listener(self):
		self.feedback_brain(self.solo_2_copy_225_id_225)
	def mute_3_id_26_led_listener(self):
		self.feedback_brain(self.mute_3_id_26)
	def mute_3_copy_226_id_226_led_listener(self):
		self.feedback_brain(self.mute_3_copy_226_id_226)
	def solo_3_copy_227_id_227_led_listener(self):
		self.feedback_brain(self.solo_3_copy_227_id_227)
	def mute_4_id_28_led_listener(self):
		self.feedback_brain(self.mute_4_id_28)
	def mute_4_copy_228_id_228_led_listener(self):
		self.feedback_brain(self.mute_4_copy_228_id_228)
	def solo_4_copy_229_id_229_led_listener(self):
		self.feedback_brain(self.solo_4_copy_229_id_229)
	def mute_5_id_30_led_listener(self):
		self.feedback_brain(self.mute_5_id_30)
	def mute_5_copy_230_id_230_led_listener(self):
		self.feedback_brain(self.mute_5_copy_230_id_230)
	def solo_5_copy_231_id_231_led_listener(self):
		self.feedback_brain(self.solo_5_copy_231_id_231)
	def mute_6_id_32_led_listener(self):
		self.feedback_brain(self.mute_6_id_32)
	def mute_6_copy_232_id_232_led_listener(self):
		self.feedback_brain(self.mute_6_copy_232_id_232)
	def solo_6_copy_233_id_233_led_listener(self):
		self.feedback_brain(self.solo_6_copy_233_id_233)
	def mute_7_id_34_led_listener(self):
		self.feedback_brain(self.mute_7_id_34)
	def mute_7_copy_234_id_234_led_listener(self):
		self.feedback_brain(self.mute_7_copy_234_id_234)
	def solo_7_copy_235_id_235_led_listener(self):
		self.feedback_brain(self.solo_7_copy_235_id_235)
	def mute_8_id_36_led_listener(self):
		self.feedback_brain(self.mute_8_id_36)
	def mute_8_copy_236_id_236_led_listener(self):
		self.feedback_brain(self.mute_8_copy_236_id_236)
	def solo_8_copy_237_id_237_led_listener(self):
		self.feedback_brain(self.solo_8_copy_237_id_237)
	def play_1_id_39_led_listener(self):
		self.feedback_brain(self.play_1_id_39)
	def play_1_copy_239_id_239_led_listener(self):
		self.feedback_brain(self.play_1_copy_239_id_239)
	def stop_1_id_40_led_listener(self):
		self.feedback_brain(self.stop_1_id_40)
	def stop_1_copy_240_id_240_led_listener(self):
		self.feedback_brain(self.stop_1_copy_240_id_240)
	def pan_id_47_led_listener(self):
		self.feedback_brain(self.pan_id_47)
	def pan_copy_247_id_247_led_listener(self):
		self.feedback_brain(self.pan_copy_247_id_247)
	def aux_id_48_led_listener(self):
		self.feedback_brain(self.aux_id_48)
	def aux_copy_248_id_248_led_listener(self):
		self.feedback_brain(self.aux_copy_248_id_248)
	def mute_1_id_51_led_listener(self):
		self.feedback_brain(self.mute_1_id_51)
	def solo_1_id_52_led_listener(self):
		self.feedback_brain(self.solo_1_id_52)
	def mute_2_id_54_led_listener(self):
		self.feedback_brain(self.mute_2_id_54)
	def solo_2_id_55_led_listener(self):
		self.feedback_brain(self.solo_2_id_55)
	def mute_3_id_57_led_listener(self):
		self.feedback_brain(self.mute_3_id_57)
	def solo_3_id_58_led_listener(self):
		self.feedback_brain(self.solo_3_id_58)
	def mute_4_id_60_led_listener(self):
		self.feedback_brain(self.mute_4_id_60)
	def solo_4_id_61_led_listener(self):
		self.feedback_brain(self.solo_4_id_61)
	def mute_5_id_63_led_listener(self):
		self.feedback_brain(self.mute_5_id_63)
	def solo_5_id_64_led_listener(self):
		self.feedback_brain(self.solo_5_id_64)
	def mute_6_id_66_led_listener(self):
		self.feedback_brain(self.mute_6_id_66)
	def solo_6_id_67_led_listener(self):
		self.feedback_brain(self.solo_6_id_67)
	def mute_7_id_69_led_listener(self):
		self.feedback_brain(self.mute_7_id_69)
	def solo_7_id_70_led_listener(self):
		self.feedback_brain(self.solo_7_id_70)
	def mute_8_id_72_led_listener(self):
		self.feedback_brain(self.mute_8_id_72)
	def solo_8_id_73_led_listener(self):
		self.feedback_brain(self.solo_8_id_73)
	def play_1_id_83_led_listener(self):
		self.feedback_brain(self.play_1_id_83)
	def stop_1_id_84_led_listener(self):
		self.feedback_brain(self.stop_1_id_84)
	def pan_id_91_led_listener(self):
		self.feedback_brain(self.pan_id_91)
	def aux_id_92_led_listener(self):
		self.feedback_brain(self.aux_id_92)
	def mute_1_id_95_led_listener(self):
		self.feedback_brain(self.mute_1_id_95)
	def solo_1_id_96_led_listener(self):
		self.feedback_brain(self.solo_1_id_96)
	def mute_2_id_98_led_listener(self):
		self.feedback_brain(self.mute_2_id_98)
	def solo_2_id_99_led_listener(self):
		self.feedback_brain(self.solo_2_id_99)
	def mute_3_id_101_led_listener(self):
		self.feedback_brain(self.mute_3_id_101)
	def solo_3_id_102_led_listener(self):
		self.feedback_brain(self.solo_3_id_102)
	def mute_4_id_104_led_listener(self):
		self.feedback_brain(self.mute_4_id_104)
	def solo_4_id_105_led_listener(self):
		self.feedback_brain(self.solo_4_id_105)
	def mute_5_id_107_led_listener(self):
		self.feedback_brain(self.mute_5_id_107)
	def solo_5_id_108_led_listener(self):
		self.feedback_brain(self.solo_5_id_108)
	def mute_6_id_110_led_listener(self):
		self.feedback_brain(self.mute_6_id_110)
	def solo_6_id_111_led_listener(self):
		self.feedback_brain(self.solo_6_id_111)
	def mute_7_id_113_led_listener(self):
		self.feedback_brain(self.mute_7_id_113)
	def solo_7_id_114_led_listener(self):
		self.feedback_brain(self.solo_7_id_114)
	def mute_8_id_116_led_listener(self):
		self.feedback_brain(self.mute_8_id_116)
	def solo_8_id_117_led_listener(self):
		self.feedback_brain(self.solo_8_id_117)
	def play_1_id_127_led_listener(self):
		self.feedback_brain(self.play_1_id_127)
	def stop_1_id_128_led_listener(self):
		self.feedback_brain(self.stop_1_id_128)
	def pan_id_135_led_listener(self):
		self.feedback_brain(self.pan_id_135)
	def aux_id_136_led_listener(self):
		self.feedback_brain(self.aux_id_136)
	def pan_1_id_137_led_listener(self):
		self.feedback_brain(self.pan_1_id_137)
	def pan_1_copy_251_id_251_led_listener(self):
		self.feedback_brain(self.pan_1_copy_251_id_251)
	def pan_3_id_139_led_listener(self):
		self.feedback_brain(self.pan_3_id_139)
	def pan_4_id_140_led_listener(self):
		self.feedback_brain(self.pan_4_id_140)
	def pan_5_id_141_led_listener(self):
		self.feedback_brain(self.pan_5_id_141)
	def pan_6_id_142_led_listener(self):
		self.feedback_brain(self.pan_6_id_142)
	def pan_7_id_143_led_listener(self):
		self.feedback_brain(self.pan_7_id_143)
	def pan_8_id_144_led_listener(self):
		self.feedback_brain(self.pan_8_id_144)	
	################## CORE: Python 3 #################
	def get_value_from_ranges(self, a1, b2, c3, d4, e5, f6, g7, h8, i9, j10, k11):
		logging = a1 
		steps = b2 
		round_down = c3 
		current_input_value = d4 
		i = {}
		i["minimum"] = e5 
		i["maximum"] = f6 
		i["decimal_places"] = g7 
		i["steps"] = steps
		i["distance"] = i["maximum"] - i["minimum"] 
		i["speed"] = i["distance"] / i["steps"] 
		i["module"] = "self" 
		inn = self.step_values(i) 
		o = {}
		o["minimum"] = h8 
		o["maximum"] = i9 
		o["decimal_places"] = j10 
		o["reverse_mode"] = k11 
		o["steps"] = steps
		o["distance"] = o["maximum"] - o["minimum"] 
		o["speed"] = o["distance"] / o["steps"] 
		o["module"] = "self" 
		out = self.step_values(o) 
		closest_inn = self.f_n(inn, current_input_value, round_down)
		relative_out_value = out[closest_inn['index']]
		ret = {}
		ret['in'] = inn
		ret['selected_in'] = closest_inn
		ret['out'] = out
		ret["selected_out"] = relative_out_value
		if(logging == True): 
			if(round_down == False):
				rounding = "up"
				rou_symb = str(">")
			else:
				rounding = "down"
				rou_symb = str("<")
			log_arr = []
			log_arr.append("In: " + str(current_input_value) )
			log_arr.append("Out: " + str(ret["selected_out"]) )
			log_arr.append("Steps: " + str(steps) )
			log_arr.append("Rounding: " + str(rounding) )
			log_arr.append("Rev: " + str(o["reverse_mode"]) )
			log_str = ' '.join(log_arr)
			table_arr = []
			table_arr.append(str("<table class='rangeValueTable'>") )
			step_arr = []
			count = 0
			for item in ret['in']:
				if(count==ret['selected_in']['index']):
					td = "<td class='slctd'>"
				else:
					td = "<td>"
				step_arr.append(td + str(count) + "</td>")
				count = count + 1
			step_str = ''.join(step_arr)
			in_arr = []
			count = 0
			for item in ret['in']:
				td = "<td>"
				if(count==ret['selected_in']['index']):
					td = "<td class='slctd'>"
				in_arr.append(td + str(item) + "</td>")
				count = count + 1
			in_str = ''.join(in_arr)
					
			out_arr = []
			count = 0
			for item in ret['out']:
				td = "<td>"
				if(count==ret['selected_in']['index']):
					td = "<td class='slctd'>"
				out_arr.append(td + str(item) + "</td>")
				count = count + 1
			out_str = ''.join(out_arr)
			rev = ""
			if o["reverse_mode"] == True:
				rev = "(Rev)"
			
			table_arr.append(str("<tr><td class='hd'>Steps</td>" + step_str + "</tr>") )
			table_arr.append(str("<tr><td class='hd'>In (" + rou_symb + str(current_input_value) + ")</td>" + in_str + "</tr>") )
			table_arr.append(str("<tr><td class='hd'>Out " + rev + "</td>" + out_str + "</tr>") )
			table_arr.append(str("</table>") )
			table_str = ''.join(table_arr)
			self.log_message("csslog: " + str(table_str) )
		return ret["selected_out"]
			
	def f_n(self, array, current_val, round_down = True):     
		i = 0
		nearest = {}
		nearest['index'] = None
		nearest['value'] = None
		prev_idx = i 
		prev_val = array[0] 
		for array_val in array:
			if array_val == current_val:
				nearest['index'] = i
				nearest['value'] = array_val
				break
			elif current_val > prev_val and current_val < array_val:
				if round_down is True:
					nearest['index'] = prev_idx
					nearest['value'] = prev_val
				else:
					nearest['index'] = i
					nearest['value'] = array_val
				break
			else: 
				prev_val = array_val
				prev_idx = i
				i = i + 1
		return nearest;
	def placehold_listener(self, value):
		return
	def pick_brain(self, obj):
		cnfg = obj.copy() 
		if cnfg["output_type"] == "val":
				self.val_brain(cnfg)
		elif cnfg["output_type"] == "func":
			self.func_brain(cnfg)
		elif cnfg["output_type"] == "bool":
			self.bool_brain(cnfg)
	def should_it_fire(self, cnfg):
		controller = getattr(self, cnfg["attached_to"])
		cnfg["value"] = controller.cur_val 
		cnfg["pre_val"] = controller.pre_val 
		cnfg["prev_press_time"] = controller.prev_press_time
		timenow = time.time()
		fire = 0;
		if (cnfg["ctrl_type"] == "on/off" or cnfg["ctrl_type"] == "increment" or cnfg["ctrl_type"] == "decrement"): 
			if(cnfg["switch_type"] == "delay"):
				if((cnfg["value"] == cnfg["enc_second"]) and (timenow - cnfg["prev_press_time"]) > cnfg["delay_amount"]):
					fire = 1;
			elif(cnfg["switch_type"] == "toggle"):
				if cnfg["value"] == cnfg["enc_first"] or cnfg["value"] == cnfg["enc_second"]:
					fire = 1;
			elif (cnfg["switch_type"] == "momentary" and cnfg["value"] == cnfg["enc_first"]):
				fire = 1;
		elif cnfg["ctrl_type"] == "absolute":
			if cnfg["value"] >= cnfg["enc_first"] and cnfg["value"] <= cnfg["enc_second"]:
				fire = 1;
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["value"] == cnfg["enc_first"] or cnfg["value"] == cnfg["enc_second"]:
				fire = 1;
		return fire
	def bool_brain(self, cnfg):
		method_to_call = getattr(eval(cnfg["module"]), cnfg["element"])
		fire = self.should_it_fire(cnfg)
		if fire == 1:
			if cnfg["element"] == "solo" and self.song().exclusive_solo:
				for index in range(len(self.song().tracks)):
					self.song().tracks[index].solo = False
				for index in range(len(self.song().return_tracks)):
					self.song().return_tracks[index].solo = False
			if cnfg["element"] == "arm" and self.song().exclusive_arm:
				for index in range(len(self.song().tracks)):
					try:
						self.song().tracks[index].arm = False
					except Exception as e:
						continue           
			if method_to_call is False:
				try:
					setattr(eval(cnfg["module"]), cnfg["element"], True)
				except Exception as e:
					self.show_message("Unable to set " + str(cnfg["element"]) + " to True")
			else: 
				try:
					setattr(eval(cnfg["module"]), cnfg["element"], False)
				except Exception as e:
					self.show_message("Unable to set " + str(cnfg["element"]) + " to False")
	def func_brain(self, cnfg):
		fire = self.should_it_fire(cnfg)
		if fire == 1: 
			method_to_call = getattr(eval(cnfg["module"]), cnfg["element"])
			if cnfg["func_arg"] != "" and cnfg["func_arg"] != "cnfg":
				method_to_call(cnfg["func_arg"]) 
			elif cnfg["func_arg"] == "cnfg":
				method_to_call(cnfg) 
			else: 
				method_to_call()
	def val_brain(self, cnfg):
		try:
			cnfg["current_position"] = getattr(eval(cnfg["module"]), cnfg["element"]) 
		except:
			self.show_message("This control does not exist in your session")
			return
		self._parameter_to_map_to = eval(cnfg["module"])
		if cnfg["ctrl_type"] != "on/off" and hasattr(self._parameter_to_map_to, "max") and hasattr(self._parameter_to_map_to, "min"):
			param_range = self._parameter_to_map_to.max - self._parameter_to_map_to.min
			if "minimum" in cnfg:
				usermin = cnfg["minimum"] / 100.;
				min_value = float(usermin * param_range) 
				cnfg["minimum"] = min_value + self._parameter_to_map_to.min
			if "maximum" in cnfg and cnfg["mapping_type"] != "On/Off":
				usermax = cnfg["maximum"] / 100.;
				max_value = float(usermax * param_range) 
				cnfg["maximum"] = max_value + self._parameter_to_map_to.min
		controller = getattr(self, cnfg["attached_to"])
		cnfg["value"] = controller.cur_val 
		cnfg["pre_val"] = controller.pre_val 
		if "decimal_places" in cnfg:
			cnfg["current_position"] = round(cnfg["current_position"], cnfg["decimal_places"])
		if cnfg["ctrl_type"] == "absolute":
			cnfg["steps"] = (cnfg["enc_second"] - cnfg["enc_first"]) 
		if cnfg["ctrl_type"] != "on/off":
			cnfg["distance"] = cnfg["maximum"] - cnfg["minimum"] 
			cnfg["speed"] = cnfg["distance"] / cnfg["steps"] 
			cnfg["step_values"] = self.step_values(cnfg) 
			cnfg["velocity_seq"] = self._velocity_seq(cnfg) 
		
		if cnfg["current_position"] < cnfg["minimum"] or cnfg["current_position"] > cnfg["maximum"]:
			new_val = self.snap_to_max_min(cnfg)
		elif cnfg["ctrl_type"] == "absolute":
			new_val = self.absolute_decision(cnfg)
		elif cnfg["ctrl_type"] == "relative":
			new_val = self.relative_decision(cnfg)
		elif cnfg["ctrl_type"] == "on/off" or cnfg["ctrl_type"] == "increment" or cnfg["ctrl_type"] == "decrement":
			new_val = self.button_decision(cnfg)
		try:
			setattr(eval(cnfg["module"]), cnfg["element"], new_val)
		except:
			return
	def snap_to_max_min(self, cnfg):
		if cnfg["snap_to"] == False:
			new_val = cnfg["current_position"]
			self.show_message("Snapping is off for this control. Check min / max values")
			return new_val
		if cnfg["current_position"] > cnfg["maximum"]:
			self.show_message("Auto snapped to max value setting")
			new_val = cnfg["maximum"]
		elif cnfg["current_position"] < cnfg["minimum"]:
			self.show_message("Auto snapped to min value setting") 
			new_val = cnfg["minimum"]
		else:
			new_val = cnfg["current_position"]
		return new_val
	def step_values(self, cnfg):
		if "module" not in cnfg or cnfg["module"] != "self":
			p = eval(cnfg["module"]) 
			if hasattr(p, 'min') and hasattr(p, 'max') and p.min == 0 and p.max == 100:
				cnfg["decimal_places"] = 0
			if hasattr(p, 'is_quantized') and p.is_quantized == True:
				cnfg["decimal_places"] = 0
		
		calc = []
		for i in range(0, cnfg["steps"] +1):
			val = (i * cnfg["speed"]) + cnfg["minimum"]
			if "decimal_places" in cnfg:
				val = round(val, cnfg["decimal_places"])
				if cnfg["decimal_places"] is 0:
					val = int(val) 
			calc.append(val)
		if "reverse_mode" in cnfg and cnfg["reverse_mode"] is True:
			calc = list(reversed(calc))
		return calc
	def relative_decision(self, cnfg):
		fire = 0
		new_val = cnfg["current_position"] 
		if cnfg["value"] == cnfg["enc_second"]: 
			max_min = "max" 
			fire = 1
		elif cnfg["value"] == cnfg["enc_first"]: 
			max_min = "min" 
			fire = 1
		if fire == 0:
			return new_val
		if cnfg["current_position"] in cnfg["step_values"]:
			current_pos_index = cnfg["step_values"].index(cnfg["current_position"])
			
			feedback = current_pos_index / cnfg["steps"] * 127
			feedback = round(feedback, 0)
			method_to_call = getattr(self, cnfg["attached_to"])
			incr_index = current_pos_index + 1
			decr_index = current_pos_index - 1
			if max_min == "max" and incr_index < len(cnfg["step_values"]): 
				incr = cnfg["step_values"][incr_index]
				while incr == cnfg["current_position"]:
					incr_index = incr_index + 1
					if incr_index < len(cnfg["step_values"]):
						incr = cnfg["step_values"][incr_index]
					else:
						break
				new_val = incr
			elif max_min == "min" and decr_index >= 0: 
				decr = cnfg["step_values"][decr_index]
				new_val = decr
			return new_val    
		else:   
			new_val = self.step_in_line(cnfg, max_min)
			return new_val
		return new_val
	def percent_as_value(self, param, percentage):
		param = 		eval(param)
		if hasattr(param, 'max') and hasattr(param, 'min'):
			param_range = param.max - param.min
			val = percentage * param_range / 100
			return val
		else: 
			self.log("param does not have min and/or max attribute(s)")
	def button_decision(self, cnfg):
		new_val = cnfg["current_position"] 
		fire = self.should_it_fire(cnfg)
		if fire == 0:
			return new_val;
		if cnfg["ctrl_type"] == "on/off":
			if(cnfg["switch_type"] == "toggle"):
				if cnfg["value"] == cnfg["enc_first"]:
					new_val = cnfg["maximum"]
					return new_val
				elif cnfg["value"] == cnfg["enc_second"]:
					new_val = cnfg["minimum"]
					return new_val
			elif(cnfg["switch_type"] == "momentary"):
				if(cnfg["current_position"] == cnfg["maximum"]):
					new_val = cnfg["minimum"]
				else: 
					new_val = cnfg["maximum"]
				return new_val
			elif(cnfg["switch_type"] == "delay"):
				if(cnfg["current_position"] == cnfg["maximum"]):
					new_val = cnfg["minimum"]
				elif (cnfg["current_position"] == cnfg["minimum"]):
					new_val = cnfg["maximum"]
				return new_val
			else:
				self.log("neither momentary or toggle were set for on off button")
				return new_val
		if cnfg["current_position"] in cnfg["step_values"]:
			current_pos_index = cnfg["step_values"].index(cnfg["current_position"])
			incr_index = current_pos_index + 1
			decr_index = current_pos_index - 1
			if cnfg["ctrl_type"] ==  "increment" and incr_index < len(cnfg["step_values"]): 
				incr = cnfg["step_values"][incr_index]
				new_val = incr
			elif cnfg["ctrl_type"] == "decrement" and decr_index >= 0: 
				decr = cnfg["step_values"][decr_index]
				new_val = decr
			return new_val
		else:
			if cnfg["ctrl_type"] ==  "increment": 
				max_min = "max"
			elif cnfg["ctrl_type"] == "decrement": max_min = "min"
			new_val = self.step_in_line(cnfg, max_min)
			return new_val
		return new_val
	def step_in_line(self, cnfg, max_min):
		previous = int()
		step_num = 0
		speed = 0 
		for step_val in cnfg["step_values"]:
			step_num += 1
			if cnfg["current_position"] > previous and cnfg["current_position"] < step_val:
				if max_min == "min":
					speed = cnfg["current_position"] - previous 
					new_val = previous
				elif max_min == "max":
					speed = step_val - cnfg["current_position"] 
					new_val = step_val
				break
			previous = step_val
		return new_val
	def absolute_decision(self, cnfg):
		if(cnfg["enc_first"] > cnfg["enc_second"]):
			self.log("enc_first is higher than enc_second, needs to be lower")
		new_val = cnfg["current_position"] 
		if cnfg["pre_val"] is None:
			return new_val
		######### Get pre_val details from list values ######### 
		######### ######### ######### ######## ######
		if cnfg["pre_val"] in cnfg["velocity_seq"]: 
			cnfg["previous_step_num"] = cnfg["velocity_seq"].index(cnfg["pre_val"]) 
			cnfg["previous_step_value"] = cnfg["step_values"][cnfg["previous_step_num"]] 
		else:
			cnfg["previous_step_value"] = None
		######### get value details from list ######### 
		######### ######### ######### ######### ######
		if cnfg["value"] in cnfg["velocity_seq"]:
			cnfg["step_num"] = cnfg["velocity_seq"].index(cnfg["value"]) 
			cnfg["step_value"] = cnfg["step_values"][cnfg["step_num"]] 
		else: 
			cnfg["step_num"] = None
			cnfg["step_value"] = None
			
		######### MAX OR MIN ########
		######### ######### ######### 
		if cnfg["reverse_mode"] is False:
			if cnfg["value"] > cnfg["pre_val"]: max_min = "max"
			elif cnfg["value"] < cnfg["pre_val"]: max_min = "min"
		elif cnfg["reverse_mode"] is True:
			if cnfg["value"] > cnfg["pre_val"]: max_min = "min"
			elif cnfg["value"] < cnfg["pre_val"]: max_min = "max"
		inside_outside = self.inside_outside_checks(cnfg)
		if inside_outside is not False:
			self.log("inside outside was not false")
			return inside_outside
		######### straight assign or takeover ######### 
		######### ######### ######### ######### #######
		if cnfg["previous_step_value"] == cnfg["current_position"]:
			new_val = cnfg["step_value"]
		elif cnfg["takeover_mode"] == "None": 
			new_val = cnfg["step_value"]
		elif cnfg["takeover_mode"] == "Pickup": 
			param = eval(cnfg["module"])
			cnfg["parameter_value"] = param.value
			new_val = self.pickup(cnfg)
		elif cnfg["takeover_mode"] == "Value scaling": new_val = self.value_scaling(cnfg, max_min)
		else: self.log("nothing got decided")
			
		return new_val
	def inside_outside_checks(self, cnfg):
		new_val = cnfg["current_position"]
		if cnfg["reverse_mode"] is False: 
			minimum = cnfg["minimum"]
			maximum = cnfg["maximum"]
		elif cnfg["reverse_mode"] is True: 
			minimum = cnfg["maximum"]
			maximum = cnfg["minimum"]
		######### was outside and is still outside ######
		######### ######### ######### ######### ######### 
		if (cnfg["pre_val"] < cnfg["enc_first"] and cnfg["value"] < cnfg["enc_first"]):
			self.log("was below and still below")
			return new_val
		elif (cnfg["pre_val"] > cnfg["enc_second"] and cnfg["value"] > cnfg["enc_second"]):
			self.log("was above and still above")
			return new_val
		## 1. Going Below
		if (cnfg["pre_val"] >= cnfg["enc_first"] and cnfg["value"] < cnfg["enc_first"]): 
			self.log("going below enter")
			if cnfg["takeover_mode"] == "Pickup":
				if cnfg["reverse_mode"] is False and cnfg["current_position"] > cnfg["previous_step_value"]:
					return new_val
				elif cnfg["reverse_mode"] is True and cnfg["current_position"] < cnfg["previous_step_value"]:
					return new_val
			if cnfg["reverse_mode"] is False:
				new_val = minimum
				self.log("going below 1")
				return new_val
			elif cnfg["reverse_mode"] is True:
				new_val = minimum
				self.log("going below 2")
				return new_val
		## 2. Going Above
		if (cnfg["pre_val"] <= cnfg["enc_second"] and cnfg["value"] > cnfg["enc_second"]):
			if cnfg["takeover_mode"] == "Pickup":
				self.log("THIS SHOULD FIRE 1")
				if cnfg["reverse_mode"] is False and cnfg["current_position"] < cnfg["previous_step_value"]:
					self.log("THIS SHOULD FIRE 2")
					return new_val
				elif cnfg["reverse_mode"] is True and cnfg["current_position"] > cnfg["previous_step_value"]:
					return new_val 
			if cnfg["reverse_mode"] is False:
				new_val = maximum
				self.log("going above 1")
				return new_val
			elif cnfg["reverse_mode"] is True:
				new_val = maximum
				self.log("going above 2")
				return new_val
		#########  >>0<< Coming inside ########
		######### ######### ######### ######### 
		if (cnfg["pre_val"] < cnfg["enc_first"] and cnfg["value"] >= cnfg["enc_first"]):
			self.log("come in from below")
			
		elif (cnfg["pre_val"] > cnfg["enc_second"] and cnfg["value"] <= cnfg["enc_second"]):
			self.log("coming in from above")
		return False
	def _velocity_seq(self,cnfg):
		number_of_steps = cnfg['enc_second'] - cnfg['enc_first']
		arr = []
		i = 0
		sequence_num = cnfg['enc_first']
		while i <= number_of_steps:
			arr.append(sequence_num)
			i += 1
			sequence_num += 1
		return arr
	def pickup(self, cnfg):
		if(cnfg["pre_val"] == -1):
			cnfg["pre_val"] = cnfg["value"]
		parameter_value = cnfg["parameter_value"]
		velocity_index = cnfg["velocity_seq"].index(cnfg["value"])
		combined_dict = dict(zip(cnfg["velocity_seq"], cnfg["step_values"]))
		interval_size = cnfg["speed"] * 3 
		velocity_range_value = combined_dict[cnfg["value"]]
		velocity_range_pre_value = combined_dict[cnfg["pre_val"]]
		if (velocity_range_value + interval_size) >= parameter_value and (velocity_range_pre_value - interval_size) <= parameter_value:
			new_val = cnfg["step_value"]
		elif (velocity_range_value - interval_size) <= parameter_value and (velocity_range_pre_value + interval_size) >= parameter_value:
			new_val = cnfg["step_value"]
		else: 
			msg = "Waiting for pickup " + str(cnfg["step_value"]) + " >> " + str(cnfg["current_position"])
			self.show_message(msg)
			new_val = cnfg["current_position"]
		return new_val
	def value_scaling(self, cnfg, max_min):
		step_num = cnfg["step_num"]
		step_value = cnfg["step_value"]
		remaining_steps = cnfg["steps"] - step_num 
		new_val = cnfg["current_position"] 
		distance_to_max = cnfg["maximum"] - cnfg["current_position"]
		distance_to_min = cnfg["current_position"] - cnfg["minimum"]
		speed_to_max = 0
		speed_to_min = 0
		if cnfg["current_position"] >= cnfg["minimum"] and cnfg["current_position"] <= cnfg["maximum"]:
			if max_min == "max" and distance_to_max > 0:
				if cnfg["reverse_mode"] is False and remaining_steps > 0: speed_to_max = distance_to_max / remaining_steps
				elif cnfg["reverse_mode"] is True and step_num > 0: speed_to_max = distance_to_max / step_num
				if speed_to_max is not 0: new_val = speed_to_max + cnfg["current_position"]
			elif max_min == "min" and distance_to_min > 0:
				if cnfg["reverse_mode"] is False and step_num > 0: speed_to_min = distance_to_min / step_num
				elif cnfg["reverse_mode"] is True and remaining_steps > 0: speed_to_min = distance_to_min / remaining_steps
				if speed_to_min is not 0: new_val = cnfg["current_position"] - speed_to_min
		return new_val
	def generate_relative_tracks_dict(self):
		tracks_dict = {}
		all_tracks_dict = {}
		total_tracks = self.get_num_of_tracks("visible_tracks") + self.get_num_of_tracks("return_tracks")
		if hasattr(self, '_session') and self._session is not None and hasattr(self._session, 'track_offset'):
			offset = self._session.track_offset()
			width = self._session.width()
			available_tracks = total_tracks - offset
			if available_tracks < width:
				width = available_tracks
		else:
			offset = 0
			width = total_tracks
		for i in range(total_tracks):
			if i < self.get_num_of_tracks("visible_tracks"):
				all_tracks_dict[i] = self.song().visible_tracks[i] 
			else:
				return_track_index = i - self.get_num_of_tracks("visible_tracks")
				all_tracks_dict[i] = self.song().return_tracks[return_track_index]
		all_tracks_dict[total_tracks] = self.song().master_track
		for i in range(width):
			adjusted_index = i + offset
			if adjusted_index < self.get_num_of_tracks("visible_tracks"):
				tracks_dict[i] = self.song().visible_tracks[adjusted_index] 
			else:
				return_track_index = adjusted_index - self.get_num_of_tracks("visible_tracks")
				tracks_dict[i] = self.song().return_tracks[return_track_index]
		self.all_tracks_dict = all_tracks_dict
		self.relative_tracks_dict = tracks_dict		
	def track_num(self, track_num):
		if ((hasattr(self, '_session')) and (self._session is not None)):
			track_num = track_num + self._session._track_offset
		else: 
			track_num = track_num
		return track_num
	def scene_num(self, scene_num):
		if ((hasattr(self, '_session')) and (self._session is not None)):
			scene_num = scene_num + self._session._scene_offset 
		else: 
			scene_num = scene_num
		return scene_num
	def log_cnfg_settings(self, cnfg):
		for i in cnfg:
			text = i + ": " + str(cnfg[i])
			self.log(text)
	def dump(self, obj):
		for attr in dir(obj):
			try:
				self.log_message("csslog: obj.%s = %r" % (attr, getattr(obj, attr)))
			except Exception as e:
				self.log_message("csslog: skip")
	def log(self, msg):
		if self.debug_on is True:
			self.log_message("csslog:" + str(msg))
	def pret(self, ugly):
		for key,value in sorted(ugly.items()):
			self.log_message(key)
			self.log_message(value)
			self.log_message("")
	################## Extra Functions: Python 3 #################
	def get_list(self, list_name):
		try:
			if list_name in self.lists:
				return self.lists[list_name]["value"]
			else: 
				self.log_message('csslog: The custom list "' + str(list_name) + '" does not exist')
				return False
		except Exception as e:
			self.log_message('csslog: There was an error getting a custom list with "get_list", ' + str(e))
			return False
	def get_list_length(self, list_name):
		theList = self.get_list(list_name) 
		if theList is False: 
			return False
		return len(theList)
	def get_list_item(self, list_name, item_num):
		try:
			theList = self.get_list(list_name) 
			if theList is False: 
				return False
			
			list_len = self.get_list_length(list_name)
			if list_len is False: 
				return
			if list_len >= item_num:
				return theList[item_num - 1]
			else: 
				self.log_message('csslog: Custom list "' + str(list_name) + '" does not have ' + str(item_num) + ' items')
				return False
		except Exception as e:
			self.log_message('csslog: There was an error in "get_list_item"', str(e))
			return False
	def add_to_list(self, list_name, value_to_add, position):
		try:
			theList = self.get_list(list_name)
			if theList is False: 
				return False
			list_len = self.get_list_length(list_name)
			if position is None or position > list_len: 
				position = list_len 
			theList.insert(position, value_to_add) 
		except Exception as e: 
			self.log_message('csslog: There was an error in "add_to_list()", ' + str(e))
			return False; 
	def remove_from_list(self, list_name, position):
		try:
			theList = self.get_list(list_name)
			if theList is False: 
				return False
			list_len = self.get_list_length(list_name)
			if list_len == 0:
				self.log_message("csslog: Nothing to delete from list '" + str(list_name) + "' as it's already empty")
				return
			if position > list_len:
				self.log_message("csslog: Custom list '" + str(list_name) + "' does not contain " + str(position) + " items")
				return False
			if position is None: 
				position = list_len
			theList.pop(position)
		except Exception as e: 
			self.log_message('csslog: There was an error in "remove_from_list", ' + str(e))
			return False; 
	def clear_list(self, list_name):
		try:
			theList = self.get_list(list_name)
			if theList is False: 
				return False
			del theList[:] 
		except Exception as e: 
			self.log_message('csslog: There was an error in "clear_list", ' + str(e))
			return False; 
	def get_num_of_tracks(self, track_slug):
		try:
			s = "self.song()." + track_slug
			s = eval(s)
			return len(s)
		except: 
			self.log_message('There was an error in get_num_of_tracks()')
			return -1
	
	def get_num_of_scenes(self):
		try:
			s = "self.song().scenes"
			s = eval(s)
			return len(s)
		except: 
			self.log_message('There was an error in get_num_of_scenes()')
			return -1
	
	def get_num_of_devices(self, track_slug):
		try:
			s = "self.song()." + track_slug + ".devices"
			s = eval(s)
			return len(s)
		except: 
			self.log_message('There was an error in get_num_of_devices()')
			return -1
	
	def get_selected_track_num(self):
		track = self.song().view.selected_track
		track = self.tuple_index(self.song().tracks, track)
		return track
	
	def get_selected_scene_num(self):
		scene = self.song().view.selected_scene
		scene = self.tuple_index(self.song().scenes, scene)
		return scene
	
	def get_selected_device_num(self, track_slug):
		try:
			device_list = "self.song()." + track_slug + ".devices" 
			selected_device = "self.song()." + track_slug + ".view.selected_device" 
			s = self.tuple_index(eval(device_list), eval(selected_device))
			if(s == False and s != 0):
				s = -1
			return s
		except:
			self.log_message('csslog: There was an error in get_num_of_devices()')
			return -1
	def get_active_mode_id(self):
		global active_mode
		return active_mode
	def get_sessbox_track_offset(self):
		if hasattr(self, '_session') and self._session is not None:
			return self._session._track_offset
		else:
			return -1
	def get_sessbox_scene_offset(self):
		if hasattr(self, '_session') and self._session is not None:
			return self._session._scene_offset
		else:
			return -1
	def get_sessbox_last_track_number(self):
		if hasattr(self, '_session') and self._session is not None:
			last_track = self._session._track_offset + self._session.width()
			return last_track
		else:
			return -1
	def get_sessbox_last_scene_number(self):
		if hasattr(self, '_session') and self._session is not None:
			last_scene = self._session._scene_offset + self._session.height()
			return last_scene
		else:
			return -1
	def get_sessbox_width(self):
		if hasattr(self, '_session') and self._session is not None:
			return self._session.width()
		else:
			return -1
	def get_sessbox_height(self):
		if hasattr(self, '_session') and self._session is not None:
			return self._session.height()
		else:
			return -1
		
	def get_sessbox_is_active(self):
		if hasattr(self, '_session') and self._session is not None:
			return True
		else:
			return False
	def set_highlighted_track(self, n):
		self.song().view.selected_track = self.song().tracks[n]
	
	def set_highlighted_scene(self, n):
		self.song().view.selected_scene = self.song().scenes[n]
	def set_sessionbox_offsets(self, track_offset, scene_offset):
		if hasattr(self, '_session') and self._session is not None:
			self._session.set_offsets(track_offset, scene_offset)
			self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
	def set_sessionbox_combo_mode(self, combo):
		if hasattr(self, '_session') and self._session is not None:
			if combo == True:
				self._session._link
			elif combo == False:
				self._session._unlink
	def _quantizeDict(self):
		grid_setting = str(self.song().view.highlighted_clip_slot.clip.view.grid_quantization)
		is_it_triplet = self.song().view.highlighted_clip_slot.clip.view.grid_is_triplet
		if (is_it_triplet is True):
			grid_setting += "_triplet"
		RecordingQuantization = Live.Song.RecordingQuantization
		quantDict = {}
		quantDict["g_thirtysecond"] = RecordingQuantization.rec_q_thirtysecond
		quantDict["g_sixteenth"] = RecordingQuantization.rec_q_sixtenth
		quantDict["g_eighth"] = RecordingQuantization.rec_q_eight
		quantDict["g_quarter"] = RecordingQuantization.rec_q_quarter
		quantDict["g_eighth_triplet"] = RecordingQuantization.rec_q_eight_triplet
		quantDict["g_sixteenth_triplet"] = RecordingQuantization.rec_q_sixtenth_triplet
		return quantDict[grid_setting];
	def _arm_follow_track_selection(self):
		for track in self.song().tracks:
			if track.can_be_armed:
				track.arm = False
		if self.song().view.selected_track.can_be_armed:
			self.song().view.selected_track.arm = True
	def turn_inputs_off(self): 
		send_feedback = False
		if hasattr(self, "global_feedback"): 
			if self.global_feedback == "custom":
				if self.global_feedback_active == True: 
					send_feedback = True
			elif hasattr(self, "controller_LED_on") and hasattr(self, "controller_LED_off"):
				send_feedback = True
		if send_feedback == True: 
			for input_name in self.input_map:
				input_ctrl = getattr(self, input_name)
				input_ctrl.send_value(self.led_off)
	def feedback_brain(self, obj):
		cnfg = obj.copy() 
		
		try:
			method_to_call = getattr(self, cnfg["feedback_brain"])
			method_to_call(cnfg)
		except:
			return 
	def feedback_bool(self, feedback_to):
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"] + "." + feedback_to["ui_listener"])
		ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
		ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
		if(feedback_to["mapping_type"] == "Mute"):
			if param == False:
				send_val = ctrl_on
			elif param == True:
				send_val = ctrl_off
		else: 
			if param == True:
				send_val = ctrl_on
			elif param == False:
				send_val = ctrl_off
		self.feedback_handler(feedback_to, send_val)
	def feedback_on_off(self, feedback_to):
		param =     eval(feedback_to["module"])
		ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
		ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
		param_value = round(param.value,2) 
		mapping_type = str(feedback_to["mapping_type"])
		if "maximum" in feedback_to and "minimum" in feedback_to:
			max_val = feedback_to["maximum"]
			min_val = feedback_to["minimum"]
		elif hasattr(param, "max") and hasattr(param, "min"): 
			max_val = param.max
			max_val = round(max_val,2)
			min_val = param.min
			min_val = round(min_val,2)
		else: 
			self.log_message(str(param) + " does not have a max/min param")
			return
		send_val = None
		if param_value == max_val:
			send_val = ctrl_on
		elif param_value == min_val:
			send_val = ctrl_off
		if send_val is not None:
			self.feedback_handler(feedback_to, send_val)
		else: 
			return
	def feedback_increment(self, feedback_to):
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"])
		mapping_type = str(feedback_to["mapping_type"])
		ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
		ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
		snapping = feedback_to["snap_to"]
		mapping_type = str(feedback_to["mapping_type"])
		if "maximum" in feedback_to and "minimum" in feedback_to:
			max_val = feedback_to["maximum"]
			min_val = feedback_to["minimum"]
			if mapping_type != "On/Off":
				max_val = self.percent_as_value(feedback_to["module"], feedback_to["maximum"])
				min_val = self.percent_as_value(feedback_to["module"], feedback_to["minimum"])
		elif hasattr(param, "max") and hasattr(param, "min"): 
			max_val = param.max
			min_val = param.min
		else: 
			self.log_message(str(param) + " does not have a max/min param")
			return
		if snapping == False and param.value < min_val:
			send_val = ctrl_off
		elif param.value < max_val: 
			send_val = ctrl_on
		else: 
			send_val = ctrl_off
		self.feedback_handler(feedback_to, send_val)
	def feedback_decrement(self, feedback_to):
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"])
		mapping_type = str(feedback_to["mapping_type"])
		ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
		ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
		snapping = feedback_to["snap_to"]
		if "maximum" in feedback_to and "minimum" in feedback_to:
			max_val = feedback_to["maximum"]
			min_val = feedback_to["minimum"]
			if mapping_type != "On/Off":
				max_val = self.percent_as_value(feedback_to["module"], feedback_to["maximum"])
				min_val = self.percent_as_value(feedback_to["module"], feedback_to["minimum"])
		elif hasattr(param, "max") and hasattr(param, "min"): 
			max_val = param.max
			min_val = param.min
		else: 
			self.log_message(str(param) + " does not have a max/min param")
			return
		if snapping == False and param.value > max_val:
			send_val = ctrl_off
		elif param.value > min_val: 
			send_val = ctrl_on
		else: 
			send_val = ctrl_off
		self.feedback_handler(feedback_to, send_val)
	def feedback_which_ctrl_on_off(self, feedback_to, on_off):
		if feedback_to["LED_feedback"] == "default":
			ctrl_on = self.led_on
			ctrl_off = self.led_off
		elif feedback_to["LED_feedback"] == "custom":
			if feedback_to["ctrl_type"] == "on/off" or feedback_to["ctrl_type"] == "increment" or feedback_to["ctrl_type"] == "decrement":
				ctrl_on = feedback_to["LED_on"]
				ctrl_off = feedback_to["LED_off"]
			elif feedback_to["ctrl_type"] == "absolute" or feedback_to["ctrl_type"] == "relative":
				ctrl_on = feedback_to["enc_first"]
				ctrl_off = feedback_to["enc_second"]
		if on_off == "on":
			value = ctrl_on
		elif on_off == "off":
			value = ctrl_off
		return value;
	def feedback_range(self, feedback_to):
		if feedback_to['ctrl_type'] == "on/off":
			self.feedback_on_off(feedback_to)
		elif feedback_to['ctrl_type'] == "increment":
			self.feedback_increment(feedback_to)
		elif feedback_to['ctrl_type'] == "decrement":
			self.feedback_decrement(feedback_to)
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"])
		feedback_to["minimum"] = param.min
		feedback_to["maximum"] = param.max
		feedback_to["distance"] = feedback_to["maximum"] - feedback_to["minimum"] 
		feedback_to["steps"] = feedback_to['enc_second'] - feedback_to['enc_first']
		feedback_to["speed"] = feedback_to["distance"] / feedback_to["steps"] 
		velocity_seq = self._velocity_seq(feedback_to)
		step_values = self.step_values(feedback_to) 
		combined_dict = dict(zip(velocity_seq, step_values))
		val = round(param.value, feedback_to["decimal_places"])
		closest_key = min(combined_dict, key=lambda k: abs(combined_dict[k] - val))
		percentage_of_ctrl_range = closest_key
		self.feedback_handler(feedback_to, percentage_of_ctrl_range)
	def feedback_a_b_crossfade_assign(self, feedback_to):
		assigned_val = eval(str(feedback_to['parent_track']) + ".mixer_device.crossfade_assign")
		if(assigned_val == 0):
			send_val = feedback_to["LED_on"]
		elif(assigned_val == 1):
			send_val = feedback_to["LED_off"]
		elif(assigned_val == 2):
			send_val = feedback_to["LED_assigned_to_b"]
		else: 
			send_val = 0
		self.feedback_handler(feedback_to, send_val)
	def feedback_handler(self, config, send_val):
		send_feedback = False
		if "LED_feedback" in config:
			if config["LED_feedback"] == "custom": 
				if config["LED_feedback_active"] == "1" or config["LED_feedback_active"] == "true": 
					send_feedback = True
			elif hasattr(self, "global_feedback"): 
				if self.global_feedback == "custom":
					if self.global_feedback_active == True: 
						send_feedback = True
				elif hasattr(self, "controller_LED_on") and hasattr(self, "controller_LED_off"):
					send_feedback = True
			if send_feedback == True: 
				if config["LED_feedback"] == "custom":
					for item in config["LED_send_feedback_to_selected"]:
						self.css_send_midi(str(item), send_val)
				else: 
					control = eval("self." + str(config["attached_to"]))
					self.css_send_midi(str(config["attached_to"]), send_val)
			else:
				self.log("feedback_handler says 'not sending led feedback'")
	def css_send_midi(self, control, velocity):
		velocity = int(velocity)
		
		parts = str(control).split('_')
		midi_type = parts[1]
		channel = int(parts[3])
		value = int(parts[5])
		if midi_type == 'cc':
			status_byte = 0xB0 | channel
		elif midi_type == 'note':
			status_byte = 0x90 | channel
		else:
		    self.log_message("csslog: css_send_midi error: Unknown MIDI type " + midi_type)
		midi_bytes = (status_byte | channel, value, velocity)
		self._send_midi(midi_bytes)
	def sess_highlight_banking_calculate(self, feedback_to, num_of_tracks_scenes, offset_is_at):
		ctrl_first = feedback_to["enc_first"]
		ctrl_last = feedback_to["enc_second"]
		ctrl_range = ctrl_last - ctrl_first
		if feedback_to['ctrl_type'] == "absolute" or feedback_to['ctrl_type'] == "relative":
			percentage_control_is_at = offset_is_at / num_of_tracks_scenes * 100
			velocity_val = ctrl_range * percentage_control_is_at / 100 + ctrl_first
			velocity_val = int(velocity_val) 
		elif feedback_to['ctrl_type'] == "on/off" or feedback_to['ctrl_type'] == "increment":
			if offset_is_at < num_of_tracks_scenes:
				velocity_val = feedback_to["LED_on"]
			else:
				velocity_val = feedback_to["LED_off"]
		elif feedback_to['ctrl_type'] == "decrement":
			if offset_is_at == 0:
				velocity_val = feedback_to["LED_off"]
			else:
				velocity_val = feedback_to["LED_on"]
		if feedback_to['ctrl_type'] == "absolute" and feedback_to["reverse_mode"] == True:
			velocity_val = ctrl_range - velocity_val
		self.feedback_handler(feedback_to, velocity_val)
	def feedback_scroll_mode_selector(self, feedback_to):
		global active_mode
		num_of_tracks_scenes = len(self.modes) - 1
		count = 0
		for mode_num in list(self.modes.values()):
			if mode_num == active_mode:
				offset_is_at = count
				break
			count += 1
		self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
	def feedback_scroll_mode_selector_select(self, feedback_to):
		global active_mode
		mode_to_select = int(feedback_to["func_arg"])
		if int(active_mode) == mode_to_select:
			self.feedback_handler(feedback_to, feedback_to["LED_on"])
		else:
			self.feedback_handler(feedback_to, feedback_to["LED_off"])
	def feedback_param_banking_select(self, feedback_to):
		if type(feedback_to["banking_number"]) == str:
			banking_number = self.get_modifier_value(feedback_to["banking_number"])
		else: 
			banking_number = feedback_to["banking_number"] - 1 
		parent_device_id = feedback_to["parent_device_id"]
		offset_is_at = getattr(self, "device_id_" + str(parent_device_id) + "_active_bank")
		if banking_number == offset_is_at:
			self.feedback_handler(feedback_to, feedback_to["LED_on"])
		else:
			self.feedback_handler(feedback_to, feedback_to["LED_off"])
	def feedback_param_banking(self, feedback_to):
		self.log_message("scroll banking fired")
		parent_device_id = feedback_to["parent_device_id"]
		bank_array = getattr(self, "device_id_" + str(parent_device_id) + "_banks")
		num_of_tracks_scenes = len(bank_array) - 1
		offset_is_at = getattr(self, "device_id_" + str(parent_device_id) + "_active_bank")
		self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
	def feedback_highlight_nav_select(self, feedback_to):
		tracks_or_scenes = feedback_to["tracks_scenes"]
		tracks_scene_num = int(feedback_to["highlight_number"])
		if tracks_or_scenes == "tracks":
			offset_is_at = int(self.selected_track_idx()) - 1
		elif tracks_or_scenes == "scenes":
			offset_is_at = int(self.selected_scene_idx()) - 1
		if tracks_scene_num == offset_is_at:
			self.feedback_handler(feedback_to, feedback_to["LED_on"])
		else:
			self.feedback_handler(feedback_to, feedback_to["LED_off"])
	def feedback_highlight_nav(self, feedback_to):
		tracks_or_scenes = feedback_to["tracks_scenes"]
		if tracks_or_scenes == "tracks":
			offset_is_at = int(self.selected_track_idx()) - 1
			num_of_tracks_scenes = int(len(self.song().tracks)) - 1
		elif tracks_or_scenes == "scenes":
			offset_is_at = int(self.selected_scene_idx()) - 1
			num_of_tracks_scenes = int(len(self.song().scenes)) - 1
		self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
	def feedback_sessbox_nav_select(self, feedback_to):
		try:
			self._session
		except:
			self.show_message("There's no Session Box to select for feedback")
			return
		tracks_scene_num = int(feedback_to["highlight_number"])
		tracks_or_scenes = feedback_to["tracks_scenes"]
		if tracks_or_scenes == "tracks":
			offset_is_at = int(self._session.track_offset())
		elif tracks_or_scenes == "scenes":
			offset_is_at = int(self._session.scene_offset())
		if tracks_scene_num == offset_is_at:
			self.feedback_handler(feedback_to, feedback_to["LED_on"])
		else:
			self.feedback_handler(feedback_to, feedback_to["LED_off"])
	def feedback_sessbox_nav(self, feedback_to):
		try:
			self._session
		except:
			self.show_message("There's no Session Box to scroll for feedback sir.")
			return
		tracks_or_scenes = feedback_to["tracks_scenes"]
		if tracks_or_scenes == "tracks":
			offset_is_at = int(self._session.track_offset())
			num_of_tracks_scenes = (len(self.song().tracks) + len(self.song().return_tracks)) - self._session.width()
		elif tracks_or_scenes == "scenes":
			offset_is_at = int(self._session.scene_offset())
			num_of_tracks_scenes = int(len(self.song().scenes)) - 1
		self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
	def feedback_tempo(self, feedback_to):
		control =   eval("self." + str(feedback_to["attached_to"]))
		param =     eval(feedback_to["module"])
		ctrl_min =  feedback_to["minimum"]
		ctrl_max =  feedback_to["maximum"]
		ctrl_type = feedback_to["ctrl_type"]
		ctrl_first = feedback_to["enc_first"]
		ctrl_last = feedback_to["enc_second"]
		default_ctrl_first = 0 
		default_ctrl_last = 127 
		crl_reverse = feedback_to["reverse_mode"]
		param_range = ctrl_max - ctrl_min
		param =     eval(feedback_to["module"] + "." + feedback_to["ui_listener"])
		zero = ctrl_min 
		if param < ctrl_min or param > ctrl_max:
			self.log("tempo is outside ctrl_min / ctrl_max")
		else:
			zerod_param = param - zero 
			percentage_control_is_at = zerod_param / param_range * 100
		ctrl_range = ctrl_last - ctrl_first
		percentage_of_ctrl_range = ctrl_range * percentage_control_is_at / 100 + ctrl_first
		if crl_reverse == True:
			percentage_of_ctrl_range = ctrl_range - percentage_of_ctrl_range
		self.feedback_handler(feedback_to, percentage_of_ctrl_range)
	def mode_device_bank_leds(self, mode_id):
		config_map = "mode_" + str(mode_id) + "_configs_map"
		config_map = getattr(self, config_map)
		for config_name in config_map:
			config = getattr(self, config_name)
			if config["mapping_type"] == "Parameter Bank":
				parent_id = config["parent_json_id"]
				bank_names_array_name = "device_id_" + str(parent_id) + "_banks"
				active_bank_name = "device_id_" + str(parent_id) + "_active_bank"
				bank_names_array = getattr(self, bank_names_array_name)
				active_bank = getattr(self, active_bank_name)
				for index, bank_name in enumerate(bank_names_array):
					if bank_name == config_name:
						if index == active_bank:
							led_on = config["LED_on"]
							self.feedback_handler(config, led_on)
						else: 
							led_off = config["LED_off"]
							self.feedback_handler(config, led_off)
	def bank_led_feedback(self, parent_device_id):
		global active_mode
		device = "device_id_" + str(parent_device_id);
		device_bank_array = getattr(self, device + "_banks")
		active_bank_idx = getattr(self, device + "_active_bank")
		device_bank_params = getattr(self, device + "_bank_parameters_" + str(active_bank_idx))
		for index, val in enumerate(device_bank_array):
			bank_cnfg = getattr(self, val)
			bank_cnfg["LED_feedback"] = "custom"; 
			if index == active_bank_idx:
					if "LED_on" in bank_cnfg:
						led_on = bank_cnfg["LED_on"]
						self.feedback_handler(bank_cnfg, led_on)
			else: 
				if "LED_off" in bank_cnfg:
					led_off = bank_cnfg["LED_off"]
					self.feedback_handler(bank_cnfg, led_off)
		
		remove_mode = getattr(self, "_remove_mode" + active_mode + "_ui_listeners")
		remove_mode()
		activate_mode = getattr(self, "_mode" + active_mode + "_ui_listeners")
		activate_mode()
		for param in device_bank_params:
			fire_param_feedback = getattr(self, param + "_led_listener")
			fire_param_feedback()
	def device_feedback(self, mode_id=None):
		if (mode_id == None):
			global active_mode
			mode_id = active_mode
		config_map = "mode_" + str(mode_id) + "_configs_map"
		config_map = getattr(self, config_map)
		for config_name in config_map:
			config = getattr(self, config_name)
			if "mapping_type" in config and config["mapping_type"] == "Device":
				led_on = config["LED_on"]
				led_off = config["LED_off"]
				try: 
					device = eval(config["module"])
				except:
					self.feedback_handler(config, led_off)
					return
				find = config["module"].find("selected_track")
				if find >= 0: 
					selected_device = self.song().view.selected_track.view.selected_device
					if device == selected_device:
						self.feedback_handler(config, led_on)
					else: 
						self.feedback_handler(config, led_off)
				else:
					for parent_name in config_map:
						parent_config = getattr(self, parent_name)
						if parent_config["json_id"] == config["parent_json_id"]:
							parent_track = parent_config["module"]
							break
					tracks_selected_device = eval(parent_track + ".view.selected_device")
					if device == tracks_selected_device:
						self.feedback_handler(config, led_on)
					else: 
						self.feedback_handler(config, led_off)
	def _on_selected_track_changed(self):
		global active_mode, prev_active_mode, modes
		self.log("selected track changed")
		remove_modex_led_listeners = "_remove_mode" + active_mode + "_led_listeners"
		add_modex_led_listeners = "_mode" + active_mode + "_led_listeners"
		if(hasattr(self, remove_modex_led_listeners)):
			mode_to_call = getattr(self, remove_modex_led_listeners)
			mode_to_call()
		if(hasattr(self, add_modex_led_listeners)):
			mode_to_call = getattr(self, add_modex_led_listeners)
			mode_to_call()
			self.track_feedback()
			self.device_feedback()
		self.refresh_state()
	def track_feedback(self, mode_id=None):
		if (mode_id == None):
			global active_mode
			mode_id = active_mode
		config_map = "mode_" + str(mode_id) + "_configs_map"
		config_map = getattr(self, config_map)
		selected_track = self.song().view.selected_track
		for config_name in config_map:
			config = getattr(self, config_name)
			if "mapping_type" in config and config["mapping_type"] == "Track":
				led_on = config["LED_on"]
				led_off = config["LED_off"]
				try: 
					track = eval(config["module"])
				except:
					self.feedback_handler(config, led_off)
					return
				if track == selected_track:
					self.feedback_handler(config, led_on)
				else: 
					self.feedback_handler(config, led_off)
	def create_clip_slot_map(self):
		num_of_tracks = int(len(self.song().tracks))
		num_of_scenes = int(len(self.song().scenes))
		for track in range(0,num_of_tracks):
			for scene in range(0,num_of_scenes):
				if(not self.song().tracks[track].clip_slots[scene].has_clip_has_listener(self._on_clip_added_removed)):
					try:
						self.song().tracks[track].clip_slots[scene].add_has_clip_listener(self._on_clip_added_removed)
					except: 
						pass
	def _on_clip_added_removed(self):
		global active_mode
		self.log("a clip has been added or removed")
		updated_by = "_on_clip_added_removed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
	def _on_track_list_changed(self):
		global active_mode
		self.generate_relative_tracks_dict()
		self.log("tracks changed")
		updated_by = "_on_tracks_changed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		self.all_track_device_listeners() 
		self.create_clip_slot_map() 
	def _on_scenes_changed(self):
		global active_mode
		self.log("scenes changed")
		updated_by = "_on_scenes_changed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		self.create_clip_slot_map() 
	def _on_devices_changed(self):
		global active_mode, prev_active_mode, modes
		self.log("devices changed")
		updated_by = "_on_devices_changed"
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		try:
			mode_to_call = getattr(self, "_remove_mode" + active_mode + "_led_listeners")
			mode_to_call()
			mode_to_call = getattr(self, "_mode" + active_mode + "_led_listeners")
			mode_to_call()
		except: 
			pass
	def _on_selected_device_changed(self):
		global active_mode, prev_active_mode, modes
		self.log("selected device changed")
		try:
			mode_to_call = getattr(self, "_remove_mode" + active_mode + "_led_listeners")
			mode_to_call()
			mode_to_call = getattr(self, "_mode" + active_mode + "_led_listeners")
			mode_to_call()
			self.device_feedback()
			self.refresh_state()
		except: 
			pass
	def _on_selected_parameter_changed(self):
		global active_mode
		self.log("selected parameter changed")
		if(hasattr(self.song().view.selected_parameter, "canonical_parent") and hasattr(self.song().view.selected_parameter.canonical_parent, "type")):
			updated_by = "_on_selected_parameter_changed"
			self._remove_custom_lom_listeners_handler(active_mode, updated_by)
			self._add_custom_lom_listeners_handler(active_mode, updated_by)
	def _on_selected_scene_changed(self):
		global active_mode, prev_active_mode, modes
		self.log("selected scene changed")
		remove_modex_led_listeners = "_remove_mode" + active_mode + "_led_listeners"
		add_modex_led_listeners = "_mode" + active_mode + "_led_listeners"
		if(hasattr(self, remove_modex_led_listeners)):
			mode_to_call = getattr(self, remove_modex_led_listeners)
			mode_to_call()
		if(hasattr(self, add_modex_led_listeners)):
			mode_to_call = getattr(self, add_modex_led_listeners)
			mode_to_call()
		self.refresh_state()
	def _all_tracks_listener(self):
		global active_mode, prev_active_mode, modes
		self.log("mode 1 tracks listener")
		mode_to_call = getattr(self, "_remove_mode" + active_mode + "_led_listeners")
		mode_to_call()
		mode_to_call = getattr(self, "_mode" + active_mode + "_led_listeners")
		mode_to_call()
	def all_track_device_listeners(self):
		numtracks = len(self.song().tracks)
		for index in range(numtracks):
			try:
				self.song().tracks[index].view.add_selected_device_listener(self._on_selected_device_changed)
				self.song().tracks[index].add_devices_listener(self._on_devices_changed)
			except:
				pass
		num_returns = len(self.song().return_tracks)
		for index in range(num_returns):
			try:
				self.song().return_tracks[index].view.add_selected_device_listener(self._on_selected_device_changed)
				self.song().return_tracks[index].add_devices_listener(self._on_devices_changed)
			except:
				pass
		try:
			self.song().master_track.view.add_selected_device_listener(self._on_selected_device_changed)
			self.song().master_track.add_devices_listener(self._on_devices_changed)
		except:
			pass
	def _remove_all_track_device_listeners(self):
		numtracks = len(self.song().tracks)
		for index in range(numtracks):
			try:
				self.song().tracks[index].view.remove_selected_device_listener(self._on_selected_device_changed)
				self.song().tracks[index].remove_devices_listener(self._on_devices_changed)
			except:
				pass
		num_returns = len(self.song().return_tracks)
		for index in range(num_returns):
			try:
				self.song().return_tracks[index].view.remove_selected_device_listener(self._on_selected_device_changed)
				self.song().return_tracks[index].remove_devices_listener(self._on_devices_changed)
			except:
				pass
		try:
			self.song().master_track.view.remove_selected_device_listener(self._on_selected_device_changed)
			self.song().master_track.remove_devices_listener(self._on_devices_changed)
		except:
			pass
	################################################
	############# Extra Functions ##################
	################################################
	def scroll_through_devices(self, cnfg):
		NavDirection = Live.Application.Application.View.NavDirection
		if cnfg["ctrl_type"] == "absolute":
			if self.song().view.selected_track.view.selected_device is not None:
				parent_devices = self.song().view.selected_track.view.selected_device.canonical_parent.devices
				num = len(parent_devices)
				num = num - 1				
				track_slug = "view.selected_track.view.selected_device.canonical_parent"
				device_list = "self.song()." + track_slug + ".devices" 
				selected_device = "self.song().view.selected_track" + ".view.selected_device" 
				selected_index = self.tuple_index(eval(device_list), eval(selected_device))
				
				controller = getattr(self, cnfg["attached_to"])
				cnfg["value"] = controller.cur_val 					
				cnfg["pre_val"] = controller.pre_val 
				cnfg["takeover_mode"] = "Pickup"
				cnfg["decimal_places"] = 0
				cnfg["steps"] = (cnfg["enc_second"] - cnfg["enc_first"]) 
				cnfg["distance"] = num - 0 
				cnfg["minimum"] = 0
				cnfg["maximum"] = num
				cnfg["distance"] = cnfg["maximum"] - cnfg["minimum"] 
				cnfg["speed"] = cnfg["distance"] / cnfg["steps"] 
				cnfg["current_position"] = selected_index
				cnfg["parameter_value"] = selected_index
				cnfg["step_values"] = self.step_values(cnfg) 
				cnfg["velocity_seq"] = self._velocity_seq(cnfg)
				cnfg["step_num"] = cnfg["velocity_seq"].index(cnfg["value"]) 
				cnfg["step_value"] = cnfg["step_values"][cnfg["step_num"]] 
				new_val = self.pickup(cnfg)
				device = self.song().view.selected_track.view.selected_device.canonical_parent.devices[new_val]
				self.song().view.select_device(device)
				if "device_nav_collapse_devices" in cnfg and cnfg["device_nav_collapse_devices"] == "1":
					for index in range(num + 1):
						parent_devices[index].view.is_collapsed = True
					device.view.is_collapsed = False
			return
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = "left"
				times = cnfg["steps"];
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = "right"
				times = cnfg["steps"];
		elif cnfg["ctrl_type"] == "on/off": 
			if cnfg["enc_first"] == cnfg["value"]:
					goto = "right"
			elif cnfg["enc_second"] == cnfg["value"]:
					goto = "right"
		elif cnfg["ctrl_type"] == "increment":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = "right"
				times = cnfg["steps"];
		elif cnfg["ctrl_type"] == "decrement":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = "left"
				times = cnfg["steps"];
		if goto == "right":
			for x in range(0, times):
				self._scroll_device_chain(NavDirection.right)
		elif goto == "left":
			for x in range(0, times):
				self._scroll_device_chain(NavDirection.left)
	def _scroll_device_chain(self, direction):
		view = self.application().view
		if not view.is_view_visible('Detail') or not view.is_view_visible('Detail/DeviceChain'):
			view.show_view('Detail')
			view.show_view('Detail/DeviceChain')
		else:
			view.scroll_view(direction, 'Detail/DeviceChain', False)
	def selected_device_idx(self):
		self._device = self.song().view.selected_track.view.selected_device
		return self.tuple_index(self.song().view.selected_track.devices, self._device)
	def selected_track_idx(self):
		self._track = self.song().view.selected_track
		self._track_num = self.tuple_index(self.song().tracks, self._track)
		self._track_num = self._track_num + 1
		return self._track_num
	def selected_scene_idx(self):
		self._scene = self.song().view.selected_scene
		self._scene_num = self.tuple_index(self.song().scenes, self._scene)
		self._scene_num = self._scene_num + 1
		return self._scene_num
	def tuple_index(self, tuple, obj):
		for i in range(0, len(tuple)):
			if (tuple[i] == obj):
				return i
		return(False)
	def select_a_device(self, cnfg):
		parent_track = cnfg["parent_track"]
		device_chain = cnfg["device_chain"]
		chain_selector = "self.song().view.selected_track" + device_chain
		try:
			self.song().view.selected_track = eval(parent_track)
			try:
				self.song().view.select_device(eval(chain_selector))
			except IndexError:
				self.show_message("Device you are trying to select does not exist on track.") 
		except IndexError:
			self.show_message("Track does not exist for the device you are selecting.")
	def a_b_crossfade_assign(self, cnfg):
		assignment_type = cnfg['assignment_type']; 
		if(assignment_type == "Scroll"):
			goto = self.scroll_a_b_assign(cnfg);
			if goto > 2:
				goto = 2
		elif cnfg["enc_first"] == cnfg["value"]:
			if assignment_type == "Select A":
				goto = 0
			elif assignment_type == "Select None":
				goto = 1
			elif assignment_type == "Select B":
				goto = 2
			else:
				goto = 0
		setattr(eval(str(cnfg['parent_track']) + ".mixer_device"), "crossfade_assign", goto)
	def scroll_a_b_assign(self, cnfg):
		should_it_fire = self.should_it_fire(cnfg)
		if(should_it_fire != 1):
			return
		current_assigned_value = eval(str(cnfg['parent_track']) + ".mixer_device.crossfade_assign")
		length = 3
		if cnfg["ctrl_type"] == "absolute":
			divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
			goto = int(cnfg["value"] / divider) 
			if cnfg["reverse_mode"] is True:
				if(goto >= 2):
					goto = 0
				elif(goto == 0):
					goto = 2
			goto = int(goto)
		elif cnfg["ctrl_type"] == "relative":
			self.log_message("csslog: relative");
			if cnfg["enc_first"] == cnfg["value"] and current_assigned_value > 0:
				goto = current_assigned_value - 1
			elif cnfg["enc_second"] == cnfg["value"] and current_assigned_value < 2:
				goto = current_assigned_value + 1
		elif cnfg["ctrl_type"] == "on/off": 
			if current_assigned_value < 2:
				goto = current_assigned_value + 1
			elif current_assigned_value >= 2:
				goto = 0
		elif cnfg["ctrl_type"] == "increment":
			if current_assigned_value < 2:
				goto = current_assigned_value + 1
			else: 
				goto = current_assigned_value
		elif cnfg["ctrl_type"] == "decrement":
			if current_assigned_value > 0:
				goto = current_assigned_value - 1
			else: 
				goto = current_assigned_value
		return int(goto)
	def scroll_highlight(self, cnfg):
		if cnfg["tracks_scenes"] == "tracks":
			length = len(self.song().tracks) + len(self.song().return_tracks)
			
			selected = self.selected_track_idx() - 1
		elif cnfg["tracks_scenes"] == "scenes":
			length = len(self.song().scenes)
			selected = self.selected_scene_idx() - 1
		else: 
			self.log("scroll_highlight error, tracks_scenes was not set")
		if cnfg["ctrl_type"] == "absolute":
			divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
			if cnfg["reverse_mode"] is False:
				goto = cnfg["value"] / divider
			elif cnfg["reverse_mode"] is True:
				goto = (divider * length) / cnfg["value"]
			goto = int(goto)
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = selected - cnfg["steps"]
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = selected + cnfg["steps"]
		elif cnfg["ctrl_type"] == "on/off": 
			if cnfg["enc_first"] == cnfg["value"]:
				goto = length
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = 0
		elif cnfg["ctrl_type"] == "increment":
			goto = selected + cnfg["steps"]
		elif cnfg["ctrl_type"] == "decrement":
			goto = selected - cnfg["steps"]
		if goto <= length and goto >= 0 and goto != selected:
			cnfg["highlight_number"] = goto
			self.select_highlight(cnfg)
	def select_sess_offset(self, cnfg):
		try:
			self._session
		except:
			self.show_message("There's no Session Box to select, buddy.")
			return
		tracks_scenes = cnfg["tracks_scenes"]
		track_offset = self._session.track_offset()
		scene_offset = self._session.scene_offset()
		if type(cnfg["highlight_number"]) == str:
			change_to = self.get_modifier_value(cnfg["highlight_number"])
		else: 
			change_to = cnfg["highlight_number"] 
		if tracks_scenes == "tracks":
			track_offset = change_to
		elif tracks_scenes == "scenes":
			scene_offset = change_to
		try:
			self._session.set_offsets(track_offset, scene_offset)
			self._session._reassign_scenes()
			self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
			self.refresh_state()
			self.call_script_reaction(active_mode, None, 'session_box_position')
		except:
			self.show_message("unable to move session box there.")
	def scroll_sess_offset(self, cnfg):
		try:
			self._session
		except:
			self.show_message("There's no Session Box to scroll, buddy.")
			return
		tracks_scenes = cnfg["tracks_scenes"]
		track_offset = self._session.track_offset()
		scene_offset = self._session.scene_offset()
		if cnfg["tracks_scenes"] == "tracks":
			length = len(self.song().tracks) + len(self.song().return_tracks)
			selected = track_offset
		elif cnfg["tracks_scenes"] == "scenes":
			length = len(self.song().scenes)
			selected = scene_offset
		else: 
			self.log("scroll_sess_offset error, tracks_scenes was not set")
		if cnfg["ctrl_type"] == "absolute":
			divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
			goto = cnfg["value"] / divider
			if cnfg["reverse_mode"] is True:
				goto = length - goto
			goto = int(goto)
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = selected - cnfg["steps"]
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = selected + cnfg["steps"]
		elif cnfg["ctrl_type"] == "on/off": 
			if cnfg["enc_first"] == cnfg["value"] or cnfg["enc_second"] == cnfg["value"]:
				if selected != 0 and selected != length - 1:
					goto = length - 1
				elif selected == 0:
					goto = length - 1
				else: 
					goto = 0        
		elif cnfg["ctrl_type"] == "increment":
			goto = selected + cnfg["steps"]
		elif cnfg["ctrl_type"] == "decrement":
			goto = selected - cnfg["steps"]
		if(goto < 0):
			goto = 0
		if cnfg["tracks_scenes"] == "tracks":
			track_offset = goto
		elif cnfg["tracks_scenes"] == "scenes":
			scene_offset = goto
		try:
			self._session.set_offsets(track_offset, scene_offset)
			self._session._reassign_scenes()
			self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
			self.refresh_state()
			self.call_script_reaction(active_mode, None, 'session_box_position')
		except:
			self.show_message("unable to move session box there.")
	def get_tracks_array(self):
		tracks_array = []
		count = 0
		for index in range(len(self.song().tracks)):
			tracks_array.append(self.song().tracks[count])
			count = count+1
		count = 0
		for index in range(len(self.song().return_tracks)): 
			tracks_array.append(self.song().return_tracks[count])
			count = count+1
		tracks_array.append(self.song().master_track)
		return tracks_array
	def select_highlight(self, cnfg):
		tracks_scenes = cnfg["tracks_scenes"]
		if type(cnfg["highlight_number"]) == str:
			change_to = self.get_modifier_value(cnfg["highlight_number"])
		else: 
			change_to = cnfg["highlight_number"] 
		
		if tracks_scenes == "tracks":
			num_of_tracks_scenes = len(self.song().tracks) + len(self.song().return_tracks) + 1
		elif tracks_scenes == "scenes":
			num_of_tracks_scenes = len(self.song().scenes)
		if num_of_tracks_scenes >= change_to + 1:
			if tracks_scenes == "tracks":
				all_tracks_arr = self.get_tracks_array()
				self.song().view.selected_track = all_tracks_arr[change_to]
			elif tracks_scenes == "scenes":
				self.song().view.selected_scene = self.song().scenes[change_to]
		else: 
			self.show_message("Your Session doesn't have " + str(change_to + 1) + " " + tracks_scenes)
	def scroll_active_device_bank(self, cnfg):
		device_id = cnfg["parent_device_id"]
		device = "device_id_" + str(device_id);
		active_bank = getattr(self, device + "_active_bank")
		banks = getattr(self, device + "_banks")
		length = len(banks) - 1
		if cnfg["ctrl_type"] == "absolute":
			divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
			if cnfg["reverse_mode"] is False:
				goto = cnfg["value"] / divider
			elif cnfg["reverse_mode"] is True:
				goto = (divider * length) / cnfg["value"]
			goto = int(goto)
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = active_bank - 1
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = active_bank + 1
		elif cnfg["ctrl_type"] == "on/off":
			if cnfg["switch_type"] == "toggle": 
				if cnfg["enc_first"] == cnfg["value"]:
					goto = length
				elif cnfg["enc_second"] == cnfg["value"]:
					goto = 0
			elif active_bank == length:
				goto = 0
			else:  
				goto = length
		elif cnfg["ctrl_type"] == "increment":
				goto = active_bank + 1
		elif cnfg["ctrl_type"] == "decrement":
				goto = active_bank - 1
		if goto <= length and goto >= 0 and goto != active_bank:
			cnfg["banking_number"] = goto + 1 
			self.change_active_device_bank(cnfg)
	def change_active_device_bank(self, cnfg):
		global active_mode
		device_id = cnfg["parent_device_id"]
		if type(cnfg["banking_number"]) == str:
			change_to_bank = self.get_modifier_value(cnfg["banking_number"])
		else: 
			change_to_bank = cnfg["banking_number"] - 1
		device = "device_id_" + str(device_id);
		bank_names = getattr(self, device + "_bank_names")
		length = len(bank_names) - 1; 
		if change_to_bank <= length:
			setattr(self, device + "_active_bank", change_to_bank)
			self.bank_led_feedback(cnfg["parent_json_id"]);
			self.show_message("changed active bank to: " + bank_names[change_to_bank])
		elif change_to_bank > length:
			self.show_message("device does not have " + str(change_to_bank + 1) + " parameter banks set")
		fire_all_mode_feedback = getattr(self, "_mode" + active_mode + "_fire_all_feedback")
		fire_all_mode_feedback()
	def session_box(self, num_tracks, num_scenes, track_offset, scene_offset, clips, stop_all, stop_tracks, scene_launch, feedbackArr, combination_mode):
		self._session = SessionComponent(num_tracks, num_scenes, enable_skinning=True)
		self._session.set_mixer(self.mixer)
		self._session.set_offsets(track_offset, scene_offset)
		self._session.add_offset_listener(self._on_session_offset_changes, identify_sender= False)
		self._session._reassign_scenes()
		self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
		if clips: 
			self._grid = ButtonMatrixElement(rows=[clips[(index*num_tracks):(index*num_tracks)+num_tracks] for index in range(num_scenes)])
			self._session.set_clip_launch_buttons(self._grid)
		if stop_all:
			self._session.set_stop_all_clips_button(stop_all)
		if stop_tracks:
			self._session.set_stop_track_clip_buttons(tuple(stop_tracks))
		if scene_launch:
			scene_launch_buttons = ButtonMatrixElement(rows=[scene_launch])
			self._session.set_scene_launch_buttons(scene_launch_buttons)
			if feedbackArr["StopClipTriggered"] is not None:
				self._session.set_stop_clip_triggered_value(feedbackArr["StopClipTriggered"])
			if feedbackArr["StopClip"] is not None: 
				self._session.set_stop_clip_value(feedbackArr["StopClip"])
		for scene_index in range(num_scenes):
			scene = self._session.scene(scene_index)
			if feedbackArr["Scene"] is not None:
				scene.set_scene_value(feedbackArr["Scene"])
			if feedbackArr["NoScene"] is not None:
				scene.set_no_scene_value(feedbackArr["NoScene"])
			if feedbackArr["SceneTriggered"] is not None:
				scene.set_triggered_value(feedbackArr["SceneTriggered"])
			for track_index in range(num_tracks):
				clip_slot = scene.clip_slot(track_index)
				if feedbackArr["ClipTriggeredPlay"] is not None: 
					clip_slot.set_triggered_to_play_value(feedbackArr["ClipTriggeredPlay"])
				if feedbackArr["ClipTriggeredRecord"] is not None: 
					clip_slot.set_triggered_to_record_value(feedbackArr["ClipTriggeredRecord"])
				if feedbackArr["RecordButton"] is not None:
					clip_slot.set_record_button_value(feedbackArr["RecordButton"])
				if feedbackArr["ClipStopped"] is not None:
					clip_slot.set_stopped_value(feedbackArr["ClipStopped"])
				if feedbackArr["ClipStarted"] is not None:
					clip_slot.set_started_value(feedbackArr["ClipStarted"])
				if feedbackArr["ClipRecording"] is not None:
					clip_slot.set_recording_value(feedbackArr["ClipRecording"])
			for index in range(len(stop_tracks)):
				stop_track_button = stop_tracks[index]
				if feedbackArr["StopTrackPlaying"] is not None and feedbackArr["StopTrackStopped"] is not None:
					stop_track_button.set_on_off_values(feedbackArr["StopTrackPlaying"], feedbackArr["StopTrackStopped"])
			if stop_all:
				if feedbackArr["StopAllOn"] is not None and feedbackArr["StopAllOff"] is not None:
					stop_all.set_on_off_values(feedbackArr["StopAllOn"], feedbackArr["StopAllOff"])
		if combination_mode == "on":
			self._session._link()
		self.refresh_state()
	def _on_session_offset_changes(self):
		global active_mode
		updated_by = "_on_session_offset_changes"
		self.generate_relative_tracks_dict()
		self._remove_custom_lom_listeners_handler(active_mode, updated_by)
		self._add_custom_lom_listeners_handler(active_mode, updated_by)
		try:
			remove_mode = getattr(self, "_remove_mode" + active_mode + "_led_listeners")
			remove_mode()
			activate_mode = getattr(self, "_mode" + active_mode + "_led_listeners")
			activate_mode()
		except:
			self.log("_on_session_offset_changes: could not remove / add led_listeners")
			return;
	def remove_session_box(self, combination_mode): 
		if hasattr(self, "_session"):
			self.current_track_offset = self._session._track_offset
			self.current_scene_offset = self._session._scene_offset
			self._session.set_clip_launch_buttons(None)
			self._set_session_highlight(-1, -1, -1, -1, False)
			self._session.set_stop_all_clips_button(None)
			self._session.set_stop_track_clip_buttons(None)
			self._session.set_scene_launch_buttons(None)
			if combination_mode == "on":
				self._session._unlink()
			self._session = None
	def scroll_modes(self, cnfg):
		controller = getattr(self, cnfg["attached_to"])
		cnfg["value"] = controller.cur_val 
		if cnfg["ctrl_type"] == "absolute":
			divider = (cnfg["enc_second"] - cnfg["enc_first"]) / (len(self.modes) - 1)
			if cnfg["reverse_mode"] is False:
				goto = cnfg["value"] / divider
			elif cnfg["reverse_mode"] is True:
				length = len(self.modes) - 1
				goto = (divider * length) / cnfg["value"]
			goto = int(goto)
		elif cnfg["ctrl_type"] == "relative":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = self.key_num - 1
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = self.key_num + 1
		elif cnfg["ctrl_type"] == "on/off": 
			if cnfg["enc_first"] == cnfg["value"]:
				goto = len(self.modes) - 1
			elif cnfg["enc_second"] == cnfg["value"]:
				goto = 0
		elif cnfg["ctrl_type"] == "increment":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = self.key_num + 1
		elif cnfg["ctrl_type"] == "decrement":
			if cnfg["enc_first"] == cnfg["value"]:
				goto = self.key_num - 1
		if goto <= len(self.modes) and goto >= 0 and active_mode != self.modes[goto]:
			self.set_active_mode(self.modes[goto])
	def listening_to_tracks(self):
		global active_mode
		self.remove_listening_to_tracks()
		for index in range(len(self.song().tracks)):
			_track = self.song().tracks[index]
			if _track.can_be_armed and hasattr(self, "_mode" + active_mode + "_arm_listener"):
				_track.add_arm_listener(getattr(self, "_mode" + active_mode + "_arm_listener"))
			if hasattr(self, "_mode" + active_mode + "_mute_listener"):
				_track.add_mute_listener(getattr(self, "_mode" + active_mode + "_mute_listener"))
			if hasattr(self, "_mode" + active_mode + "_solo_listener"):
				_track.add_solo_listener(getattr(self, "_mode" + active_mode + "_solo_listener"))
			if hasattr(self, "_mode" + active_mode + "_volume_listener"):
				_track.mixer_device.volume.add_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
			if hasattr(self, "_mode" + active_mode + "_panning_listener"):
				_track.mixer_device.panning.add_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
			if hasattr(self, "_mode" + active_mode + "_send_listener"):
				for send_index in range(len(_track.mixer_device.sends)):
					_track.mixer_device.sends[send_index].add_value_listener(getattr(self, "_mode" + active_mode + "_send_listener"))
		for index in range(len(self.song().return_tracks)):
			_return_track = self.song().return_tracks[index]
			if hasattr(self, "_mode" + active_mode + "_mute_listener"):
				_return_track.add_mute_listener(getattr(self, "_mode" + active_mode + "_mute_listener"))
			if hasattr(self, "_mode" + active_mode + "_solo_listener"):
				_return_track.add_solo_listener(getattr(self, "_mode" + active_mode + "_solo_listener"))
			if hasattr(self, "_mode" + active_mode + "_volume_listener"):
				_return_track.mixer_device.volume.add_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
			if hasattr(self, "_mode" + active_mode + "_panning_listener"):
				_return_track.mixer_device.panning.add_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
			if hasattr(self, "_mode" + active_mode + "_send_listener"):
				for send_index in range(len(_return_track.mixer_device.sends)):
					_return_track.mixer_device.sends[send_index].add_value_listener(getattr(self, "_mode" + active_mode + "_send_listener"))
		_master = self.song().master_track
		if hasattr(self, "_mode" + active_mode + "_volume_listener"):
			_master.mixer_device.volume.add_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
		if hasattr(self, "_mode" + active_mode + "_panning_listener"):
			_master.mixer_device.panning.add_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
	def remove_listening_to_tracks(self):
		global active_mode
		for index in range(len(self.song().tracks)):
			_track = self.song().tracks[index]
			if hasattr(self, "_mode" + active_mode + "_arm_listener"):
				if _track.arm_has_listener(getattr(self, "_mode" + active_mode + "_arm_listener")):
					_track.remove_arm_listener(getattr(self, "_mode" + active_mode + "_arm_listener"))
			if hasattr(self, "_mode" + active_mode + "_mute_listener"):
				if _track.mute_has_listener(getattr(self, "_mode" + active_mode + "_mute_listener")):
					_track.remove_mute_listener(getattr(self, "_mode" + active_mode + "_mute_listener"))
			if hasattr(self, "_mode" + active_mode + "_solo_listener"):
				if _track.solo_has_listener(getattr(self, "_mode" + active_mode + "_solo_listener")):
					_track.remove_solo_listener(getattr(self, "_mode" + active_mode + "_solo_listener"))
			if hasattr(self, "_mode" + active_mode + "_volume_listener"):
				if _track.mixer_device.volume.value_has_listener(getattr(self, "_mode" + active_mode + "_volume_listener")):
					_track.mixer_device.volume.remove_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
			if hasattr(self, "_mode" + active_mode + "_panning_listener"):
				if _track.mixer_device.panning.value_has_listener(getattr(self, "_mode" + active_mode + "_panning_listener")):
					_track.mixer_device.panning.remove_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
			if hasattr(self, "_mode" + active_mode + "_send_listener"):
				for send_index in range(len(_track.mixer_device.sends)):
					if _track.mixer_device.sends[send_index].value_has_listener(getattr(self, "_mode" + active_mode + "_send_listener")):
						_track.mixer_device.sends[send_index].remove_value_listener(getattr(self, "_mode" + active_mode + "_send_listener"))
		for index in range(len(self.song().return_tracks)):
			_return_track = self.song().return_tracks[index]
			if hasattr(self, "_mode" + active_mode + "_mute_listener"):
				if _return_track.mute_has_listener(getattr(self, "_mode" + active_mode + "_mute_listener")):
					_return_track.remove_mute_listener(getattr(self, "_mode" + active_mode + "_mute_listener"))
			if hasattr(self, "_mode" + active_mode + "_solo_listener"):
				if _return_track.solo_has_listener(getattr(self, "_mode" + active_mode + "_solo_listener")):
					_return_track.remove_solo_listener(getattr(self, "_mode" + active_mode + "_solo_listener"))
			if hasattr(self, "_mode" + active_mode + "_volume_listener"):
				if _return_track.mixer_device.volume.value_has_listener(getattr(self, "_mode" + active_mode + "_volume_listener")):
					_return_track.mixer_device.volume.remove_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
			if hasattr(self, "_mode" + active_mode + "_panning_listener"):
				if _return_track.mixer_device.panning.value_has_listener(getattr(self, "_mode" + active_mode + "_panning_listener")):
					_return_track.mixer_device.panning.remove_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
			if hasattr(self, "_mode" + active_mode + "_send_listener"):
				for send_index in range(len(_return_track.mixer_device.sends)):
					if _return_track.mixer_device.sends[send_index].value_has_listener(getattr(self, "_mode" + active_mode + "_send_listener")):
						_return_track.mixer_device.sends[send_index].remove_value_listener(getattr(self, "_mode" + active_mode + "_send_listener"))
		_master = self.song().master_track
		if hasattr(self, "_mode" + active_mode + "_volume_listener"):
			if _master.mixer_device.volume.value_has_listener(getattr(self, "_mode" + active_mode + "_volume_listener")):
				_master.mixer_device.volume.remove_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
		if hasattr(self, "_mode" + active_mode + "_panning_listener"):
			if _master.mixer_device.panning.value_has_listener(getattr(self, "_mode" + active_mode + "_panning_listener")):
				_master.mixer_device.panning.remove_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
	def set_active_mode(self, activate_new_mode):
		global active_mode, prev_active_mode, modes
		for number, mode_id in list(self.modes.items()):
			if mode_id == activate_new_mode:
				self.key_num = mode_id
		if(activate_new_mode == "Previous Mode"):
			if 'prev_active_mode' not in globals():
				self.show_message("No previous mode is set yet.")
			else:
				remove_mode = getattr(self, "_remove_mode" + active_mode)
				remove_mode()
				activate_new_mode = prev_active_mode
				prev_active_mode = active_mode
				self.call_script_reaction(prev_active_mode, None, 'mode_is_deactivated') 
				active_mode = activate_new_mode
				mode_to_call = getattr(self, "_mode" + activate_new_mode)
				mode_to_call()
				self.generate_relative_tracks_dict()
				self.call_script_reaction(activate_new_mode, None, 'mode_is_activated') 
		else:
			if 'active_mode' in globals():
				remove_mode = getattr(self, "_remove_mode" + active_mode)
				remove_mode()
				prev_active_mode = active_mode
				self.call_script_reaction(prev_active_mode, None, 'mode_is_deactivated') 
			active_mode = activate_new_mode 
			mode_to_call = getattr(self, "_mode" + activate_new_mode)
			mode_to_call()
			self.generate_relative_tracks_dict()
			self.call_script_reaction(activate_new_mode, None, 'mode_is_activated') 
	def target_by_name(self, target_list, name):
		matches = [t for t in target_list if t.display_name == name]
		if matches:
			return matches[0]
		return
	def _add_custom_lom_listeners_handler(self, mode_number, updated_by=False):
		self.log("custom lom listeners refreshed")
		name_string = "_mode" + str(mode_number) + "_custom_lom_listeners"
		if hasattr(self, name_string):
			try:
				mode_to_call = getattr(self, name_string)
				mode_to_call(updated_by)  
			except:
				self.log_message("csslog: unable to run " + name_string)
				pass
	def _remove_custom_lom_listeners_handler(self, mode_number, updated_by=False):
		name_string = "_remove_mode" + str(mode_number) + "_custom_lom_listeners"
		if hasattr(self, name_string):
			try:
				mode_to_call = getattr(self, name_string)
				mode_to_call(updated_by)
			except:
				self.log_message("csslog: unable to run " + name_string)
				pass
	def get_modifier_value(self, mod_name):
		return self.modifiers[mod_name]["value"]
	def set_modifier_value(self, mod_name, contents):
		global active_mode
		self.modifiers[mod_name]["value"] = contents 
		self.call_script_reaction(active_mode, mod_name, "modifier_was_updated")
	def call_script_reaction(self, mode_id, param2, reaction_name):
		one = "";   
		two = "";   
		three = ""; 
		if(mode_id!=None):
			one = "_mode_" + str(mode_id)
		if(param2!=None):
			two = "_" + str(param2)
		if(reaction_name!=None):
			three = "_" + str(reaction_name)
		reaction_method = one + two + three
		if hasattr(self, reaction_method):
			getattr(self, reaction_method)()
	def disconnect(self):
		for input_item in self.input_map:
			method_to_call = getattr(self, input_item)
			method_to_call.send_value(0)
		self.call_script_reaction(None, None, 'script_is_disconnected')